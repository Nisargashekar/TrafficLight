C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LED_UPDATEISR
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\LED_UpdateISR.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\LED_UpdateISR.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DE
                    -BUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/LED_UpdateISR.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\LED_Upda
                    -teISR.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LED_UpdateISR.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          
  19          #include <cydevice_trm.h>
  20          #include <CyLib.h>
  21          #include <LED_UpdateISR.h>
  22          #include "cyapicallbacks.h"
  23          
  24          #if !defined(LED_UpdateISR__REMOVED) /* Check for removal by optimization */
  25          
  26          /*******************************************************************************
  27          *  Place your includes, defines and code here 
  28          ********************************************************************************/
  29          /* `#START LED_UpdateISR_intc` */
  30          //extern uint8 TimeInState;
  31          extern uint8 OneSecondFlag;
  32          //void LCD_Print();
  33          /* `#END` */
  34          
  35          
  36          /*******************************************************************************
  37          * Function Name: LED_UpdateISR_Start
  38          ********************************************************************************
  39          *
  40          * Summary:
  41          *  Set up the interrupt and enable it. This function disables the interrupt, 
  42          *  sets the default interrupt vector, sets the priority from the value in the
  43          *  Design Wide Resources Interrupt Editor, then enables the interrupt to the 
  44          *  interrupt controller.
  45          *
  46          * Parameters:  
  47          *   None
  48          *
  49          * Return:
  50          *   None
  51          *
  52          *******************************************************************************/
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 2   

  53          void LED_UpdateISR_Start(void) 
  54          {
  55   1          /* For all we know the interrupt is active. */
  56   1          LED_UpdateISR_Disable();
  57   1      
  58   1          /* Set the ISR to point to the LED_UpdateISR Interrupt. */
  59   1          LED_UpdateISR_SetVector(&LED_UpdateISR_Interrupt);
  60   1      
  61   1          /* Set the priority. */
  62   1          LED_UpdateISR_SetPriority((uint8)LED_UpdateISR_INTC_PRIOR_NUMBER);
  63   1      
  64   1          /* Enable it. */
  65   1          LED_UpdateISR_Enable();
  66   1      }
  67          
  68          
  69          /*******************************************************************************
  70          * Function Name: LED_UpdateISR_StartEx
  71          ********************************************************************************
  72          *
  73          * Summary:
  74          *  Sets up the interrupt and enables it. This function disables the interrupt,
  75          *  sets the interrupt vector based on the address passed in, sets the priority 
  76          *  from the value in the Design Wide Resources Interrupt Editor, then enables 
  77          *  the interrupt to the interrupt controller.
  78          *  
  79          *  When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
  80          *  used to provide consistent definition across compilers:
  81          *  
  82          *  Function definition example:
  83          *   CY_ISR(MyISR)
  84          *   {
  85          *   }
  86          *   Function prototype example:
  87          *   CY_ISR_PROTO(MyISR);
  88          *
  89          * Parameters:  
  90          *   address: Address of the ISR to set in the interrupt vector table.
  91          *
  92          * Return:
  93          *   None
  94          *
  95          *******************************************************************************/
  96          void LED_UpdateISR_StartEx(cyisraddress address) 
  97          {
  98   1          /* For all we know the interrupt is active. */
  99   1          LED_UpdateISR_Disable();
 100   1      
 101   1          /* Set the ISR to point to the LED_UpdateISR Interrupt. */
 102   1          LED_UpdateISR_SetVector(address);
 103   1      
 104   1          /* Set the priority. */
 105   1          LED_UpdateISR_SetPriority((uint8)LED_UpdateISR_INTC_PRIOR_NUMBER);
 106   1      
 107   1          /* Enable it. */
 108   1          LED_UpdateISR_Enable();
 109   1      }
 110          
 111          
 112          /*******************************************************************************
 113          * Function Name: LED_UpdateISR_Stop
 114          ********************************************************************************
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 3   

 115          *
 116          * Summary:
 117          *   Disables and removes the interrupt.
 118          *
 119          * Parameters:  
 120          *   None
 121          *
 122          * Return:
 123          *   None
 124          *
 125          *******************************************************************************/
 126          void LED_UpdateISR_Stop(void) 
 127          {
 128   1          /* Disable this interrupt. */
 129   1          LED_UpdateISR_Disable();
 130   1      }
 131          
 132          
 133          /*******************************************************************************
 134          * Function Name: LED_UpdateISR_Interrupt
 135          ********************************************************************************
 136          *
 137          * Summary:
 138          *   The default Interrupt Service Routine for LED_UpdateISR.
 139          *
 140          *   Add custom code between the START and END comments to keep the next version
 141          *   of this file from over-writing your code.
 142          *
 143          *   Note You may use either the default ISR by using this API, or you may define
 144          *   your own separate ISR through ISR_StartEx().
 145          *
 146          * Parameters:  
 147          *   None
 148          *
 149          * Return:
 150          *   None
 151          *
 152          *******************************************************************************/
 153          CY_ISR(LED_UpdateISR_Interrupt)
 154          {
 155   1          #ifdef LED_UpdateISR_INTERRUPT_INTERRUPT_CALLBACK
                      LED_UpdateISR_Interrupt_InterruptCallback();
                  #endif /* LED_UpdateISR_INTERRUPT_INTERRUPT_CALLBACK */
 158   1      
 159   1          /*  Place your Interrupt code here. */
 160   1          /* `#START LED_UpdateISR_Interrupt` */
 161   1          OneSecondFlag = 1;
 162   1          
 163   1      //    if(FtimerFlag == 1){
 164   1      //        ++Ftimer;
 165   1      //    }else if(FtimerFlag == 2){
 166   1      //        //Ftimer = 0;
 167   1      //        ++Ftimer;
 168   1      //    }
 169   1      //    if(RtimerFlag == 1){
 170   1      //        ++Rtimer;
 171   1      //    }else if(RtimerFlag == 2){
 172   1      //       // Rtimer = 0;
 173   1      //        ++Rtimer;
 174   1      //    }if(DtimerFlag == 1){
 175   1      //        ++Dtimer;
 176   1      //    }else if(DtimerFlag == 2){
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 4   

 177   1      //        //Dtimer = 0;
 178   1      //        ++Dtimer;
 179   1      //    }if(LtimerFlag == 1){
 180   1      //        ++Ltimer;
 181   1      //    }else if(LtimerFlag == 2){
 182   1      //        //Ltimer = 0;
 183   1      //        ++Ltimer;
 184   1      //    }
 185   1          /* `#END` */
 186   1      
 187   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 188   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 189   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (LED_UpdateISR__ES2_PATCH ))      
                          LED_UpdateISR_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 192   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 193   1      }
 194          
 195          
 196          /*******************************************************************************
 197          * Function Name: LED_UpdateISR_SetVector
 198          ********************************************************************************
 199          *
 200          * Summary:
 201          *   Change the ISR vector for the Interrupt. Note calling LED_UpdateISR_Start
 202          *   will override any effect this method would have had. To set the vector 
 203          *   before the component has been started use LED_UpdateISR_StartEx instead.
 204          * 
 205          *   When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
 206          *   used to provide consistent definition across compilers:
 207          *
 208          *   Function definition example:
 209          *   CY_ISR(MyISR)
 210          *   {
 211          *   }
 212          *
 213          *   Function prototype example:
 214          *     CY_ISR_PROTO(MyISR);
 215          *
 216          * Parameters:
 217          *   address: Address of the ISR to set in the interrupt vector table.
 218          *
 219          * Return:
 220          *   None
 221          *
 222          *******************************************************************************/
 223          void LED_UpdateISR_SetVector(cyisraddress address) 
 224          {
 225   1          CY_SET_REG16(LED_UpdateISR_INTC_VECTOR, (uint16) address);
 226   1      }
 227          
 228          
 229          /*******************************************************************************
 230          * Function Name: LED_UpdateISR_GetVector
 231          ********************************************************************************
 232          *
 233          * Summary:
 234          *   Gets the "address" of the current ISR vector for the Interrupt.
 235          *
 236          * Parameters:
 237          *   None
 238          *
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 5   

 239          * Return:
 240          *   Address of the ISR in the interrupt vector table.
 241          *
 242          *******************************************************************************/
 243          cyisraddress LED_UpdateISR_GetVector(void) 
 244          {
 245   1          return (cyisraddress) CY_GET_REG16(LED_UpdateISR_INTC_VECTOR);
 246   1      }
 247          
 248          
 249          /*******************************************************************************
 250          * Function Name: LED_UpdateISR_SetPriority
 251          ********************************************************************************
 252          *
 253          * Summary:
 254          *   Sets the Priority of the Interrupt. 
 255          *
 256          *   Note calling LED_UpdateISR_Start or LED_UpdateISR_StartEx will 
 257          *   override any effect this API would have had. This API should only be called
 258          *   after LED_UpdateISR_Start or LED_UpdateISR_StartEx has been called. 
 259          *   To set the initial priority for the component, use the Design-Wide Resources
 260          *   Interrupt Editor.
 261          *
 262          *   Note This API has no effect on Non-maskable interrupt NMI).
 263          *
 264          * Parameters:
 265          *   priority: Priority of the interrupt, 0 being the highest priority
 266          *             PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 267          *             PSoC 4: Priority is from 0 to 3.
 268          *
 269          * Return:
 270          *   None
 271          *
 272          *******************************************************************************/
 273          void LED_UpdateISR_SetPriority(uint8 priority) 
 274          {
 275   1          *LED_UpdateISR_INTC_PRIOR = priority << 5;
 276   1      }
 277          
 278          
 279          /*******************************************************************************
 280          * Function Name: LED_UpdateISR_GetPriority
 281          ********************************************************************************
 282          *
 283          * Summary:
 284          *   Gets the Priority of the Interrupt.
 285          *
 286          * Parameters:
 287          *   None
 288          *
 289          * Return:
 290          *   Priority of the interrupt, 0 being the highest priority
 291          *    PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 292          *    PSoC 4: Priority is from 0 to 3.
 293          *
 294          *******************************************************************************/
 295          uint8 LED_UpdateISR_GetPriority(void) 
 296          {
 297   1          uint8 priority;
 298   1      
 299   1      
 300   1          priority = *LED_UpdateISR_INTC_PRIOR >> 5;
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 6   

 301   1      
 302   1          return priority;
 303   1      }
 304          
 305          
 306          /*******************************************************************************
 307          * Function Name: LED_UpdateISR_Enable
 308          ********************************************************************************
 309          *
 310          * Summary:
 311          *   Enables the interrupt to the interrupt controller. Do not call this function
 312          *   unless ISR_Start() has been called or the functionality of the ISR_Start() 
 313          *   function, which sets the vector and the priority, has been called.
 314          *
 315          * Parameters:
 316          *   None
 317          *
 318          * Return:
 319          *   None
 320          *
 321          *******************************************************************************/
 322          void LED_UpdateISR_Enable(void) 
 323          {
 324   1          /* Enable the general interrupt. */
 325   1          *LED_UpdateISR_INTC_SET_EN = LED_UpdateISR__INTC_MASK;
 326   1      }
 327          
 328          
 329          /*******************************************************************************
 330          * Function Name: LED_UpdateISR_GetState
 331          ********************************************************************************
 332          *
 333          * Summary:
 334          *   Gets the state (enabled, disabled) of the Interrupt.
 335          *
 336          * Parameters:
 337          *   None
 338          *
 339          * Return:
 340          *   1 if enabled, 0 if disabled.
 341          *
 342          *******************************************************************************/
 343          uint8 LED_UpdateISR_GetState(void) 
 344          {
 345   1          /* Get the state of the general interrupt. */
 346   1          return ((*LED_UpdateISR_INTC_SET_EN & (uint8)LED_UpdateISR__INTC_MASK) != 0u) ? 1u:0u;
 347   1      }
 348          
 349          
 350          /*******************************************************************************
 351          * Function Name: LED_UpdateISR_Disable
 352          ********************************************************************************
 353          *
 354          * Summary:
 355          *   Disables the Interrupt in the interrupt controller.
 356          *
 357          * Parameters:
 358          *   None
 359          *
 360          * Return:
 361          *   None
 362          *
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 7   

 363          *******************************************************************************/
 364          void LED_UpdateISR_Disable(void) 
 365          {
 366   1          /* Disable the general interrupt. */
 367   1          *LED_UpdateISR_INTC_CLR_EN = LED_UpdateISR__INTC_MASK;
 368   1      }
 369          
 370          
 371          /*******************************************************************************
 372          * Function Name: LED_UpdateISR_SetPending
 373          ********************************************************************************
 374          *
 375          * Summary:
 376          *   Causes the Interrupt to enter the pending state, a software method of
 377          *   generating the interrupt.
 378          *
 379          * Parameters:
 380          *   None
 381          *
 382          * Return:
 383          *   None
 384          *
 385          * Side Effects:
 386          *   If interrupts are enabled and the interrupt is set up properly, the ISR is
 387          *   entered (depending on the priority of this interrupt and other pending 
 388          *   interrupts).
 389          *
 390          *******************************************************************************/
 391          void LED_UpdateISR_SetPending(void) 
 392          {
 393   1          *LED_UpdateISR_INTC_SET_PD = LED_UpdateISR__INTC_MASK;
 394   1      }
 395          
 396          
 397          /*******************************************************************************
 398          * Function Name: LED_UpdateISR_ClearPending
 399          ********************************************************************************
 400          *
 401          * Summary:
 402          *   Clears a pending interrupt in the interrupt controller.
 403          *
 404          *   Note Some interrupt sources are clear-on-read and require the block 
 405          *   interrupt/status register to be read/cleared with the appropriate block API 
 406          *   (GPIO, UART, and so on). Otherwise the ISR will continue to remain in 
 407          *   pending state even though the interrupt itself is cleared using this API.
 408          *
 409          * Parameters:
 410          *   None
 411          *
 412          * Return:
 413          *   None
 414          *
 415          *******************************************************************************/
 416          void LED_UpdateISR_ClearPending(void) 
 417          {
 418   1          *LED_UpdateISR_INTC_CLR_PD = LED_UpdateISR__INTC_MASK;
 419   1      }
 420          
 421          #endif /* End check for removal by optimization */
 422          
 423          
 424          /* [] END OF FILE */
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LED_UpdateISR_Start (BEGIN)
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 56
0000 120000      R     LCALL   LED_UpdateISR_Disable
                                           ; SOURCE LINE # 59
0003 7E00        R     MOV     R6,#HIGH LED_UpdateISR_Interrupt
0005 7F00        R     MOV     R7,#LOW LED_UpdateISR_Interrupt
0007 120000      R     LCALL   _LED_UpdateISR_SetVector
                                           ; SOURCE LINE # 62
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _LED_UpdateISR_SetPriority
                                           ; SOURCE LINE # 65
000F 120000      R     LCALL   LED_UpdateISR_Enable
                                           ; SOURCE LINE # 66
0012 22                RET     
             ; FUNCTION LED_UpdateISR_Start (END)

             ; FUNCTION _LED_UpdateISR_StartEx (BEGIN)
                                           ; SOURCE LINE # 96
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 99
0008 120000      R     LCALL   LED_UpdateISR_Disable
                                           ; SOURCE LINE # 102
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _LED_UpdateISR_SetVector
                                           ; SOURCE LINE # 105
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _LED_UpdateISR_SetPriority
                                           ; SOURCE LINE # 108
001B 120000      R     LCALL   LED_UpdateISR_Enable
                                           ; SOURCE LINE # 109
001E 22                RET     
             ; FUNCTION _LED_UpdateISR_StartEx (END)

             ; FUNCTION LED_UpdateISR_Stop (BEGIN)
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 129
0000 120000      R     LCALL   LED_UpdateISR_Disable
                                           ; SOURCE LINE # 130
0003 22                RET     
             ; FUNCTION LED_UpdateISR_Stop (END)

             ; FUNCTION LED_UpdateISR_Interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 9   

0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 161
0014 900000      E     MOV     DPTR,#OneSecondFlag
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
001A D000        E     POP     ?C?XPAGE1SFR
001C D086              POP     DPS
001E D084              POP     DPL1
0020 D085              POP     DPH1
0022 D082              POP     DPL
0024 D083              POP     DPH
0026 D0E0              POP     ACC
0028 32                RETI    
             ; FUNCTION LED_UpdateISR_Interrupt (END)

             ; FUNCTION _LED_UpdateISR_SetVector (BEGIN)
                                           ; SOURCE LINE # 223
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7900              MOV     R1,#00H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 226
001D 22                RET     
             ; FUNCTION _LED_UpdateISR_SetVector (END)

             ; FUNCTION LED_UpdateISR_GetVector (BEGIN)
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7900              MOV     R1,#00H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 246
0009         ?C0006:
0009 22                RET     
             ; FUNCTION LED_UpdateISR_GetVector (END)

             ; FUNCTION _LED_UpdateISR_SetPriority (BEGIN)
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 10  

                                           ; SOURCE LINE # 273
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904480            MOV     DPTR,#04480H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
0015 22                RET     
             ; FUNCTION _LED_UpdateISR_SetPriority (END)

             ; FUNCTION LED_UpdateISR_GetPriority (BEGIN)
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 300
0000 904480            MOV     DPTR,#04480H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 303
0015         ?C0008:
0015 22                RET     
             ; FUNCTION LED_UpdateISR_GetPriority (END)

             ; FUNCTION LED_UpdateISR_Enable (BEGIN)
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 325
0000 9044C0            MOV     DPTR,#044C0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
0006 22                RET     
             ; FUNCTION LED_UpdateISR_Enable (END)

             ; FUNCTION LED_UpdateISR_GetState (BEGIN)
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 346
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/25/2019 18:25:41 PAGE 11  

0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E004            JNB     ACC.0,?C0010
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0011
000D         ?C0010:
000D 7F00              MOV     R7,#00H
000F         ?C0011:
                                           ; SOURCE LINE # 347
000F         ?C0012:
000F 22                RET     
             ; FUNCTION LED_UpdateISR_GetState (END)

             ; FUNCTION LED_UpdateISR_Disable (BEGIN)
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 367
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0006 22                RET     
             ; FUNCTION LED_UpdateISR_Disable (END)

             ; FUNCTION LED_UpdateISR_SetPending (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
0000 9044D0            MOV     DPTR,#044D0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
0006 22                RET     
             ; FUNCTION LED_UpdateISR_SetPending (END)

             ; FUNCTION LED_UpdateISR_ClearPending (BEGIN)
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
0000 9044D8            MOV     DPTR,#044D8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0006 22                RET     
             ; FUNCTION LED_UpdateISR_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    223    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
