C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE ADC_DELSIG_1
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\ADC_DelSig_1.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\ADC_DelSig_1.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEB
                    -UG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/ADC_DelSig_1.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\ADC_DelSig
                    -_1.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: ADC_DelSig_1.c
   3          * Version 3.30
   4          *
   5          * Description:
   6          *  This file provides the source code to the API for the Delta-Sigma ADC
   7          *  Component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "ADC_DelSig_1.h"
  19          
  20          #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
  21              #include "ADC_DelSig_1_theACLK.h"
  22          #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
  23          
  24          #include "ADC_DelSig_1_Ext_CP_Clk.h"
  25          
  26          #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
                  #include "ADC_DelSig_1_AMux.h"
              #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
  29          
  30          
  31          /***************************************
  32          * Global data allocation
  33          ***************************************/
  34          
  35          /* Software flag for checking conversion completed or not */
  36          volatile uint8 ADC_DelSig_1_convDone = 0u;
  37          
  38          /* Software flag to stop conversion for single sample conversion mode
  39          *   with resolution above 16 bits 
  40          */
  41          volatile uint8 ADC_DelSig_1_stopConversion = 0u;
  42          
  43          /* To run the initialization block only at the start up */
  44          uint8 ADC_DelSig_1_initVar = 0u;
  45          
  46          /* To check whether ADC started or not before switching the configuration */
  47          volatile uint8 ADC_DelSig_1_started = 0u;
  48          
  49          /* Flag to hold ADC config number. By default active config is 1. */
  50          volatile uint8 ADC_DelSig_1_Config = 1u;
  51          
  52          volatile int32 ADC_DelSig_1_Offset = 0;
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 2   

  53          volatile int32 ADC_DelSig_1_CountsPerVolt;
  54          
  55          
  56          /***************************************
  57          * Local data allocation
  58          ***************************************/
  59          
  60          /* The array with precalculated gain compensation coefficients */
  61          static ADC_DelSig_1_GCOR_STRUCT ADC_DelSig_1_gcor[ADC_DelSig_1_DEFAULT_NUM_CONFIGS];
  62          
  63          
  64          
  65          /***************************************
  66          * Forward function references
  67          ***************************************/
  68          static void ADC_DelSig_1_InitConfig(uint8 config) ;
  69          static void ADC_DelSig_1_GainCompensation(uint8 inputRange, uint16 idealDecGain, uint16 idealOddDecGain, 
  70                                      uint8 resolution, uint8 config) ;
  71          static void ADC_DelSig_1_SetDSMRef0Reg(uint8 value) ;
  72          
  73          
  74          /******************************************************************************
  75          * Function Name: ADC_DelSig_1_Init
  76          *******************************************************************************
  77          *
  78          * Summary:
  79          *  Initialize component's parameters to the parameters set by user in the
  80          *  customizer of the component placed onto schematic. Usually called in
  81          * ADC_DelSig_1_Start().
  82          *
  83          *
  84          * Parameters:
  85          *  None
  86          *
  87          * Return:
  88          *  None
  89          *
  90          *******************************************************************************/
  91          void ADC_DelSig_1_Init(void) 
  92          {
  93   1      
  94   1          ADC_DelSig_1_Config = 1u;
  95   1          ADC_DelSig_1_convDone = 0u;
  96   1      
  97   1          ADC_DelSig_1_Ext_CP_Clk_SetMode(CYCLK_DUTY);
  98   1      
  99   1          /* This is only valid if there is an internal clock */
 100   1          #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
 101   1              ADC_DelSig_1_theACLK_SetMode(CYCLK_DUTY);
 102   1          #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
 103   1      
 104   1          #if(ADC_DelSig_1_IRQ_REMOVE == 0u)
 105   1              /* Set interrupt priority */
 106   1              CyIntSetPriority(ADC_DelSig_1_INTC_NUMBER, ADC_DelSig_1_INTC_PRIOR_NUMBER);
 107   1          #endif   /* End ADC_DelSig_1_IRQ_REMOVE */
 108   1      
 109   1          /* Init static registers with common configuration */
 110   1          ADC_DelSig_1_DSM_DEM0_REG    = ADC_DelSig_1_CFG1_DSM_DEM0;
 111   1          ADC_DelSig_1_DSM_DEM1_REG    = ADC_DelSig_1_CFG1_DSM_DEM1;
 112   1          ADC_DelSig_1_DSM_MISC_REG    = ADC_DelSig_1_CFG1_DSM_MISC;
 113   1          ADC_DelSig_1_DSM_CLK_REG    |= ADC_DelSig_1_CFG1_DSM_CLK;
 114   1          ADC_DelSig_1_DSM_REF1_REG    = ADC_DelSig_1_CFG1_DSM_REF1;
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 3   

 115   1      
 116   1          ADC_DelSig_1_DSM_OUT0_REG    = ADC_DelSig_1_CFG1_DSM_OUT0;
 117   1          ADC_DelSig_1_DSM_OUT1_REG    = ADC_DelSig_1_CFG1_DSM_OUT1;
 118   1      
 119   1          ADC_DelSig_1_DSM_CR0_REG     = ADC_DelSig_1_CFG1_DSM_CR0;
 120   1          ADC_DelSig_1_DSM_CR1_REG     = ADC_DelSig_1_CFG1_DSM_CR1;
 121   1      #if(ADC_DelSig_1_MI_ENABLE != 0u) /* Enable Modulator Input */
                  ADC_DelSig_1_DSM_CR3_REG     |= ADC_DelSig_1_DSM_MODBIT_EN;
              #else
 124   1          ADC_DelSig_1_DSM_CR3_REG     = ADC_DelSig_1_CFG1_DSM_CR3;
 125   1      #endif /* ADC_DelSig_1_MI_ENABLE != 0u*/    
 126   1          ADC_DelSig_1_DSM_CR8_REG     = ADC_DelSig_1_CFG1_DSM_CR8;
 127   1          ADC_DelSig_1_DSM_CR9_REG     = ADC_DelSig_1_CFG1_DSM_CR9;
 128   1          ADC_DelSig_1_DSM_CR13_REG    = ADC_DelSig_1_CFG1_DSM_CR13;
 129   1      
 130   1          ADC_DelSig_1_DEC_SR_REG      = ADC_DelSig_1_CFG1_DEC_SR;
 131   1      
 132   1          /* Calculate Gain compensation coefficients for all configurations */
 133   1          ADC_DelSig_1_GainCompensation(ADC_DelSig_1_CFG1_INPUT_RANGE,
 134   1                                            ADC_DelSig_1_CFG1_IDEAL_DEC_GAIN,
 135   1                                            ADC_DelSig_1_CFG1_IDEAL_ODDDEC_GAIN,
 136   1                                            ADC_DelSig_1_CFG1_RESOLUTION,
 137   1                                            ADC_DelSig_1_CFG1);
 138   1          #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1)
 139   1              ADC_DelSig_1_GainCompensation(ADC_DelSig_1_CFG2_INPUT_RANGE,
 140   1                                                ADC_DelSig_1_CFG2_IDEAL_DEC_GAIN,
 141   1                                                ADC_DelSig_1_CFG2_IDEAL_ODDDEC_GAIN,
 142   1                                                ADC_DelSig_1_CFG2_RESOLUTION,
 143   1                                                ADC_DelSig_1_CFG2);
 144   1          #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1 */
 145   1          #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2)
 146   1              ADC_DelSig_1_GainCompensation(ADC_DelSig_1_CFG3_INPUT_RANGE,
 147   1                                                ADC_DelSig_1_CFG3_IDEAL_DEC_GAIN,
 148   1                                                ADC_DelSig_1_CFG3_IDEAL_ODDDEC_GAIN,
 149   1                                                ADC_DelSig_1_CFG3_RESOLUTION,
 150   1                                                ADC_DelSig_1_CFG3);
 151   1          #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2 */
 152   1          #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3)
 153   1              ADC_DelSig_1_GainCompensation(ADC_DelSig_1_CFG4_INPUT_RANGE,
 154   1                                                ADC_DelSig_1_CFG4_IDEAL_DEC_GAIN,
 155   1                                                ADC_DelSig_1_CFG4_IDEAL_ODDDEC_GAIN,
 156   1                                                ADC_DelSig_1_CFG4_RESOLUTION,
 157   1                                                ADC_DelSig_1_CFG4);
 158   1          #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3 */
 159   1      
 160   1          /* Set GCOR register for config1 */
 161   1          ADC_DelSig_1_DEC_GVAL_REG = ADC_DelSig_1_gcor[ADC_DelSig_1_Config - 1u].gval;
 162   1          CY_SET_REG16(ADC_DelSig_1_DEC_GCOR_16B_PTR, ADC_DelSig_1_gcor[ADC_DelSig_1_Config - 1u].gcor);
 163   1      
 164   1          /* Initialize the registers with default customizer settings for config1 */
 165   1          ADC_DelSig_1_InitConfig(ADC_DelSig_1_Config);
 166   1      }
 167          
 168          
 169          /******************************************************************************
 170          * Function Name: ADC_DelSig_1_Enable
 171          *******************************************************************************
 172          *
 173          * Summary:
 174          *  Enables the ADC DelSig block operation.
 175          *
 176          * Parameters:
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 4   

 177          *  None
 178          *
 179          * Return:
 180          *  None
 181          *
 182          * Side Effects: 
 183          *  Enables internal interrupt.
 184          *
 185          *******************************************************************************/
 186          void ADC_DelSig_1_Enable(void) 
 187          {
 188   1              uint8 config;
 189   1          uint8 enableInterrupts;
 190   1          enableInterrupts = CyEnterCriticalSection();
 191   1      
 192   1          /* Read volatile variable to the local variable */
 193   1          config = ADC_DelSig_1_Config;
 194   1          
 195   1          /* Enable active mode power for ADC */
 196   1          ADC_DelSig_1_PWRMGR_DEC_REG |= ADC_DelSig_1_ACT_PWR_DEC_EN;
 197   1          ADC_DelSig_1_PWRMGR_DSM_REG |= ADC_DelSig_1_ACT_PWR_DSM_EN;
 198   1      
 199   1           /* Enable alternative active mode power for ADC */
 200   1          ADC_DelSig_1_STBY_PWRMGR_DEC_REG |= ADC_DelSig_1_STBY_PWR_DEC_EN;
 201   1          ADC_DelSig_1_STBY_PWRMGR_DSM_REG |= ADC_DelSig_1_STBY_PWR_DSM_EN;
 202   1      
 203   1          /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and REFBUF1, enable PRES */
 204   1          ADC_DelSig_1_RESET_CR4_REG |= ADC_DelSig_1_IGNORE_PRESA1;
 205   1          ADC_DelSig_1_RESET_CR5_REG |= ADC_DelSig_1_IGNORE_PRESA2;
 206   1      
 207   1          ADC_DelSig_1_DSM_CR17_REG |= (ADC_DelSig_1_DSM_EN_BUF_VREF | ADC_DelSig_1_DSM_EN_BUF_VCM);
 208   1      
 209   1          /* Code to disable the REFBUF0 if reference chosen is External ref */
 210   1          #if (((ADC_DelSig_1_CFG1_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) || \
 211   1                (ADC_DelSig_1_CFG1_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32)) || \
 212   1               ((ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1) && \
 213   1                ((ADC_DelSig_1_CFG2_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) ||  \
 214   1                 (ADC_DelSig_1_CFG2_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))) || \
 215   1               ((ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2) && \
 216   1                ((ADC_DelSig_1_CFG3_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) ||  \
 217   1                 (ADC_DelSig_1_CFG3_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))) || \
 218   1               ((ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3) && \
 219   1                ((ADC_DelSig_1_CFG4_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) || \
 220   1                 (ADC_DelSig_1_CFG4_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))))
                      if (((config == 1u) &&
                          ((ADC_DelSig_1_CFG1_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) ||
                           (ADC_DelSig_1_CFG1_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))) ||
                          ((config == 2u) &&
                          ((ADC_DelSig_1_CFG2_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) ||
                           (ADC_DelSig_1_CFG2_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))) ||
                          ((config == 3u) &&
                          ((ADC_DelSig_1_CFG3_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) ||
                           (ADC_DelSig_1_CFG3_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))) ||
                          ((config == 4u) &&
                          ((ADC_DelSig_1_CFG4_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) ||
                           (ADC_DelSig_1_CFG4_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))))
                      {
                          /* Disable the REFBUF0 */
                          ADC_DelSig_1_DSM_CR17_REG &= (uint8)~ADC_DelSig_1_DSM_EN_BUF_VREF;
                      }
                  #endif /* External ref */
 238   1      
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 5   

 239   1          #if (((ADC_DelSig_1_CFG1_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) || \
 240   1               ((ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1) && \
 241   1                (ADC_DelSig_1_CFG2_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)) || \
 242   1               ((ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2) && \
 243   1                (ADC_DelSig_1_CFG3_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)) || \
 244   1               ((ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3) && \
 245   1                (ADC_DelSig_1_CFG4_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF))))
                      if(((config == 1u) &&
                          (ADC_DelSig_1_CFG1_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) &&
                          ((ADC_DelSig_1_CFG1_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P03) &&
                           (ADC_DelSig_1_CFG1_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P32))) ||
                           ((config == 2u) &&
                            (ADC_DelSig_1_CFG2_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) &&
                           ((ADC_DelSig_1_CFG2_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P03) &&
                           (ADC_DelSig_1_CFG2_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P32))) ||
                           ((config == 3u) &&
                            (ADC_DelSig_1_CFG3_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) &&
                           ((ADC_DelSig_1_CFG3_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P03) &&
                           (ADC_DelSig_1_CFG3_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P32))) ||
                           ((config == 4u) &&
                            (ADC_DelSig_1_CFG4_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) &&
                           ((ADC_DelSig_1_CFG4_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P03) &&
                           (ADC_DelSig_1_CFG4_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P32))))
                      {
                          /* Enable the REFBUF1 */
                          ADC_DelSig_1_DSM_REF0_REG |= ADC_DelSig_1_DSM_EN_BUF_VREF_INN;
                      }
                  #endif /* VSSA_TO_2VREF */
 267   1          if(config != 0u)
 268   1          {
 269   2              /* Suppress compiler warning */
 270   2          }
 271   1      
 272   1          /* Wait for 3 microseconds */
 273   1          CyDelayUs(ADC_DelSig_1_PRES_DELAY_TIME);
 274   1      
 275   1          /* Enable the press circuit */
 276   1          ADC_DelSig_1_RESET_CR4_REG &= (uint8)~ADC_DelSig_1_IGNORE_PRESA1;
 277   1          ADC_DelSig_1_RESET_CR5_REG &= (uint8)~ADC_DelSig_1_IGNORE_PRESA2;
 278   1      
 279   1          /* Enable negative pumps for DSM  */
 280   1          ADC_DelSig_1_PUMP_CR1_REG  |= ( ADC_DelSig_1_PUMP_CR1_CLKSEL | ADC_DelSig_1_PUMP_CR1_FORCE );
 281   1      
 282   1          /* Enable Modulator Chopping if required */
 283   1          ADC_DelSig_1_DSM_CR2_REG = ADC_DelSig_1_CFG1_DSM_CR2;
 284   1      
 285   1          /* This is only valid if there is an internal clock */
 286   1          #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
 287   1              ADC_DelSig_1_PWRMGR_CLK_REG |= ADC_DelSig_1_ACT_PWR_CLK_EN;
 288   1              ADC_DelSig_1_STBY_PWRMGR_CLK_REG |= ADC_DelSig_1_STBY_PWR_CLK_EN;
 289   1          #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
 290   1      
 291   1          /* Enable the active and alternate active power for charge pump clock */
 292   1          ADC_DelSig_1_PWRMGR_CHARGE_PUMP_CLK_REG |= ADC_DelSig_1_ACT_PWR_CHARGE_PUMP_CLK_EN;
 293   1          ADC_DelSig_1_STBY_PWRMGR_CHARGE_PUMP_CLK_REG |= ADC_DelSig_1_STBY_PWR_CHARGE_PUMP_CLK_EN;
 294   1      
 295   1          #if(ADC_DelSig_1_IRQ_REMOVE == 0u)
 296   1              /* Clear a pending interrupt */
 297   1              CyIntClearPending(ADC_DelSig_1_INTC_NUMBER);
 298   1              /* Enable interrupt */
 299   1              CyIntEnable(ADC_DelSig_1_INTC_NUMBER);
 300   1          #endif   /* End ADC_DelSig_1_IRQ_REMOVE */
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 6   

 301   1      
 302   1          CyExitCriticalSection(enableInterrupts);
 303   1      
 304   1      }
 305          
 306          
 307          /*******************************************************************************
 308          * Function Name: ADC_DelSig_1_Start
 309          ********************************************************************************
 310          *
 311          * Summary:
 312          *  Performs all required initialization for this component and enables
 313          *  the power. It configure all the register the first time it is called.
 314          *  Subsequent calls of the Start function only enable the ADC and turn
 315          *  on the power. If multiple configurations are selected, it will
 316          *  configure the ADC for configuration 1 by default, unless the
 317          *  ADC_DelSig_1_SelectConfiguration( ) function has been called to change
 318          *  the default setting.
 319          *
 320          * Parameters:
 321          *  None
 322          *
 323          * Return:
 324          *  None
 325          *
 326          * Global variables:
 327          *  ADC_DelSig_1_initVar:  Used to check the initial configuration,
 328          *  modified when this function is called for the first time.
 329          *
 330          * Side Effects: 
 331          *  Enables internal interrupt.
 332          *
 333          *******************************************************************************/
 334          void ADC_DelSig_1_Start(void) 
 335          {
 336   1          if(ADC_DelSig_1_initVar == 0u)
 337   1          {
 338   2              if(ADC_DelSig_1_started == 0u)
 339   2              {
 340   3                  ADC_DelSig_1_Init();
 341   3              }
 342   2              ADC_DelSig_1_initVar = 1u;
 343   2          }
 344   1      
 345   1          /* Enable the ADC */
 346   1          ADC_DelSig_1_Enable();
 347   1      }
 348          
 349          
 350          /*******************************************************************************
 351          * Function Name: ADC_DelSig_1_Stop
 352          ********************************************************************************
 353          *
 354          * Summary:
 355          *  This function stops and powers down the ADC component and the internal
 356          *  clock if the external clock is not selected. If an external clock is
 357          *  used, it is up to the designer to power down the external clock it
 358          *  required.
 359          *
 360          * Parameters:
 361          *  None
 362          *
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 7   

 363          * Return:
 364          *  None
 365          *
 366          *******************************************************************************/
 367          void ADC_DelSig_1_Stop(void) 
 368          {
 369   1          uint8 enableInterrupts;
 370   1          enableInterrupts = CyEnterCriticalSection();
 371   1      
 372   1          /* Stop conversions */
 373   1          ADC_DelSig_1_DEC_CR_REG &= (uint8)~ADC_DelSig_1_DEC_START_CONV;
 374   1          ADC_DelSig_1_DEC_SR_REG |=  ADC_DelSig_1_DEC_INTR_CLEAR;
 375   1      
 376   1          /* Disable PRES, Disable power to VCMBUF0, REFBUF0 and REFBUF1,
 377   1             enable PRES */
 378   1          ADC_DelSig_1_RESET_CR4_REG |= ADC_DelSig_1_IGNORE_PRESA1;
 379   1          ADC_DelSig_1_RESET_CR5_REG |= ADC_DelSig_1_IGNORE_PRESA2;
 380   1      
 381   1          ADC_DelSig_1_DSM_CR17_REG &= (uint8)~(ADC_DelSig_1_DSM_EN_BUF_VREF | ADC_DelSig_1_DSM_EN_BUF_VCM);
 382   1          ADC_DelSig_1_DSM_REF0_REG &= (uint8)~ADC_DelSig_1_DSM_EN_BUF_VREF_INN;
 383   1      
 384   1          /* Wait for 3 microseconds. */
 385   1          CyDelayUs(ADC_DelSig_1_PRES_DELAY_TIME);
 386   1      
 387   1          /* Enable the press circuit */
 388   1          ADC_DelSig_1_RESET_CR4_REG &= (uint8)~ADC_DelSig_1_IGNORE_PRESA1;
 389   1          ADC_DelSig_1_RESET_CR5_REG &= (uint8)~ADC_DelSig_1_IGNORE_PRESA2;
 390   1      
 391   1          /* Disable power to the ADC */
 392   1          ADC_DelSig_1_PWRMGR_DSM_REG &= (uint8)~ADC_DelSig_1_ACT_PWR_DSM_EN;
 393   1      
 394   1          /* Disable power to Decimator block */
 395   1          ADC_DelSig_1_PWRMGR_DEC_REG &= (uint8)~ADC_DelSig_1_ACT_PWR_DEC_EN;
 396   1      
 397   1          /* Disable alternative active power to the ADC */
 398   1          ADC_DelSig_1_STBY_PWRMGR_DEC_REG &= (uint8)~ADC_DelSig_1_STBY_PWR_DEC_EN;
 399   1          ADC_DelSig_1_STBY_PWRMGR_DSM_REG &= (uint8)~ADC_DelSig_1_STBY_PWR_DSM_EN;
 400   1      
 401   1         /* Disable negative pumps for DSM  */
 402   1          ADC_DelSig_1_PUMP_CR1_REG &= (uint8)~(ADC_DelSig_1_PUMP_CR1_CLKSEL | ADC_DelSig_1_PUMP_CR1_FORCE );
 403   1      
 404   1          /* This is only valid if there is an internal clock */
 405   1          #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
 406   1              ADC_DelSig_1_PWRMGR_CLK_REG &= (uint8)~ADC_DelSig_1_ACT_PWR_CLK_EN;
 407   1              ADC_DelSig_1_STBY_PWRMGR_CLK_REG &= (uint8)~ADC_DelSig_1_STBY_PWR_CLK_EN;
 408   1          #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
 409   1      
 410   1          /* Disable Modulator Chopping */
 411   1          ADC_DelSig_1_DSM_CR2_REG &= (uint8)~ADC_DelSig_1_DSM_MOD_CHOP_EN;
 412   1          /* Disable power to charge pump clock */
 413   1          ADC_DelSig_1_PWRMGR_CHARGE_PUMP_CLK_REG &= (uint8)~ADC_DelSig_1_ACT_PWR_CHARGE_PUMP_CLK_EN;
 414   1          ADC_DelSig_1_STBY_PWRMGR_CHARGE_PUMP_CLK_REG &= (uint8)~ADC_DelSig_1_STBY_PWR_CHARGE_PUMP_CLK_EN;
 415   1          
 416   1          CyExitCriticalSection(enableInterrupts);
 417   1      }
 418          
 419          
 420          /*******************************************************************************
 421          * Function Name: ADC_DelSig_1_SetBufferGain
 422          ********************************************************************************
 423          *
 424          * Summary:
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 8   

 425          *  Sets input buffer gain.
 426          *
 427          * Parameters:
 428          *  gain:  Two bit value to select a gain of 1, 2, 4, or 8.
 429          *
 430          * Return:
 431          *  None
 432          *
 433          *******************************************************************************/
 434          void ADC_DelSig_1_SetBufferGain(uint8 gain) 
 435          {
 436   1          uint8 tmpReg;
 437   1          tmpReg = ADC_DelSig_1_DSM_BUF1_REG & (uint8)~ADC_DelSig_1_DSM_GAIN_MASK;
 438   1          tmpReg |= (uint8)(gain << ADC_DelSig_1_DSM_GAIN_SHIFT) & ADC_DelSig_1_DSM_GAIN_MASK;
 439   1          ADC_DelSig_1_DSM_BUF1_REG = tmpReg;
 440   1      }
 441          
 442          
 443          /*******************************************************************************
 444          * Function Name: ADC_DelSig_1_SetCoherency
 445          ********************************************************************************
 446          *
 447          * Summary:
 448          *  This function allows the user to change which of the ADC's 3 word
 449          *  result will trigger a coherency unlock. The ADC's result will not be
 450          *  updated until the set byte is read either by the ADC or DMA. 
 451          *  By default the LSB is the coherency byte for right alignment data format. 
 452          *  The middle or high byte is set automatically depend on left alignment 
 453          *  configuration for DMA data transfer.
 454          *  If DMA or if a custom API requires different byte to be read the last,
 455          *  this API should be used to set the last byte of the ADC result that is read. 
 456          *  If a multibyte read is performed either by DMA or the ARM processor, the
 457          *  coherency can be set to any byte in the last word read.
 458          *
 459          * Parameters:
 460          *  coherency:  Two bit value to set the coherency bit.
 461          *           00-Coherency checking off
 462          *           01-low byte is key byte
 463          *           02-middle byte is the key byte
 464          *           03-high byte is the key byte
 465          *
 466          * Return:
 467          *  None
 468          *
 469          *******************************************************************************/
 470          void ADC_DelSig_1_SetCoherency(uint8 coherency) 
 471          {
 472   1          uint8 tmpReg;
 473   1      
 474   1          tmpReg = ADC_DelSig_1_DEC_COHER_REG & (uint8)~ADC_DelSig_1_DEC_SAMP_KEY_MASK;
 475   1          tmpReg |= coherency & ADC_DelSig_1_DEC_SAMP_KEY_MASK;
 476   1          ADC_DelSig_1_DEC_COHER_REG = tmpReg;
 477   1      }
 478          
 479          
 480          /*******************************************************************************
 481          * Function Name: ADC_DelSig_1_SetGCOR
 482          ********************************************************************************
 483          *
 484          * Summary:
 485          *  Calculates a new GCOR value and writes it into the GCOR register. 
 486          *  The GCOR value is a 16-bit value that represents a gain of 0 to 2. 
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 9   

 487          *  The ADC result is multiplied by this value before it is placed in the ADC 
 488          *  output registers. The numerical format for the GCOR value is:
 489          *  0x0000 -> 0.000
 490          *  0x8000 -> 1.000
 491          *  0xFFFF -> 1.99997
 492          *  When executing the function, the old GCOR value is multiplied by
 493          *  gainAdjust and reloaded into the GCOR register.
 494          *
 495          * Parameters:
 496          *  gainAdjust:  floating point value to set GCOR registers.
 497          *
 498          * Return:
 499          *  uint8: 0 - if GCOR value is within the expected range.
 500          *         1 - the correction value is outside GCOR value range of
 501          *             0.00 to 1.9999.
 502          *
 503          * Side Effects:  The GVAL register is set to the amount of valid bits in the
 504          *                GCOR  register minus one. If GVAL is 15 (0x0F), all 16 bits
 505          *                of the GCOR registers will be valid. If for example GVAL is
 506          *                11 (0x0B) only 12 bits will be valid. The least 4 bits will
 507          *                be lost when the GCOR value is shifted 4 places to the right.
 508          *
 509          ******************************************************************************/
 510          uint8 ADC_DelSig_1_SetGCOR(float32 gainAdjust) 
 511          {
 512   1          uint16 tmpReg;
 513   1          uint8 status;
 514   1          float32 tmpValue;
 515   1      
 516   1          tmpReg = ADC_DelSig_1_gcor[ADC_DelSig_1_Config - 1u].gcor;
 517   1          tmpValue = ((float32)tmpReg / (float32)ADC_DelSig_1_IDEAL_GAIN_CONST);
 518   1          tmpValue = tmpValue * gainAdjust;
 519   1      
 520   1          if (tmpValue > 1.9999)
 521   1          {
 522   2              status = 1u;
 523   2          }
 524   1          else
 525   1          {
 526   2              tmpValue *= (float32)ADC_DelSig_1_IDEAL_GAIN_CONST;
 527   2                      tmpReg = (uint16)tmpValue;
 528   2              CY_SET_REG16(ADC_DelSig_1_DEC_GCOR_16B_PTR, tmpReg);
 529   2              /* Update gain array to be used by SelectConfiguration() API */
 530   2             ADC_DelSig_1_gcor[ADC_DelSig_1_Config - 1u].gcor = tmpReg;
 531   2      
 532   2              status = 0u;
 533   2      
 534   2          }
 535   1          return(status);
 536   1      }
 537          
 538          
 539          /******************************************************************************
 540          * Function Name: ADC_DelSig_1_ReadGCOR
 541          *******************************************************************************
 542          *
 543          * Summary:
 544          *  This API returns the current GCOR register value, normalized based on the
 545          *  GVAL register settings.
 546          *  For example, if the GCOR value is 0x0812 and the GVAL register is set to 
 547          *  11 (0x0B) then the returned value will be shifted by for bits to the left.
 548          *  (Actual GCOR value = 0x0812, returned value = 0x8120)
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 10  

 549          *
 550          * Parameters:
 551          *  None
 552          *
 553          * Return:
 554          *  uint16:  Normalized GCOR value.
 555          *
 556          *******************************************************************************/
 557          uint16 ADC_DelSig_1_ReadGCOR(void) 
 558          {
 559   1          uint8 gValue;
 560   1          uint16 gcorValue;
 561   1      
 562   1          gValue = ADC_DelSig_1_DEC_GVAL_REG;
 563   1          gcorValue = CY_GET_REG16(ADC_DelSig_1_DEC_GCOR_16B_PTR);
 564   1      
 565   1          if (gValue < ADC_DelSig_1_MAX_GVAL)
 566   1          {
 567   2              gcorValue <<= ADC_DelSig_1_MAX_GVAL - gValue;
 568   2          }
 569   1      
 570   1          return gcorValue;
 571   1      }
 572          
 573          
 574          /*******************************************************************************
 575          * Function Name: ADC_DelSig_1_StartConvert
 576          ********************************************************************************
 577          *
 578          * Summary:
 579          *  Forces the ADC to initiate a conversion. If in the "Single Sample"
 580          *  mode, one conversion will be performed then the ADC will halt. If in
 581          *  one of the other three conversion modes, the ADC will run
 582          *  continuously until the ADC_Stop() or ADC_StopConvert() is called.
 583          *
 584          * Parameters:
 585          *  None
 586          *
 587          * Return:
 588          *  None
 589          *
 590          *******************************************************************************/
 591          void ADC_DelSig_1_StartConvert(void) 
 592          {
 593   1          /* Start the conversion */
 594   1          ADC_DelSig_1_DEC_CR_REG |= ADC_DelSig_1_DEC_START_CONV;
 595   1      }
 596          
 597          
 598          /*******************************************************************************
 599          * Function Name: ADC_DelSig_1_StopConvert
 600          ********************************************************************************
 601          *
 602          * Summary:
 603          *  Forces the ADC to stop all conversions. If the ADC is in the middle of a
 604          *  conversion, the ADC will be reset and not provide a result for that partial
 605          *  conversion.
 606          *
 607          * Parameters:
 608          *  None
 609          *
 610          * Return:
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 11  

 611          *  None
 612          *
 613          *******************************************************************************/
 614          void ADC_DelSig_1_StopConvert(void) 
 615          {
 616   1          /* Stop all conversions */
 617   1          ADC_DelSig_1_DEC_CR_REG &= (uint8)~ADC_DelSig_1_DEC_START_CONV;
 618   1      }
 619          
 620          
 621          /*******************************************************************************
 622          * Function Name: ADC_DelSig_1_IsEndConversion
 623          ********************************************************************************
 624          *
 625          * Summary:
 626          *  Checks the status that the most recently started conversion has completed.
 627          *  The status is cleared by any of ADC_GetResult8(), ADC_GetResult16() or 
 628          *  ADC_GetResult32() API.
 629          *  This function provides the programmer with two options. In one mode this 
 630          *  function immediately returns with the conversion status. In the other mode,
 631          *  the function does not return (blocking) until the conversion has completed.
 632          *
 633          * Parameters:
 634          *  retMode: Check conversion return mode. See the following table for options.
 635          *   ADC_DelSig_1_RETURN_STATUS -   Immediately returns conversion result
 636          *                                      status.
 637          *   ADC_DelSig_1_WAIT_FOR_RESULT - Does not return until ADC conversion
 638          *                                      is complete.
 639          *
 640          * Return:
 641          *  If a nonzero value is returned, the last conversion has completed.
 642          *  If the returned value is zero, the ADC is still calculating the last result.
 643          *
 644          * Global variables:
 645          *  ADC_DelSig_1_convDone:  Used to check whether conversion is complete
 646          *  or not for single sample mode with resolution is above 16
 647          *
 648          *******************************************************************************/
 649          uint8 ADC_DelSig_1_IsEndConversion(uint8 retMode) 
 650          {
 651   1          uint8 status;
 652   1      
 653   1          do
 654   1          {
 655   2              /* Check for stop convert if conversion mode is Single Sample with
 656   2              *   resolution above 16 bit
 657   2              */
 658   2              if(ADC_DelSig_1_stopConversion != 0u)
 659   2              {
 660   3                  status = ADC_DelSig_1_convDone;
 661   3              }
 662   2              else
 663   2              {
 664   3                  status = ADC_DelSig_1_DEC_SR_REG & ADC_DelSig_1_DEC_CONV_DONE;
 665   3              }
 666   2          }while((status != ADC_DelSig_1_DEC_CONV_DONE) && (retMode == ADC_DelSig_1_WAIT_FOR_RESULT));
 667   1      
 668   1          return(status);
 669   1      }
 670          
 671          
 672          /*******************************************************************************
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 12  

 673          * Function Name: ADC_DelSig_1_GetResult8
 674          ********************************************************************************
 675          *
 676          * Summary:
 677          *  This function returns the result of an 8-bit conversion. If the
 678          *  resolution is set greater than 8-bits, the LSB of the result will be
 679          *  returned. When the ADC is configured for 8-bit single ended mode,
 680          *  the ADC_GetResult16() function should be used instead. This
 681          *  function returns only signed 8-bit values. The maximum positive
 682          *  signed 8-bit value is 127, but in singled ended 8-bit mode, the
 683          *  maximum positive value is 255.
 684          *
 685          * Parameters:
 686          *  None
 687          *
 688          * Return:
 689          *  int8: The LSB of the last ADC conversion.
 690          *
 691          * Global variables:
 692          *  ADC_DelSig_1_convDone:  Cleared in single sample mode with resolution
 693          *                              above 16 bits
 694          *
 695          *******************************************************************************/
 696          int8 ADC_DelSig_1_GetResult8( void ) 
 697          {
 698   1          int8 result;
 699   1          uint8 coherency;
 700   1      
 701   1          /* Read active coherency configuration */
 702   1          coherency = ADC_DelSig_1_DEC_COHER_REG & ADC_DelSig_1_DEC_SAMP_KEY_MASK;
 703   1      
 704   1          result = (int8)ADC_DelSig_1_DEC_SAMP_REG;
 705   1      
 706   1          if(coherency == ADC_DelSig_1_DEC_SAMP_KEY_MID)
 707   1          {   /* Dummy read of the middle byte to unlock the coherency */
 708   2              (void)ADC_DelSig_1_DEC_SAMPM_REG;
 709   2          }
 710   1          else  if(coherency == ADC_DelSig_1_DEC_SAMP_KEY_HIGH)
 711   1          {   /* Dummy read of the MSB byte to unlock the coherency */
 712   2              (void)ADC_DelSig_1_DEC_SAMPH_REG;
 713   2          }
 714   1          else /*No action required for other coherency */
 715   1          {
 716   2          }
 717   1          /* Clear conversion complete status in Single Sample mode with resolution above 16 bit */
 718   1          if(ADC_DelSig_1_stopConversion != 0u)
 719   1          {
 720   2              ADC_DelSig_1_convDone = 0u;
 721   2          }
 722   1          return (result);
 723   1      }
 724          
 725          
 726          /*******************************************************************************
 727          * Function Name: ADC_DelSig_1_GetResult16
 728          ********************************************************************************
 729          *
 730          * Summary:
 731          *  Returns a 16-bit result for a conversion with a result that has a
 732          *  resolution of 8 to 16 bits. If the resolution is set greater than 16-bits,
 733          *  it will return the 16 least significant bits of the result. When the ADC
 734          *  is configured for 16-bit single ended mode, the ADC_GetResult32()
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 13  

 735          *  function should be used instead. This function returns only signed
 736          *  16-bit result, which allows a maximum positive value of 32767, not 65535.
 737          *  This function supports different coherency settings.
 738          *
 739          * Parameters:
 740          *   void
 741          *
 742          * Return:
 743          *  int16:  ADC result.
 744          *
 745          * Global variables:
 746          *  ADC_DelSig_1_convDone:  Cleared in single sample mode with resolution
 747          *                              above 16 bits
 748          *
 749          *******************************************************************************/
 750          int16 ADC_DelSig_1_GetResult16(void) 
 751          {
 752   1          uint16 result;
 753   1          uint8 coherency;
 754   1      
 755   1          /* Read active coherency configuration */
 756   1          coherency = ADC_DelSig_1_DEC_COHER_REG & ADC_DelSig_1_DEC_SAMP_KEY_MASK;
 757   1      
 758   1          if(coherency <= ADC_DelSig_1_DEC_SAMP_KEY_LOW)
 759   1          {   /*  Use default method to read result registers i.e. LSB byte read at the end*/
 760   2              #if (CY_PSOC3)
 761   2                  result = ADC_DelSig_1_DEC_SAMPM_REG;
 762   2                  result = (result << 8u) | ADC_DelSig_1_DEC_SAMP_REG;
 763   2              #else
                          result = (CY_GET_REG16(ADC_DelSig_1_DEC_SAMP_16B_PTR));
                      #endif /* CY_PSOC3 */
 766   2          }
 767   1          else /* MID or HIGH */
 768   1          {   /* Read middle byte at the end */
 769   2              #if (CY_PSOC3)
 770   2                  result = (CY_GET_REG16(ADC_DelSig_1_DEC_SAMP_16B_PTR));
 771   2              #else
                          result = ADC_DelSig_1_DEC_SAMP_REG;
                          result |=  (uint16)((uint16)ADC_DelSig_1_DEC_SAMPM_REG << 8u);
                      #endif /* CY_PSOC3 */
 775   2              if(coherency == ADC_DelSig_1_DEC_SAMP_KEY_HIGH)
 776   2              {   /* Dummy read of the MSB byte to unlock the coherency */
 777   3                  (void)ADC_DelSig_1_DEC_SAMPH_REG;
 778   3              }
 779   2          }
 780   1          /* Clear conversion complete status in Single Sample mode with resolution above 16 bit */
 781   1          if(ADC_DelSig_1_stopConversion != 0u)
 782   1          {
 783   2              ADC_DelSig_1_convDone = 0u;
 784   2          }
 785   1      
 786   1          return ((int16)result);
 787   1      }
 788          
 789          
 790          /*******************************************************************************
 791          * Function Name: ADC_DelSig_1_GetResult32
 792          ********************************************************************************
 793          *
 794          * Summary:
 795          *  Returns a 32-bit result for a conversion with a result that has a
 796          *  resolution of 8 to 20 bits.
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 14  

 797          *  This function supports different coherency settings.
 798          *
 799          * Parameters:
 800          *  None
 801          *
 802          * Return:
 803          *  int32: Result of the last ADC conversion.
 804          *
 805          * Global variables:
 806          *  ADC_DelSig_1_convDone:  Cleared in single sample mode with resolution
 807          *                              above 16 bits
 808          *
 809          *******************************************************************************/
 810          int32 ADC_DelSig_1_GetResult32(void) 
 811          {
 812   1          uint32 result;
 813   1          uint8 coherency;
 814   1          #if (CY_PSOC3)
 815   1                  uint16 tmp;
 816   1          #endif /* CY_PSOC3 */
 817   1      
 818   1          /* Read active coherency configuration */
 819   1          coherency = ADC_DelSig_1_DEC_COHER_REG & ADC_DelSig_1_DEC_SAMP_KEY_MASK;
 820   1      
 821   1          if(coherency <= ADC_DelSig_1_DEC_SAMP_KEY_LOW)
 822   1          {   /*  Use default method to read result registers i.e. LSB byte read at the end*/
 823   2              #if (CY_PSOC3)
 824   2                  result = ADC_DelSig_1_DEC_SAMPH_REG;
 825   2                  if((result & 0x80u) != 0u)
 826   2                  {   /* Sign extend */
 827   3                      result |= 0xFF00u;
 828   3                  }
 829   2                  result = (result << 8u) | ADC_DelSig_1_DEC_SAMPM_REG;
 830   2                  result = (result << 8u) | ADC_DelSig_1_DEC_SAMP_REG;
 831   2              #else
                          result = CY_GET_REG16(ADC_DelSig_1_DEC_SAMPH_16B_PTR);
                          result = (result << 16u) | (CY_GET_REG16(ADC_DelSig_1_DEC_SAMP_16B_PTR));
                      #endif /* CY_PSOC3 */
 835   2          }
 836   1          else if(coherency == ADC_DelSig_1_DEC_SAMP_KEY_MID)
 837   1          {   /* Read middle byte at the end */
 838   2              #if (CY_PSOC3)
 839   2                  result = ADC_DelSig_1_DEC_SAMPH_REG;
 840   2                  if((result & 0x80u) != 0u)
 841   2                  {   /* Sign extend */
 842   3                      result |= 0xFF00u;
 843   3                  }
 844   2                  result = (result << 16u) | (CY_GET_REG16(ADC_DelSig_1_DEC_SAMP_16B_PTR));
 845   2              #else
                          result = CY_GET_REG16(ADC_DelSig_1_DEC_SAMPH_16B_PTR);
                          result = (result << 16u) | ADC_DelSig_1_DEC_SAMP_REG;
                          result |=  (uint32)((uint32)ADC_DelSig_1_DEC_SAMPM_REG << 8u);
                      #endif /* CY_PSOC3 */
 850   2          }
 851   1          else /*ADC_DelSig_1_DEC_SAMP_KEY_HIGH */
 852   1          {
 853   2              /* Read MSB byte at the end */
 854   2              #if (CY_PSOC3)
 855   2                  result = CY_GET_REG16(ADC_DelSig_1_DEC_SAMP_16B_PTR);
 856   2                              tmp = ADC_DelSig_1_DEC_SAMPH_REG;
 857   2                  if((tmp & 0x80u) != 0u)
 858   2                  {   /* Sign extend */
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 15  

 859   3                      tmp |= 0xFF00u;
 860   3                  }
 861   2                  result |= (uint32)tmp << 16u;
 862   2              #else
                          result = CY_GET_REG16(ADC_DelSig_1_DEC_SAMP_16B_PTR);
                          result |= (uint32)((uint32)CY_GET_REG16(ADC_DelSig_1_DEC_SAMPH_16B_PTR) << 16u);
                      #endif /* CY_PSOC3 */
 866   2          }
 867   1          /* Clear conversion complete status in Single Sample mode with resolution above 16 bit */
 868   1          if(ADC_DelSig_1_stopConversion != 0u)
 869   1          {
 870   2              ADC_DelSig_1_convDone = 0u;
 871   2          }
 872   1      
 873   1          return ((int32)result);
 874   1      }
 875          
 876          
 877          /*******************************************************************************
 878          * Function Name: ADC_DelSig_1_SetOffset
 879          ********************************************************************************
 880          *
 881          * Summary:
 882          *  Sets the ADC offset which is used by the functions ADC_CountsTo_uVolts, 
 883          *  ADC_CountsTo_mVolts, and ADC_CountsTo_Volts to subtract the offset from the 
 884          *  given reading before calculating the voltage conversion.
 885          *
 886          * Parameters:
 887          *  int32:  This value is a measured value when the inputs are shorted or 
 888          *          connected to the same input voltage.
 889          *
 890          * Return:
 891          *  None
 892          *
 893          * Global variables:
 894          *  ADC_DelSig_1_Offset:  Modified to set the user provided offset. This
 895          *  variable is used for offset calibration purpose.
 896          *
 897          * Side Effects:
 898          *  Affects the ADC_DelSig_1_CountsTo_Volts,
 899          *  ADC_DelSig_1_CountsTo_mVolts, ADC_DelSig_1_CountsTo_uVolts functions
 900          *  by subtracting the given offset.
 901          *
 902          *******************************************************************************/
 903          void ADC_DelSig_1_SetOffset(int32 offset) 
 904          {
 905   1      
 906   1          ADC_DelSig_1_Offset = offset;
 907   1      }
 908          
 909          
 910          /*******************************************************************************
 911          * Function Name: ADC_DelSig_1_SetGain
 912          ********************************************************************************
 913          *
 914          * Summary:
 915          *  Sets the ADC gain in counts per volt for the voltage conversion
 916          *  functions below. This value is set by default by the reference and
 917          *  input range settings. It should only be used to further calibrate the
 918          *  ADC with a known input or if an external reference is used. This
 919          *  function may also be used to calibrate an entire signal chain, not
 920          *  just the ADC.
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 16  

 921          *
 922          * Parameters:
 923          *  int32: ADC gain in counts per volt.
 924          *
 925          * Return:
 926          *  None
 927          *
 928          * Global variables:
 929          *  ADC_DelSig_1_CountsPerVolt:  modified to set the ADC gain in counts
 930          *   per volt.
 931          *
 932          * Side Effects:
 933          *  Affects the ADC_DelSig_1_CountsTo_Volts,
 934          *  ADC_DelSig_1_CountsTo_mVolts, ADC_DelSig_1_CountsTo_uVolts functions
 935          *  supplying the correct conversion between ADC counts and voltage.
 936          *
 937          *******************************************************************************/
 938          void ADC_DelSig_1_SetGain(int32 adcGain) 
 939          {
 940   1          ADC_DelSig_1_CountsPerVolt = adcGain;
 941   1      }
 942          
 943          
 944          /*******************************************************************************
 945          * Function Name: ADC_DelSig_1_CountsTo_mVolts
 946          ********************************************************************************
 947          *
 948          * Summary:
 949          *  Converts the ADC counts output to mVolts as a 16-bit integer. For
 950          *  example, if the ADC measured 0.534 volts, the return value would
 951          *  be 534 mVolts.
 952          *
 953          * Parameters:
 954          *  int32: adcCounts Result from the ADC conversion.
 955          *
 956          * Return:
 957          *  int16:  Result in mVolts
 958          *
 959          * Global variables:
 960          *  ADC_DelSig_1_CountsPerVolt:  used to convert ADC counts to mVolts.
 961          *  ADC_DelSig_1_Offset:  Used as the offset while converting ADC counts
 962          *   to mVolts.
 963          *
 964          *******************************************************************************/
 965          int16 ADC_DelSig_1_CountsTo_mVolts(int32 adcCounts) 
 966          {
 967   1      
 968   1          int16 mVolts;
 969   1      
 970   1          /* Convert adcCounts to the right align if left option selected */
 971   1          #if(ADC_DelSig_1_CFG1_DEC_DIV != 0)
                      if(ADC_DelSig_1_Config == ADC_DelSig_1_CFG1)
                      {
                          adcCounts /= ADC_DelSig_1_CFG1_DEC_DIV;
                      }
                  #endif /* ADC_DelSig_1_CFG1_DEC_DIV */
 977   1          #if((ADC_DelSig_1_CFG2_DEC_DIV != 0) && (ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1))
                      if(ADC_DelSig_1_Config == ADC_DelSig_1_CFG2)
                      {
                          adcCounts /= ADC_DelSig_1_CFG2_DEC_DIV;
                      }
                  #endif /* ADC_DelSig_1_CFG2_DEC_DIV */
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 17  

 983   1          #if((ADC_DelSig_1_CFG3_DEC_DIV != 0) && (ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2))
                      if(ADC_DelSig_1_Config == ADC_DelSig_1_CFG3)
                      {
                          adcCounts /= ADC_DelSig_1_CFG3_DEC_DIV;
                      }
                  #endif /* ADC_DelSig_1_CFG2_DEC_DIV */
 989   1          #if((ADC_DelSig_1_CFG4_DEC_DIV != 0) && (ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3))
                      if(ADC_DelSig_1_Config == ADC_DelSig_1_CFG4)
                      {
                          adcCounts /= ADC_DelSig_1_CFG4_DEC_DIV;
                      }
                  #endif /* ADC_DelSig_1_CFG2_DEC_DIV */
 995   1      
 996   1          /* Subtract ADC offset */
 997   1          adcCounts -= ADC_DelSig_1_Offset;
 998   1      
 999   1          mVolts = (int16)(( adcCounts * ADC_DelSig_1_1MV_COUNTS ) / ADC_DelSig_1_CountsPerVolt) ;
1000   1      
1001   1          return(mVolts);
1002   1      }
1003          
1004          
1005          /*******************************************************************************
1006          * Function Name: ADC_DelSig_1_CountsTo_Volts
1007          ********************************************************************************
1008          *
1009          * Summary:
1010          *  Converts the ADC output to Volts as a floating point number. For
1011          *  example, if the ADC measure a voltage of 1.2345 Volts, the
1012          *  returned result would be +1.2345 Volts.
1013          *
1014          * Parameters:
1015          *  int32 adcCounts:  Result from the ADC conversion.
1016          *
1017          * Return:
1018          *  float32: Result in Volts
1019          *
1020          * Global variables:
1021          *  ADC_DelSig_1_CountsPerVolt:  used to convert to Volts.
1022          *  ADC_DelSig_1_Offset:  Used as the offset while converting ADC counts
1023          *   to Volts.
1024          *
1025          *******************************************************************************/
1026          float32 ADC_DelSig_1_CountsTo_Volts(int32 adcCounts) 
1027          {
1028   1      
1029   1          float32 Volts;
1030   1      
1031   1          /* Convert adcCounts to the right align if left option selected */
1032   1          #if(ADC_DelSig_1_CFG1_DEC_DIV != 0)
                      if(ADC_DelSig_1_Config == ADC_DelSig_1_CFG1)
                      {
                          adcCounts /= ADC_DelSig_1_CFG1_DEC_DIV;
                      }
                  #endif /* ADC_DelSig_1_CFG1_DEC_DIV */
1038   1          #if((ADC_DelSig_1_CFG2_DEC_DIV != 0) && (ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1))
                      if(ADC_DelSig_1_Config == ADC_DelSig_1_CFG2)
                      {
                          adcCounts /= ADC_DelSig_1_CFG2_DEC_DIV;
                      }
                  #endif /* ADC_DelSig_1_CFG2_DEC_DIV */
1044   1          #if((ADC_DelSig_1_CFG3_DEC_DIV != 0) && (ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2))
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 18  

                      if(ADC_DelSig_1_Config == ADC_DelSig_1_CFG3)
                      {
                          adcCounts /= ADC_DelSig_1_CFG3_DEC_DIV;
                      }
                  #endif /* ADC_DelSig_1_CFG2_DEC_DIV */
1050   1          #if((ADC_DelSig_1_CFG4_DEC_DIV != 0) && (ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3))
                      if(ADC_DelSig_1_Config == ADC_DelSig_1_CFG4)
                      {
                          adcCounts /= ADC_DelSig_1_CFG4_DEC_DIV;
                      }
                  #endif /* ADC_DelSig_1_CFG2_DEC_DIV */
1056   1      
1057   1          /* Subtract ADC offset */
1058   1          adcCounts -= ADC_DelSig_1_Offset;
1059   1      
1060   1          Volts = (float32)adcCounts / (float32)ADC_DelSig_1_CountsPerVolt;
1061   1      
1062   1          return( Volts );
1063   1      }
1064          
1065          
1066          /*******************************************************************************
1067          * Function Name: ADC_DelSig_1_CountsTo_uVolts
1068          ********************************************************************************
1069          *
1070          * Summary:
1071          *  Converts the ADC output to uVolts as a 32-bit integer. For example,
1072          *  if the ADC measured -0.02345 Volts, the return value would be -23450 uVolts.
1073          *
1074          * Parameters:
1075          *  int32 adcCounts: Result from the ADC conversion.
1076          *
1077          * Return:
1078          *  int32:  Result in uVolts
1079          *
1080          * Global variables:
1081          *  ADC_DelSig_1_CountsPerVolt:  used to convert ADC counts to mVolts.
1082          *  ADC_DelSig_1_Offset:  Used as the offset while converting ADC counts
1083          *   to mVolts.
1084          *
1085          * Theory:
1086          *  Care must be taken to not exceed the maximum value for a 31 bit signed
1087          *  number in the conversion to uVolts and at the same time not lose resolution.
1088          *
1089          *  uVolts = ((A * adcCounts) / ((int32)ADC_DelSig_1_CountsPerVolt / B));
1090          *
1091          *******************************************************************************/
1092          int32 ADC_DelSig_1_CountsTo_uVolts(int32 adcCounts) 
1093          {
1094   1      
1095   1          int32 uVolts;
1096   1          int32 coefA;
1097   1          int32 coefB;
1098   1          uint8 resolution;
1099   1      
1100   1          /* Set the resolution based on the configuration */
1101   1          /* Convert adcCounts to the right align if left option selected */
1102   1          if (ADC_DelSig_1_Config == ADC_DelSig_1_CFG1)
1103   1          {
1104   2              resolution = ADC_DelSig_1_CFG1_RESOLUTION;
1105   2              #if(ADC_DelSig_1_CFG1_DEC_DIV != 0)
                          adcCounts /= ADC_DelSig_1_CFG1_DEC_DIV;
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 19  

                      #endif /* ADC_DelSig_1_CFG1_DEC_DIV */
1108   2          }
1109   1          else if (ADC_DelSig_1_Config == ADC_DelSig_1_CFG2)
1110   1          {
1111   2              resolution = ADC_DelSig_1_CFG2_RESOLUTION;
1112   2              #if(ADC_DelSig_1_CFG2_DEC_DIV != 0)
                          adcCounts /= ADC_DelSig_1_CFG2_DEC_DIV;
                      #endif /* ADC_DelSig_1_CFG2_DEC_DIV */
1115   2          }
1116   1          else if (ADC_DelSig_1_Config == ADC_DelSig_1_CFG3)
1117   1          {
1118   2              resolution = ADC_DelSig_1_CFG3_RESOLUTION;
1119   2              #if(ADC_DelSig_1_CFG3_DEC_DIV != 0)
                          adcCounts /= ADC_DelSig_1_CFG3_DEC_DIV;
                      #endif /* ADC_DelSig_1_CFG3_DEC_DIV */
1122   2          }
1123   1          else
1124   1          {
1125   2              resolution = ADC_DelSig_1_CFG4_RESOLUTION;
1126   2              #if(ADC_DelSig_1_CFG4_DEC_DIV != 0)
                          adcCounts /= ADC_DelSig_1_CFG4_DEC_DIV;
                      #endif /* ADC_DelSig_1_CFG4_DEC_DIV */
1129   2          }
1130   1      
1131   1          switch (resolution)
1132   1          {
1133   2              #if( (ADC_DelSig_1_CFG1_RESOLUTION == ADC_DelSig_1__BITS_12) || \
1134   2                   (ADC_DelSig_1_CFG2_RESOLUTION == ADC_DelSig_1__BITS_12) || \
1135   2                   (ADC_DelSig_1_CFG3_RESOLUTION == ADC_DelSig_1__BITS_12) || \
1136   2                   (ADC_DelSig_1_CFG4_RESOLUTION == ADC_DelSig_1__BITS_12) )
                          case (uint8)ADC_DelSig_1__BITS_12:
                              coefA = ADC_DelSig_1_1UV_COUNTS / ADC_DelSig_1_DIVISOR_2;
                              coefB = ADC_DelSig_1_DIVISOR_2;
                              break;
                      #endif /* ADC_DelSig_1__BITS_12 */    
1142   2              #if( (ADC_DelSig_1_CFG1_RESOLUTION == ADC_DelSig_1__BITS_13) || \
1143   2                   (ADC_DelSig_1_CFG2_RESOLUTION == ADC_DelSig_1__BITS_13) || \
1144   2                   (ADC_DelSig_1_CFG3_RESOLUTION == ADC_DelSig_1__BITS_13) || \
1145   2                   (ADC_DelSig_1_CFG4_RESOLUTION == ADC_DelSig_1__BITS_13) )
                          case (uint8)ADC_DelSig_1__BITS_13:
                              coefA = ADC_DelSig_1_1UV_COUNTS / ADC_DelSig_1_DIVISOR_4;
                              coefB = ADC_DelSig_1_DIVISOR_4;
                              break;
                      #endif /* ADC_DelSig_1__BITS_13 */    
1151   2              #if( (ADC_DelSig_1_CFG1_RESOLUTION == ADC_DelSig_1__BITS_14) || \
1152   2                   (ADC_DelSig_1_CFG2_RESOLUTION == ADC_DelSig_1__BITS_14) || \
1153   2                   (ADC_DelSig_1_CFG3_RESOLUTION == ADC_DelSig_1__BITS_14) || \
1154   2                   (ADC_DelSig_1_CFG4_RESOLUTION == ADC_DelSig_1__BITS_14) )
                          case (uint8)ADC_DelSig_1__BITS_14:
                              coefA = ADC_DelSig_1_1UV_COUNTS / ADC_DelSig_1_DIVISOR_8;
                              coefB = ADC_DelSig_1_DIVISOR_8;
                              break;
                      #endif /* ADC_DelSig_1__BITS_14 */    
1160   2              #if( (ADC_DelSig_1_CFG1_RESOLUTION == ADC_DelSig_1__BITS_15) || \
1161   2                   (ADC_DelSig_1_CFG2_RESOLUTION == ADC_DelSig_1__BITS_15) || \
1162   2                   (ADC_DelSig_1_CFG3_RESOLUTION == ADC_DelSig_1__BITS_15) || \
1163   2                   (ADC_DelSig_1_CFG4_RESOLUTION == ADC_DelSig_1__BITS_15) )
                          case (uint8)ADC_DelSig_1__BITS_15:
                              coefA = ADC_DelSig_1_1UV_COUNTS / ADC_DelSig_1_DIVISOR_16;
                              coefB = ADC_DelSig_1_DIVISOR_16;
                              break;
                      #endif /* ADC_DelSig_1__BITS_15 */    
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 20  

1169   2              #if( (ADC_DelSig_1_CFG1_RESOLUTION == ADC_DelSig_1__BITS_16) || \
1170   2                   (ADC_DelSig_1_CFG2_RESOLUTION == ADC_DelSig_1__BITS_16) || \
1171   2                   (ADC_DelSig_1_CFG3_RESOLUTION == ADC_DelSig_1__BITS_16) || \
1172   2                   (ADC_DelSig_1_CFG4_RESOLUTION == ADC_DelSig_1__BITS_16) )
1173   2                  case (uint8)ADC_DelSig_1__BITS_16:
1174   2                      coefA = ADC_DelSig_1_1UV_COUNTS / ADC_DelSig_1_DIVISOR_32;
1175   2                      coefB = ADC_DelSig_1_DIVISOR_32;
1176   2                      break;
1177   2              #endif /* ADC_DelSig_1__BITS_16 */    
1178   2              #if( (ADC_DelSig_1_CFG1_RESOLUTION == ADC_DelSig_1__BITS_17) || \
1179   2                   (ADC_DelSig_1_CFG2_RESOLUTION == ADC_DelSig_1__BITS_17) || \
1180   2                   (ADC_DelSig_1_CFG3_RESOLUTION == ADC_DelSig_1__BITS_17) || \
1181   2                   (ADC_DelSig_1_CFG4_RESOLUTION == ADC_DelSig_1__BITS_17) )
                          case (uint8)ADC_DelSig_1__BITS_17:
                              coefA = ADC_DelSig_1_1UV_COUNTS / ADC_DelSig_1_DIVISOR_64;
                              coefB = ADC_DelSig_1_DIVISOR_64;
                              break;
                      #endif /* ADC_DelSig_1__BITS_17 */    
1187   2              #if( (ADC_DelSig_1_CFG1_RESOLUTION == ADC_DelSig_1__BITS_18) || \
1188   2                   (ADC_DelSig_1_CFG2_RESOLUTION == ADC_DelSig_1__BITS_18) || \
1189   2                   (ADC_DelSig_1_CFG3_RESOLUTION == ADC_DelSig_1__BITS_18) || \
1190   2                   (ADC_DelSig_1_CFG4_RESOLUTION == ADC_DelSig_1__BITS_18) )
                          case (uint8)ADC_DelSig_1__BITS_18:
                              coefA = ADC_DelSig_1_1UV_COUNTS / ADC_DelSig_1_DIVISOR_125;
                              coefB = ADC_DelSig_1_DIVISOR_125;
                              break;
                      #endif /* ADC_DelSig_1__BITS_18 */    
1196   2              #if( (ADC_DelSig_1_CFG1_RESOLUTION == ADC_DelSig_1__BITS_19) || \
1197   2                   (ADC_DelSig_1_CFG2_RESOLUTION == ADC_DelSig_1__BITS_19) || \
1198   2                   (ADC_DelSig_1_CFG3_RESOLUTION == ADC_DelSig_1__BITS_19) || \
1199   2                   (ADC_DelSig_1_CFG4_RESOLUTION == ADC_DelSig_1__BITS_19) )
                          case (uint8)ADC_DelSig_1__BITS_19:
                              coefA = ADC_DelSig_1_1UV_COUNTS / ADC_DelSig_1_DIVISOR_250;
                              coefB = ADC_DelSig_1_DIVISOR_250;
                              break;
                      #endif /* ADC_DelSig_1__BITS_19 */    
1205   2              #if( (ADC_DelSig_1_CFG1_RESOLUTION == ADC_DelSig_1__BITS_20) || \
1206   2                   (ADC_DelSig_1_CFG2_RESOLUTION == ADC_DelSig_1__BITS_20) || \
1207   2                   (ADC_DelSig_1_CFG3_RESOLUTION == ADC_DelSig_1__BITS_20) || \
1208   2                   (ADC_DelSig_1_CFG4_RESOLUTION == ADC_DelSig_1__BITS_20) )
                          case (uint8)ADC_DelSig_1__BITS_20:
                              coefA = ADC_DelSig_1_1UV_COUNTS / ADC_DelSig_1_DIVISOR_500;
                              coefB = ADC_DelSig_1_DIVISOR_500;
                              break;
                      #endif /* ADC_DelSig_1__BITS_20 */    
1214   2              default:    /* resolution < 12 */
1215   2                  /* 11 bits ADC + 2^20(1048576) = 31 bits */
1216   2                  coefA = ADC_DelSig_1_1UV_COUNTS;
1217   2                  coefB = ADC_DelSig_1_DIVISOR_1;
1218   2                  break;
1219   2          }
1220   1          coefB = ADC_DelSig_1_CountsPerVolt / coefB;
1221   1          uVolts = ((coefA * adcCounts) / coefB) - ((coefA * ADC_DelSig_1_Offset) / coefB);
1222   1      
1223   1          return( uVolts );
1224   1      }
1225          
1226          
1227          /*******************************************************************************
1228          * Function Name: ADC_DelSig_1_InitConfig(uint8 config)
1229          ********************************************************************************
1230          *
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 21  

1231          * Summary:
1232          *  Initializes all registers based on customizer settings
1233          *
1234          * Parameters:
1235          *   void
1236          *
1237          * Return:
1238          *  None
1239          *
1240          * Global variables:
1241          *  ADC_DelSig_1_CountsPerVolt:  Used to set the default counts per volt.
1242          *
1243          * Side Effects: Rewrites the coherency set by ADC_DelSig_1_SetCoherency()
1244          *   API to the default value.
1245          *
1246          *******************************************************************************/
1247          static void ADC_DelSig_1_InitConfig(uint8 config) 
1248          {
1249   1          ADC_DelSig_1_stopConversion = 0u;
1250   1      
1251   1          if (config == 1u)
1252   1          {
1253   2              /* Default Config */
1254   2              ADC_DelSig_1_DEC_CR_REG      = ADC_DelSig_1_CFG1_DEC_CR;
1255   2              ADC_DelSig_1_DEC_SHIFT1_REG  = ADC_DelSig_1_CFG1_DEC_SHIFT1;
1256   2              ADC_DelSig_1_DEC_SHIFT2_REG  = ADC_DelSig_1_CFG1_DEC_SHIFT2;
1257   2              ADC_DelSig_1_DEC_DR2_REG     = ADC_DelSig_1_CFG1_DEC_DR2;
1258   2              ADC_DelSig_1_DEC_DR2H_REG    = ADC_DelSig_1_CFG1_DEC_DR2H;
1259   2              ADC_DelSig_1_DEC_DR1_REG     = ADC_DelSig_1_CFG1_DEC_DR1;
1260   2              ADC_DelSig_1_DEC_OCOR_REG    = ADC_DelSig_1_CFG1_DEC_OCOR;
1261   2              ADC_DelSig_1_DEC_OCORM_REG   = ADC_DelSig_1_CFG1_DEC_OCORM;
1262   2              ADC_DelSig_1_DEC_OCORH_REG   = ADC_DelSig_1_CFG1_DEC_OCORH;
1263   2              ADC_DelSig_1_DEC_COHER_REG   = ADC_DelSig_1_CFG1_DEC_COHER;
1264   2      
1265   2              ADC_DelSig_1_DSM_CR4_REG     = ADC_DelSig_1_CFG1_DSM_CR4;
1266   2              ADC_DelSig_1_DSM_CR5_REG     = ADC_DelSig_1_CFG1_DSM_CR5;
1267   2              ADC_DelSig_1_DSM_CR6_REG     = ADC_DelSig_1_CFG1_DSM_CR6;
1268   2              ADC_DelSig_1_DSM_CR7_REG     = ADC_DelSig_1_CFG1_DSM_CR7;
1269   2              ADC_DelSig_1_DSM_CR10_REG    = ADC_DelSig_1_CFG1_DSM_CR10;
1270   2              ADC_DelSig_1_DSM_CR11_REG    = ADC_DelSig_1_CFG1_DSM_CR11;
1271   2              ADC_DelSig_1_DSM_CR12_REG    = ADC_DelSig_1_CFG1_DSM_CR12;
1272   2              ADC_DelSig_1_DSM_CR14_REG    = ADC_DelSig_1_CFG1_DSM_CR14;
1273   2              ADC_DelSig_1_DSM_CR15_REG    = ADC_DelSig_1_CFG1_DSM_CR15;
1274   2              ADC_DelSig_1_DSM_CR16_REG    = ADC_DelSig_1_CFG1_DSM_CR16;
1275   2              ADC_DelSig_1_DSM_CR17_REG    = ADC_DelSig_1_CFG1_DSM_CR17;
1276   2              /* Set DSM_REF0_REG by disabling and enabling the PRESS circuit */
1277   2              ADC_DelSig_1_SetDSMRef0Reg(ADC_DelSig_1_CFG1_DSM_REF0);
1278   2              ADC_DelSig_1_DSM_REF2_REG    = ADC_DelSig_1_CFG1_DSM_REF2;
1279   2              ADC_DelSig_1_DSM_REF3_REG    = ADC_DelSig_1_CFG1_DSM_REF3;
1280   2      
1281   2              ADC_DelSig_1_DSM_BUF0_REG    = ADC_DelSig_1_CFG1_DSM_BUF0;
1282   2              ADC_DelSig_1_DSM_BUF1_REG    = ADC_DelSig_1_CFG1_DSM_BUF1;
1283   2              ADC_DelSig_1_DSM_BUF2_REG    = ADC_DelSig_1_CFG1_DSM_BUF2;
1284   2              ADC_DelSig_1_DSM_BUF3_REG    = ADC_DelSig_1_CFG1_DSM_BUF3;
1285   2      
1286   2              /* To select either Vssa or Vref to -ve input of DSM depending on
1287   2              *  the input  range selected.
1288   2              */
1289   2              #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
                          #if (ADC_DelSig_1_CFG1_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)
                              ADC_DelSig_1_AMux_Select(1u);
                          #else
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 22  

                              ADC_DelSig_1_AMux_Select(0u);
                          #endif /* ADC_DelSig_1_IR_VSSA_TO_2VREF) */
                      #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
1296   2      
1297   2              /* Set the Conversion stop if resolution is above 16 bit and conversion
1298   2              *   mode is Single sample
1299   2              */
1300   2              #if(ADC_DelSig_1_CFG1_RESOLUTION > 16 && \
1301   2                  ADC_DelSig_1_CFG1_CONV_MODE == ADC_DelSig_1_MODE_SINGLE_SAMPLE)
                          ADC_DelSig_1_stopConversion = 1u;
                      #endif /* Single sample with resolution above 16 bits. */
1304   2      
1305   2              ADC_DelSig_1_CountsPerVolt = (int32)ADC_DelSig_1_CFG1_COUNTS_PER_VOLT;
1306   2      
1307   2              ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister(ADC_DelSig_1_CFG1_CP_CLK_DIVIDER, 1u);
1308   2      
1309   2              /* This is only valid if there is an internal clock */
1310   2              #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
1311   2                  ADC_DelSig_1_theACLK_SetDividerRegister(ADC_DelSig_1_CFG1_ADC_CLK_DIVIDER, 1u);
1312   2              #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
1313   2      
1314   2              #if(ADC_DelSig_1_IRQ_REMOVE == 0u)
1315   2                  /* Set interrupt vector */
1316   2                  (void)CyIntSetVector(ADC_DelSig_1_INTC_NUMBER, &ADC_DelSig_1_ISR1);
1317   2              #endif   /* End ADC_DelSig_1_IRQ_REMOVE */
1318   2          }
1319   1      
1320   1          #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1)
1321   1              if(config == 2u)
1322   1              {
1323   2                  /* Second Config */
1324   2                  ADC_DelSig_1_DEC_CR_REG      = ADC_DelSig_1_CFG2_DEC_CR;
1325   2                  ADC_DelSig_1_DEC_SHIFT1_REG  = ADC_DelSig_1_CFG2_DEC_SHIFT1;
1326   2                  ADC_DelSig_1_DEC_SHIFT2_REG  = ADC_DelSig_1_CFG2_DEC_SHIFT2;
1327   2                  ADC_DelSig_1_DEC_DR2_REG     = ADC_DelSig_1_CFG2_DEC_DR2;
1328   2                  ADC_DelSig_1_DEC_DR2H_REG    = ADC_DelSig_1_CFG2_DEC_DR2H;
1329   2                  ADC_DelSig_1_DEC_DR1_REG     = ADC_DelSig_1_CFG2_DEC_DR1;
1330   2                  ADC_DelSig_1_DEC_OCOR_REG    = ADC_DelSig_1_CFG2_DEC_OCOR;
1331   2                  ADC_DelSig_1_DEC_OCORM_REG   = ADC_DelSig_1_CFG2_DEC_OCORM;
1332   2                  ADC_DelSig_1_DEC_OCORH_REG   = ADC_DelSig_1_CFG2_DEC_OCORH;
1333   2                  ADC_DelSig_1_DEC_COHER_REG   = ADC_DelSig_1_CFG2_DEC_COHER;
1334   2      
1335   2                  ADC_DelSig_1_DSM_CR4_REG     = ADC_DelSig_1_CFG2_DSM_CR4;
1336   2                  ADC_DelSig_1_DSM_CR5_REG     = ADC_DelSig_1_CFG2_DSM_CR5;
1337   2                  ADC_DelSig_1_DSM_CR6_REG     = ADC_DelSig_1_CFG2_DSM_CR6;
1338   2                  ADC_DelSig_1_DSM_CR7_REG     = ADC_DelSig_1_CFG2_DSM_CR7;
1339   2                  ADC_DelSig_1_DSM_CR10_REG    = ADC_DelSig_1_CFG2_DSM_CR10;
1340   2                  ADC_DelSig_1_DSM_CR11_REG    = ADC_DelSig_1_CFG2_DSM_CR11;
1341   2                  ADC_DelSig_1_DSM_CR12_REG    = ADC_DelSig_1_CFG2_DSM_CR12;
1342   2                  ADC_DelSig_1_DSM_CR14_REG    = ADC_DelSig_1_CFG2_DSM_CR14;
1343   2                  ADC_DelSig_1_DSM_CR15_REG    = ADC_DelSig_1_CFG2_DSM_CR15;
1344   2                  ADC_DelSig_1_DSM_CR16_REG    = ADC_DelSig_1_CFG2_DSM_CR16;
1345   2                  ADC_DelSig_1_DSM_CR17_REG    = ADC_DelSig_1_CFG2_DSM_CR17;
1346   2                  /* Set DSM_REF0_REG by disabling and enabling the PRESS cirucit */
1347   2                  ADC_DelSig_1_SetDSMRef0Reg(ADC_DelSig_1_CFG2_DSM_REF0);
1348   2                  ADC_DelSig_1_DSM_REF2_REG    = ADC_DelSig_1_CFG2_DSM_REF2;
1349   2                  ADC_DelSig_1_DSM_REF3_REG    = ADC_DelSig_1_CFG2_DSM_REF3;
1350   2      
1351   2                  ADC_DelSig_1_DSM_BUF0_REG    = ADC_DelSig_1_CFG2_DSM_BUF0;
1352   2                  ADC_DelSig_1_DSM_BUF1_REG    = ADC_DelSig_1_CFG2_DSM_BUF1;
1353   2                  ADC_DelSig_1_DSM_BUF2_REG    = ADC_DelSig_1_CFG2_DSM_BUF2;
1354   2                  ADC_DelSig_1_DSM_BUF3_REG    = ADC_DelSig_1_CFG2_DSM_BUF3;
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 23  

1355   2      
1356   2                  /* To select either Vssa or Vref to -ve input of DSM depending on
1357   2                  *  the input range selected.
1358   2                  */
1359   2      
1360   2                  #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
                              #if (ADC_DelSig_1_CFG2_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)
                                  ADC_DelSig_1_AMux_Select(1u);
                              #else
                                  ADC_DelSig_1_AMux_Select(0u);
                              #endif /* ADC_DelSig_1_IR_VSSA_TO_2VREF) */
                          #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
1367   2      
1368   2                  /* Set the Conversion stop if resolution is above 16 bit and
1369   2                  *   conversion mode is Single sample
1370   2                  */
1371   2                  #if(ADC_DelSig_1_CFG2_RESOLUTION > 16 && \
1372   2                      ADC_DelSig_1_CFG2_CONV_MODE == ADC_DelSig_1_MODE_SINGLE_SAMPLE)
                              ADC_DelSig_1_stopConversion = 1u;
                          #endif /* Single sample with resolution above 16 bits. */
1375   2      
1376   2                  ADC_DelSig_1_CountsPerVolt = (int32)ADC_DelSig_1_CFG2_COUNTS_PER_VOLT;
1377   2      
1378   2                  ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister(ADC_DelSig_1_CFG2_CP_CLK_DIVIDER, 1u);
1379   2      
1380   2                  /* This is only valid if there is an internal clock */
1381   2                  #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
1382   2                      ADC_DelSig_1_theACLK_SetDividerRegister(ADC_DelSig_1_CFG2_ADC_CLK_DIVIDER, 1u);
1383   2                  #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
1384   2      
1385   2                  #if(ADC_DelSig_1_IRQ_REMOVE == 0u)
1386   2                      /* Set interrupt vector */
1387   2                      (void)CyIntSetVector(ADC_DelSig_1_INTC_NUMBER, &ADC_DelSig_1_ISR2);
1388   2                  #endif   /* End ADC_DelSig_1_IRQ_REMOVE */
1389   2              }
1390   1          #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1 */
1391   1      
1392   1          #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2)
1393   1              if(config == 3u)
1394   1              {
1395   2                  /* Third Config */
1396   2                  ADC_DelSig_1_DEC_CR_REG      = ADC_DelSig_1_CFG3_DEC_CR;
1397   2                  ADC_DelSig_1_DEC_SHIFT1_REG  = ADC_DelSig_1_CFG3_DEC_SHIFT1;
1398   2                  ADC_DelSig_1_DEC_SHIFT2_REG  = ADC_DelSig_1_CFG3_DEC_SHIFT2;
1399   2                  ADC_DelSig_1_DEC_DR2_REG     = ADC_DelSig_1_CFG3_DEC_DR2;
1400   2                  ADC_DelSig_1_DEC_DR2H_REG    = ADC_DelSig_1_CFG3_DEC_DR2H;
1401   2                  ADC_DelSig_1_DEC_DR1_REG     = ADC_DelSig_1_CFG3_DEC_DR1;
1402   2                  ADC_DelSig_1_DEC_OCOR_REG    = ADC_DelSig_1_CFG3_DEC_OCOR;
1403   2                  ADC_DelSig_1_DEC_OCORM_REG   = ADC_DelSig_1_CFG3_DEC_OCORM;
1404   2                  ADC_DelSig_1_DEC_OCORH_REG   = ADC_DelSig_1_CFG3_DEC_OCORH;
1405   2                  ADC_DelSig_1_DEC_COHER_REG   = ADC_DelSig_1_CFG3_DEC_COHER;
1406   2      
1407   2                  ADC_DelSig_1_DSM_CR4_REG     = ADC_DelSig_1_CFG3_DSM_CR4;
1408   2                  ADC_DelSig_1_DSM_CR5_REG     = ADC_DelSig_1_CFG3_DSM_CR5;
1409   2                  ADC_DelSig_1_DSM_CR6_REG     = ADC_DelSig_1_CFG3_DSM_CR6;
1410   2                  ADC_DelSig_1_DSM_CR7_REG     = ADC_DelSig_1_CFG3_DSM_CR7;
1411   2                  ADC_DelSig_1_DSM_CR10_REG    = ADC_DelSig_1_CFG3_DSM_CR10;
1412   2                  ADC_DelSig_1_DSM_CR11_REG    = ADC_DelSig_1_CFG3_DSM_CR11;
1413   2                  ADC_DelSig_1_DSM_CR12_REG    = ADC_DelSig_1_CFG3_DSM_CR12;
1414   2                  ADC_DelSig_1_DSM_CR14_REG    = ADC_DelSig_1_CFG3_DSM_CR14;
1415   2                  ADC_DelSig_1_DSM_CR15_REG    = ADC_DelSig_1_CFG3_DSM_CR15;
1416   2                  ADC_DelSig_1_DSM_CR16_REG    = ADC_DelSig_1_CFG3_DSM_CR16;
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 24  

1417   2                  ADC_DelSig_1_DSM_CR17_REG    = ADC_DelSig_1_CFG3_DSM_CR17;
1418   2                  /* Set DSM_REF0_REG by disabling and enabling the PRESS circuit */
1419   2                  ADC_DelSig_1_SetDSMRef0Reg(ADC_DelSig_1_CFG3_DSM_REF0);
1420   2                  ADC_DelSig_1_DSM_REF2_REG    = ADC_DelSig_1_CFG3_DSM_REF2;
1421   2                  ADC_DelSig_1_DSM_REF3_REG    = ADC_DelSig_1_CFG3_DSM_REF3;
1422   2      
1423   2                  ADC_DelSig_1_DSM_BUF0_REG    = ADC_DelSig_1_CFG3_DSM_BUF0;
1424   2                  ADC_DelSig_1_DSM_BUF1_REG    = ADC_DelSig_1_CFG3_DSM_BUF1;
1425   2                  ADC_DelSig_1_DSM_BUF2_REG    = ADC_DelSig_1_CFG3_DSM_BUF2;
1426   2                  ADC_DelSig_1_DSM_BUF3_REG    = ADC_DelSig_1_CFG3_DSM_BUF3;
1427   2      
1428   2                  /* To select either Vssa or Vref to -ve input of DSM depending on
1429   2                  *  the input range selected.
1430   2                  */
1431   2                  #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
                              #if (ADC_DelSig_1_CFG3_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)
                                  ADC_DelSig_1_AMux_Select(1u);
                              #else
                                  ADC_DelSig_1_AMux_Select(0u);
                              #endif /* ADC_DelSig_1_IR_VSSA_TO_2VREF) */
                          #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
1438   2      
1439   2                  /* Set the Conversion stop if resolution is above 16 bit and
1440   2                     conversion  mode is Single sample */
1441   2                  #if(ADC_DelSig_1_CFG3_RESOLUTION > 16 && \
1442   2                      ADC_DelSig_1_CFG3_CONV_MODE == ADC_DelSig_1_MODE_SINGLE_SAMPLE)
                              ADC_DelSig_1_stopConversion = 1u;
                          #endif /* Single sample with resolution above 16 bits */
1445   2      
1446   2                  ADC_DelSig_1_CountsPerVolt = (int32)ADC_DelSig_1_CFG3_COUNTS_PER_VOLT;
1447   2      
1448   2                  ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister(ADC_DelSig_1_CFG3_CP_CLK_DIVIDER, 1u);
1449   2      
1450   2                  /* This is only valid if there is an internal clock */
1451   2                  #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
1452   2                      ADC_DelSig_1_theACLK_SetDividerRegister(ADC_DelSig_1_CFG3_ADC_CLK_DIVIDER, 1u);
1453   2                  #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
1454   2      
1455   2                  #if(ADC_DelSig_1_IRQ_REMOVE == 0u)
1456   2                      /* Set interrupt vector */
1457   2                      (void)CyIntSetVector(ADC_DelSig_1_INTC_NUMBER, &ADC_DelSig_1_ISR3);
1458   2                  #endif   /* End ADC_DelSig_1_IRQ_REMOVE */
1459   2              }
1460   1          #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2 */
1461   1      
1462   1          #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3)
1463   1              if (config == 4u)
1464   1              {
1465   2                  /* Fourth Config */
1466   2                  ADC_DelSig_1_DEC_CR_REG      = ADC_DelSig_1_CFG4_DEC_CR;
1467   2                  ADC_DelSig_1_DEC_SHIFT1_REG  = ADC_DelSig_1_CFG4_DEC_SHIFT1;
1468   2                  ADC_DelSig_1_DEC_SHIFT2_REG  = ADC_DelSig_1_CFG4_DEC_SHIFT2;
1469   2                  ADC_DelSig_1_DEC_DR2_REG     = ADC_DelSig_1_CFG4_DEC_DR2;
1470   2                  ADC_DelSig_1_DEC_DR2H_REG    = ADC_DelSig_1_CFG4_DEC_DR2H;
1471   2                  ADC_DelSig_1_DEC_DR1_REG     = ADC_DelSig_1_CFG4_DEC_DR1;
1472   2                  ADC_DelSig_1_DEC_OCOR_REG    = ADC_DelSig_1_CFG4_DEC_OCOR;
1473   2                  ADC_DelSig_1_DEC_OCORM_REG   = ADC_DelSig_1_CFG4_DEC_OCORM;
1474   2                  ADC_DelSig_1_DEC_OCORH_REG   = ADC_DelSig_1_CFG4_DEC_OCORH;
1475   2                  ADC_DelSig_1_DEC_COHER_REG   = ADC_DelSig_1_CFG4_DEC_COHER;
1476   2      
1477   2                  ADC_DelSig_1_DSM_CR4_REG     = ADC_DelSig_1_CFG4_DSM_CR4;
1478   2                  ADC_DelSig_1_DSM_CR5_REG     = ADC_DelSig_1_CFG4_DSM_CR5;
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 25  

1479   2                  ADC_DelSig_1_DSM_CR6_REG     = ADC_DelSig_1_CFG4_DSM_CR6;
1480   2                  ADC_DelSig_1_DSM_CR7_REG     = ADC_DelSig_1_CFG4_DSM_CR7;
1481   2                  ADC_DelSig_1_DSM_CR10_REG    = ADC_DelSig_1_CFG4_DSM_CR10;
1482   2                  ADC_DelSig_1_DSM_CR11_REG    = ADC_DelSig_1_CFG4_DSM_CR11;
1483   2                  ADC_DelSig_1_DSM_CR12_REG    = ADC_DelSig_1_CFG4_DSM_CR12;
1484   2                  ADC_DelSig_1_DSM_CR14_REG    = ADC_DelSig_1_CFG4_DSM_CR14;
1485   2                  ADC_DelSig_1_DSM_CR15_REG    = ADC_DelSig_1_CFG4_DSM_CR15;
1486   2                  ADC_DelSig_1_DSM_CR16_REG    = ADC_DelSig_1_CFG4_DSM_CR16;
1487   2                  ADC_DelSig_1_DSM_CR17_REG    = ADC_DelSig_1_CFG4_DSM_CR17;
1488   2                  /* Set DSM_REF0_REG by disabling and enabling the PRESS circuit */
1489   2                  ADC_DelSig_1_SetDSMRef0Reg(ADC_DelSig_1_CFG4_DSM_REF0);
1490   2                  ADC_DelSig_1_DSM_REF2_REG    = ADC_DelSig_1_CFG4_DSM_REF2;
1491   2                  ADC_DelSig_1_DSM_REF3_REG    = ADC_DelSig_1_CFG4_DSM_REF3;
1492   2      
1493   2                  ADC_DelSig_1_DSM_BUF0_REG    = ADC_DelSig_1_CFG4_DSM_BUF0;
1494   2                  ADC_DelSig_1_DSM_BUF1_REG    = ADC_DelSig_1_CFG4_DSM_BUF1;
1495   2                  ADC_DelSig_1_DSM_BUF2_REG    = ADC_DelSig_1_CFG4_DSM_BUF2;
1496   2                  ADC_DelSig_1_DSM_BUF3_REG    = ADC_DelSig_1_CFG4_DSM_BUF3;
1497   2      
1498   2                  /* To select either Vssa or Vref to -ve input of DSM depending on
1499   2                  *  the input range selected.
1500   2                  */
1501   2                  #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
                              #if (ADC_DelSig_1_CFG4_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)
                                  ADC_DelSig_1_AMux_Select(1u);
                              #else
                                  ADC_DelSig_1_AMux_Select(0u);
                              #endif /* ADC_DelSig_1_IR_VSSA_TO_2VREF) */
                          #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
1508   2      
1509   2                  /* Set the Conversion stop if resolution is above 16 bit and
1510   2                     conversion mode is Single sample */
1511   2                  #if(ADC_DelSig_1_CFG4_RESOLUTION > 16 && \
1512   2                      ADC_DelSig_1_CFG4_CONV_MODE == ADC_DelSig_1_MODE_SINGLE_SAMPLE)
                              ADC_DelSig_1_stopConversion = 1u;
                          #endif /* Single sample with resolution above 16 bits */
1515   2      
1516   2                  ADC_DelSig_1_CountsPerVolt = (int32)ADC_DelSig_1_CFG4_COUNTS_PER_VOLT;
1517   2      
1518   2                  ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister(ADC_DelSig_1_CFG4_CP_CLK_DIVIDER, 1u);
1519   2      
1520   2                  /* This is only valid if there is an internal clock */
1521   2                  #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
1522   2                      ADC_DelSig_1_theACLK_SetDividerRegister(ADC_DelSig_1_CFG4_ADC_CLK_DIVIDER, 1u);
1523   2                  #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
1524   2      
1525   2                  #if(ADC_DelSig_1_IRQ_REMOVE == 0u)
1526   2                      /* Set interrupt vector */
1527   2                      (void)CyIntSetVector(ADC_DelSig_1_INTC_NUMBER, &ADC_DelSig_1_ISR4);
1528   2                  #endif   /* End ADC_DelSig_1_IRQ_REMOVE */
1529   2              }
1530   1          #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3 */
1531   1      }
1532          
1533          
1534          /*******************************************************************************
1535          * Function Name: ADC_DelSig_1_SelectCofiguration
1536          ********************************************************************************
1537          *
1538          * Summary:
1539          *  Sets one of up to four ADC configurations. Before setting the new
1540          *  configuration, the ADC is stopped and powered down. After setting
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 26  

1541          *  the new configuration, the ADC can be powered and conversion
1542          *  can be restarted depending up on the value of second parameter
1543          *  restart. If the value of this parameter is 1, then ADC will be
1544          *  restarted. If this value is zero, then user must call ADC_DelSig_1_Start
1545          *  and ADC_DelSig_1_StartConvert() to restart the conversion.
1546          *
1547          * Parameters:
1548          *  config:  configuration user wants to select.
1549          *           Valid range: 1..4
1550          *  restart:  Restart option. 1 means start the ADC and restart the conversion.
1551          *                            0 means do not start the ADC and conversion.
1552          *
1553          * Return:
1554          *  None
1555          *
1556          * Side Effects: 
1557          *  Enables internal interrupt.
1558          *
1559          *******************************************************************************/
1560          void ADC_DelSig_1_SelectConfiguration(uint8 config, uint8 restart)
1561                                                        
1562          {
1563   1          /* Check whether the configuration number is valid or not */
1564   1          if((config > 0u) && (config <= ADC_DelSig_1_DEFAULT_NUM_CONFIGS))
1565   1          {
1566   2              /* Set the flag to ensure Start() API doesn't override the 
1567   2                      *  selected configuration
1568   2                      */
1569   2              if(ADC_DelSig_1_initVar == 0u)
1570   2              {
1571   3                  ADC_DelSig_1_started = 1u;
1572   3              }
1573   2      
1574   2              /* Update the config flag */
1575   2              ADC_DelSig_1_Config = config;
1576   2      
1577   2              /* Stop the ADC  */
1578   2              ADC_DelSig_1_Stop();
1579   2      
1580   2              /* Set the  ADC registers based on the configuration */
1581   2              ADC_DelSig_1_InitConfig(config);
1582   2      
1583   2              /* Compensate the gain */
1584   2              ADC_DelSig_1_DEC_GVAL_REG = ADC_DelSig_1_gcor[config - 1u].gval;
1585   2              CY_SET_REG16(ADC_DelSig_1_DEC_GCOR_16B_PTR, ADC_DelSig_1_gcor[config - 1u].gcor);
1586   2      
1587   2              if(restart == 1u)
1588   2              {
1589   3                  /* Restart the ADC */
1590   3                  ADC_DelSig_1_Start();
1591   3      
1592   3                  /* Restart the ADC conversion */
1593   3                  ADC_DelSig_1_StartConvert();
1594   3              }
1595   2          }
1596   1          else
1597   1          {
1598   2              /* Halt CPU in debug mode if config is out of valid range */
1599   2              CYASSERT(0u != 0u);
1600   2          }
1601   1      }
1602          
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 27  

1603          
1604          /*******************************************************************************
1605          * Function Name: ADC_DelSig_1_GainCompensation
1606          ********************************************************************************
1607          *
1608          * Summary:
1609          *  This API calculates the trim value and then store this to gcor structure.
1610          *
1611          * Parameters:
1612          *  inputRange:  input range for which trim value is to be calculated.
1613          *  IdealDecGain:  Ideal Decimator gain for the selected resolution and
1614          *                 conversion  mode.
1615          *  IdealOddDecGain:  Ideal odd decimation gain for the selected resolution and
1616                               conversion mode.
1617          *  resolution:  Resolution to select the proper flash location for trim value.
1618          *  config:      Specifies the configuration number
1619          *               Valid range: 1..4
1620          *
1621          * Return:
1622          *  None
1623          *
1624          *******************************************************************************/
1625          static void ADC_DelSig_1_GainCompensation(uint8 inputRange, uint16 idealDecGain, uint16 idealOddDecGain,
1626                                        uint8 resolution, uint8 config) 
1627          {
1628   1          int8 flash;
1629   1              int32 normalised;
1630   1              uint16 gcorValue;
1631   1          uint32 gcorTmp;
1632   1      
1633   1          if((config > 0u) && (config <= ADC_DelSig_1_DEFAULT_NUM_CONFIGS))
1634   1          {
1635   2              switch(inputRange)
1636   2              {
1637   3                  case ADC_DelSig_1_IR_VNEG_VREF_DIFF:
1638   3                  case ADC_DelSig_1_IR_VSSA_TO_2VREF:
1639   3                      /* Normalize the flash Value */
1640   3                      if(resolution > 15u)
1641   3                      {
1642   4                          flash = ADC_DelSig_1_DEC_TRIM_VREF_DIFF_16_20;
1643   4                      }
1644   3                      else
1645   3                      {
1646   4                          flash = ADC_DelSig_1_DEC_TRIM_VREF_DIFF_8_15;
1647   4                      }
1648   3                      break;
1649   3      
1650   3                  case ADC_DelSig_1_IR_VNEG_VREF_2_DIFF:
1651   3                      /* Normalize the flash Value */
1652   3                      if(resolution > 15u)
1653   3                      {
1654   4                          flash = ADC_DelSig_1_DEC_TRIM_VREF_2_DIFF_16_20;
1655   4                      }
1656   3                      else
1657   3                      {
1658   4                          flash = ADC_DelSig_1_DEC_TRIM_VREF_2_DIFF_8_15;
1659   4                      }
1660   3                      break;
1661   3      
1662   3                  case ADC_DelSig_1_IR_VNEG_VREF_4_DIFF:
1663   3                      /* Normalize the flash Value */
1664   3                      if(resolution > 15u)
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 28  

1665   3                      {
1666   4                          flash = ADC_DelSig_1_DEC_TRIM_VREF_4_DIFF_16_20;
1667   4                      }
1668   3                      else
1669   3                      {
1670   4                          flash = ADC_DelSig_1_DEC_TRIM_VREF_4_DIFF_8_15;
1671   4                      }
1672   3                      break;
1673   3      
1674   3                  case ADC_DelSig_1_IR_VNEG_VREF_16_DIFF:
1675   3                      /* Normalize the flash Value */
1676   3                      if(resolution > 15u)
1677   3                      {
1678   4                          flash = ADC_DelSig_1_DEC_TRIM_VREF_16_DIFF_16_20;
1679   4                      }
1680   3                      else
1681   3                      {
1682   4                          flash = ADC_DelSig_1_DEC_TRIM_VREF_16_DIFF_8_15;
1683   4                      }
1684   3                      break;
1685   3      
1686   3                  default:
1687   3                      flash = 0;
1688   3                      break;
1689   3              }
1690   2      
1691   2              /* Add two values */
1692   2                      normalised = (int32)idealDecGain + ((int32)flash * 32);
1693   2              gcorTmp = (uint32)normalised * (uint32)idealOddDecGain;
1694   2              gcorValue = (uint16)(gcorTmp / ADC_DelSig_1_IDEAL_GAIN_CONST);
1695   2      
1696   2              if (resolution < (ADC_DelSig_1_MAX_GVAL - 1u))
1697   2              {
1698   3                  gcorValue = (gcorValue >> (ADC_DelSig_1_MAX_GVAL - (resolution + 1u)));
1699   3                  ADC_DelSig_1_gcor[config - 1u].gval = (resolution + 1u);
1700   3              }
1701   2              else
1702   2              {
1703   3                  /* Use all 16 bits */
1704   3                  ADC_DelSig_1_gcor[config - 1u].gval = ADC_DelSig_1_MAX_GVAL;
1705   3              }
1706   2      
1707   2              /* Save the gain correction register value */
1708   2              ADC_DelSig_1_gcor[config - 1u].gcor = gcorValue;
1709   2          }
1710   1          else
1711   1          {
1712   2              /* Halt CPU in debug mode if config is out of valid range */
1713   2              CYASSERT(0u != 0u);
1714   2          }
1715   1      }
1716          
1717          
1718          /******************************************************************************
1719          * Function Name: ADC_DelSig_1_SetDSMRef0Reg(uint8)
1720          ******************************************************************************
1721          *
1722          * Summary:
1723          *  This API sets the DSM_REF0 register. This is written for internal use.
1724          *
1725          * Parameters:
1726          *  value:  Value to be written to DSM_REF0 register.
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 29  

1727          *
1728          * Return:
1729          *  None
1730          *
1731          ******************************************************************************/
1732          static void ADC_DelSig_1_SetDSMRef0Reg(uint8 value) 
1733          {
1734   1          uint8 enableInterrupts;
1735   1          enableInterrupts = CyEnterCriticalSection();
1736   1      
1737   1          /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and REFBUF1, enable PRES */
1738   1          ADC_DelSig_1_RESET_CR4_REG |= (ADC_DelSig_1_IGNORE_PRESA1 | ADC_DelSig_1_IGNORE_PRESD1);
1739   1          ADC_DelSig_1_RESET_CR5_REG |= (ADC_DelSig_1_IGNORE_PRESA2 | ADC_DelSig_1_IGNORE_PRESD2);
1740   1          ADC_DelSig_1_DSM_REF0_REG = value;
1741   1      
1742   1          /* Wait for 3 microseconds */
1743   1          CyDelayUs(ADC_DelSig_1_PRES_DELAY_TIME);
1744   1          /* Enable the press circuit */
1745   1          ADC_DelSig_1_RESET_CR4_REG &= (uint8)~(ADC_DelSig_1_IGNORE_PRESA1 | ADC_DelSig_1_IGNORE_PRESD1);
1746   1          ADC_DelSig_1_RESET_CR5_REG &= (uint8)~(ADC_DelSig_1_IGNORE_PRESA2 | ADC_DelSig_1_IGNORE_PRESD2);
1747   1      
1748   1          CyExitCriticalSection(enableInterrupts);
1749   1      }
1750          
1751          
1752          /*******************************************************************************
1753          * Function Name: ADC_DelSig_1_Read8
1754          ********************************************************************************
1755          *
1756          * Summary:
1757          *  This function simplifies getting results from the ADC when only a
1758          *  single reading is required. When called, it will start ADC
1759          *  conversions, wait for the conversion to be complete, stop ADC
1760          *  conversion and return the result. This is a blocking function and will
1761          *  not return until the result is ready.
1762          *
1763          * Parameters:
1764          *  None
1765          *
1766          * Return:
1767          *  int8:  ADC result.
1768          *
1769          *******************************************************************************/
1770          int8 ADC_DelSig_1_Read8(void) 
1771          {
1772   1          int8 result;
1773   1      
1774   1          /* Clear pending conversion done status */
1775   1          ADC_DelSig_1_DEC_SR_REG |= ADC_DelSig_1_DEC_INTR_CLEAR;
1776   1          ADC_DelSig_1_StartConvert();
1777   1          (void)ADC_DelSig_1_IsEndConversion(ADC_DelSig_1_WAIT_FOR_RESULT);
1778   1           result = ADC_DelSig_1_GetResult8();
1779   1          ADC_DelSig_1_StopConvert();
1780   1          
1781   1           return(result);
1782   1      }
1783          
1784          
1785          /*******************************************************************************
1786          * Function Name: ADC_DelSig_1_Read16
1787          ********************************************************************************
1788          *
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 30  

1789          * Summary:
1790          *  This function simplifies getting results from the ADC when only a
1791          *  single reading is required. When called, it will start ADC
1792          *  conversions, wait for the conversion to be complete, stop ADC
1793          *  conversion and return the result. This is a blocking function and will
1794          *  not return until the result is ready.
1795          *
1796          * Parameters:
1797          *   void
1798          *
1799          * Return:
1800          *  int16:  ADC result.
1801          *
1802          *******************************************************************************/
1803          int16 ADC_DelSig_1_Read16(void) 
1804          {
1805   1          int16 result;
1806   1      
1807   1          /* Clear pending conversion done status */
1808   1          ADC_DelSig_1_DEC_SR_REG |= ADC_DelSig_1_DEC_INTR_CLEAR;
1809   1          ADC_DelSig_1_StartConvert();
1810   1          (void)ADC_DelSig_1_IsEndConversion(ADC_DelSig_1_WAIT_FOR_RESULT);
1811   1           result = ADC_DelSig_1_GetResult16();
1812   1          ADC_DelSig_1_StopConvert();
1813   1          
1814   1           return(result);
1815   1      }
1816          
1817          
1818          /*******************************************************************************
1819          * Function Name: ADC_DelSig_1_Read32
1820          ********************************************************************************
1821          *
1822          * Summary:
1823          *  This function simplifies getting results from the ADC when only a
1824          *  single reading is required. When called, it will start ADC
1825          *  conversions, wait for the conversion to be complete, stop ADC
1826          *  conversion and return the result. This is a blocking function and will
1827          *  not return until the result is ready.
1828          *
1829          * Parameters:
1830          *  None
1831          *
1832          * Return:
1833          *  int32: ADC result.
1834          *
1835          *******************************************************************************/
1836          int32 ADC_DelSig_1_Read32(void) 
1837          {
1838   1          int32 result;
1839   1          
1840   1          /* Clear pending conversion done status */
1841   1          ADC_DelSig_1_DEC_SR_REG |= ADC_DelSig_1_DEC_INTR_CLEAR;
1842   1          ADC_DelSig_1_StartConvert();
1843   1          (void)ADC_DelSig_1_IsEndConversion(ADC_DelSig_1_WAIT_FOR_RESULT);
1844   1           result = ADC_DelSig_1_GetResult32();
1845   1          ADC_DelSig_1_StopConvert();
1846   1          
1847   1           return(result);
1848   1      }
1849          
1850          
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 31  

1851          /* [] END OF FILE */
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 32  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ADC_DelSig_1_Init (BEGIN)
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 94
0000 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
0006 900000      R     MOV     DPTR,#ADC_DelSig_1_convDone
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
000B 7F10              MOV     R7,#010H
000D 120000      E     LCALL   _ADC_DelSig_1_Ext_CP_Clk_SetModeRegister
                                           ; SOURCE LINE # 101
0010 7F10              MOV     R7,#010H
0012 120000      E     LCALL   _ADC_DelSig_1_theACLK_SetModeRegister
                                           ; SOURCE LINE # 106
0015 7D07              MOV     R5,#07H
0017 7F1D              MOV     R7,#01DH
0019 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 110
001C 905896            MOV     DPTR,#05896H
001F 7404              MOV     A,#04H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0022 905897            MOV     DPTR,#05897H
0025 E4                CLR     A
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0027 90589E            MOV     DPTR,#0589EH
002A E4                CLR     A
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
002C 905B07            MOV     DPTR,#05B07H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 4418              ORL     A,#018H
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0037 905893            MOV     DPTR,#05893H
003A E4                CLR     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
003C 905B88            MOV     DPTR,#05B88H
003F E4                CLR     A
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
0041 905B89            MOV     DPTR,#05B89H
0044 E4                CLR     A
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
0046 905880            MOV     DPTR,#05880H
0049 740A              MOV     A,#0AH
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 33  

004C 905881            MOV     DPTR,#05881H
004F E4                CLR     A
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
0051 905883            MOV     DPTR,#05883H
0054 E4                CLR     A
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0056 905888            MOV     DPTR,#05888H
0059 745B              MOV     A,#05BH
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
005C 905889            MOV     DPTR,#05889H
005F 745E              MOV     A,#05EH
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0062 90588D            MOV     DPTR,#0588DH
0065 E4                CLR     A
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
0067 904E01            MOV     DPTR,#04E01H
006A 7414              MOV     A,#014H
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
006D 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+05H
0070 7410              MOV     A,#010H
0072 F0                MOVX    @DPTR,A
0073 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+06H
0076 7401              MOV     A,#01H
0078 F0                MOVX    @DPTR,A
0079 7B00              MOV     R3,#00H
007B 7A80              MOV     R2,#080H
007D 7DDA              MOV     R5,#0DAH
007F 7C90              MOV     R4,#090H
0081 7F04              MOV     R7,#04H
0083 120000      R     LCALL   _ADC_DelSig_1_GainCompensation
                                           ; SOURCE LINE # 139
0086 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+05H
0089 7410              MOV     A,#010H
008B F0                MOVX    @DPTR,A
008C 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+06H
008F 7402              MOV     A,#02H
0091 F0                MOVX    @DPTR,A
0092 7B00              MOV     R3,#00H
0094 7A80              MOV     R2,#080H
0096 7DDA              MOV     R5,#0DAH
0098 7C90              MOV     R4,#090H
009A 7F04              MOV     R7,#04H
009C 120000      R     LCALL   _ADC_DelSig_1_GainCompensation
                                           ; SOURCE LINE # 146
009F 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+05H
00A2 7410              MOV     A,#010H
00A4 F0                MOVX    @DPTR,A
00A5 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+06H
00A8 7403              MOV     A,#03H
00AA F0                MOVX    @DPTR,A
00AB 7B00              MOV     R3,#00H
00AD 7A80              MOV     R2,#080H
00AF 7DDA              MOV     R5,#0DAH
00B1 7C90              MOV     R4,#090H
00B3 7F04              MOV     R7,#04H
00B5 120000      R     LCALL   _ADC_DelSig_1_GainCompensation
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 34  

                                           ; SOURCE LINE # 153
00B8 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+05H
00BB 7410              MOV     A,#010H
00BD F0                MOVX    @DPTR,A
00BE 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+06H
00C1 7404              MOV     A,#04H
00C3 F0                MOVX    @DPTR,A
00C4 7B00              MOV     R3,#00H
00C6 7A80              MOV     R2,#080H
00C8 7DDA              MOV     R5,#0DAH
00CA 7C90              MOV     R4,#090H
00CC 7F04              MOV     R7,#04H
00CE 120000      R     LCALL   _ADC_DelSig_1_GainCompensation
                                           ; SOURCE LINE # 161
00D1 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
00D4 E0                MOVX    A,@DPTR
00D5 FF                MOV     R7,A
00D6 EF                MOV     A,R7
00D7 75F003            MOV     B,#03H
00DA A4                MUL     AB
00DB 2400        R     ADD     A,#LOW ADC_DelSig_1_gcor+0FFFFH
00DD F582              MOV     DPL,A
00DF E4                CLR     A
00E0 3400        R     ADDC    A,#HIGH ADC_DelSig_1_gcor+0FFFFH
00E2 F583              MOV     DPH,A
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 904E0E            MOV     DPTR,#04E0EH
00E9 EF                MOV     A,R7
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
00EB 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
00EE E0                MOVX    A,@DPTR
00EF FF                MOV     R7,A
00F0 EF                MOV     A,R7
00F1 75F003            MOV     B,#03H
00F4 A4                MUL     AB
00F5 2400        R     ADD     A,#LOW ADC_DelSig_1_gcor+0FFFDH
00F7 F582              MOV     DPL,A
00F9 E4                CLR     A
00FA 3400        R     ADDC    A,#HIGH ADC_DelSig_1_gcor+0FFFDH
00FC F583              MOV     DPH,A
00FE E0                MOVX    A,@DPTR
00FF FC                MOV     R4,A
0100 A3                INC     DPTR
0101 E0                MOVX    A,@DPTR
0102 FD                MOV     R5,A
0103 7B02              MOV     R3,#02H
0105 7A4E              MOV     R2,#04EH
0107 790C              MOV     R1,#0CH
0109 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 165
010C 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
010F E0                MOVX    A,@DPTR
0110 FF                MOV     R7,A
0111 120000      R     LCALL   _ADC_DelSig_1_InitConfig
                                           ; SOURCE LINE # 166
0114 22                RET     
             ; FUNCTION ADC_DelSig_1_Init (END)

             ; FUNCTION ADC_DelSig_1_Enable (BEGIN)
                                           ; SOURCE LINE # 186
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 35  

                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 190
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
0008 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 900000      R     MOV     DPTR,#config
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
0012 9043AA            MOV     DPTR,#043AAH
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 4401              ORL     A,#01H
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
001D 9043AA            MOV     DPTR,#043AAH
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4410              ORL     A,#010H
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0028 9043BA            MOV     DPTR,#043BAH
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 4401              ORL     A,#01H
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0033 9043BA            MOV     DPTR,#043BAH
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 4410              ORL     A,#010H
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
003E 9046F8            MOV     DPTR,#046F8H
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 4402              ORL     A,#02H
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0049 9046F9            MOV     DPTR,#046F9H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 36  

004E EF                MOV     A,R7
004F 4402              ORL     A,#02H
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0054 905891            MOV     DPTR,#05891H
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 4403              ORL     A,#03H
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 270
005F         ?C0002:
                                           ; SOURCE LINE # 273
005F 7F03              MOV     R7,#03H
0061 7E00              MOV     R6,#00H
0063 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 276
0066 9046F8            MOV     DPTR,#046F8H
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 54FD              ANL     A,#0FDH
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
0071 9046F9            MOV     DPTR,#046F9H
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 EF                MOV     A,R7
0077 54FD              ANL     A,#0FDH
0079 FF                MOV     R7,A
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
007C 905877            MOV     DPTR,#05877H
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 4406              ORL     A,#06H
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
0087 905882            MOV     DPTR,#05882H
008A 747A              MOV     A,#07AH
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
008D 9043A1            MOV     DPTR,#043A1H
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 EF                MOV     A,R7
0093 4401              ORL     A,#01H
0095 FF                MOV     R7,A
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 37  

                                           ; SOURCE LINE # 288
0098 9043B1            MOV     DPTR,#043B1H
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D EF                MOV     A,R7
009E 4401              ORL     A,#01H
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
00A3 9043A2            MOV     DPTR,#043A2H
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 EF                MOV     A,R7
00A9 4401              ORL     A,#01H
00AB FF                MOV     R7,A
00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
00AE 9043B2            MOV     DPTR,#043B2H
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 4401              ORL     A,#01H
00B6 FF                MOV     R7,A
00B7 EF                MOV     A,R7
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
00B9 9044DB            MOV     DPTR,#044DBH
00BC 7420              MOV     A,#020H
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
00BF 9044C3            MOV     DPTR,#044C3H
00C2 7420              MOV     A,#020H
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
00C5 900000      R     MOV     DPTR,#enableInterrupts
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 304
00CD 22                RET     
             ; FUNCTION ADC_DelSig_1_Enable (END)

             ; FUNCTION ADC_DelSig_1_Start (BEGIN)
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
0000 900000      R     MOV     DPTR,#ADC_DelSig_1_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7011              JNZ     ?C0004
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
0008 900000      R     MOV     DPTR,#ADC_DelSig_1_started
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 7003              JNZ     ?C0005
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 38  

0010 120000      R     LCALL   ADC_DelSig_1_Init
                                           ; SOURCE LINE # 341
0013         ?C0005:
                                           ; SOURCE LINE # 342
0013 900000      R     MOV     DPTR,#ADC_DelSig_1_initVar
0016 7401              MOV     A,#01H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
0019         ?C0004:
                                           ; SOURCE LINE # 346
0019 120000      R     LCALL   ADC_DelSig_1_Enable
                                           ; SOURCE LINE # 347
001C 22                RET     
             ; FUNCTION ADC_DelSig_1_Start (END)

             ; FUNCTION ADC_DelSig_1_Stop (BEGIN)
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 370
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
0008 904E00            MOV     DPTR,#04E00H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54FE              ANL     A,#0FEH
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
0013 904E01            MOV     DPTR,#04E01H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4404              ORL     A,#04H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
001E 9046F8            MOV     DPTR,#046F8H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 4402              ORL     A,#02H
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0029 9046F9            MOV     DPTR,#046F9H
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 4402              ORL     A,#02H
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
0034 905891            MOV     DPTR,#05891H
0037 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 39  

0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 54FC              ANL     A,#0FCH
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
003F 905892            MOV     DPTR,#05892H
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 54F7              ANL     A,#0F7H
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
004A 7F03              MOV     R7,#03H
004C 7E00              MOV     R6,#00H
004E 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 388
0051 9046F8            MOV     DPTR,#046F8H
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 54FD              ANL     A,#0FDH
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
005C 9046F9            MOV     DPTR,#046F9H
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 54FD              ANL     A,#0FDH
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
0067 9043AA            MOV     DPTR,#043AAH
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D 54EF              ANL     A,#0EFH
006F FF                MOV     R7,A
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0072 9043AA            MOV     DPTR,#043AAH
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 54FE              ANL     A,#0FEH
007A FF                MOV     R7,A
007B EF                MOV     A,R7
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
007D 9043BA            MOV     DPTR,#043BAH
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 EF                MOV     A,R7
0083 54FE              ANL     A,#0FEH
0085 FF                MOV     R7,A
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 40  

0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
0088 9043BA            MOV     DPTR,#043BAH
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D EF                MOV     A,R7
008E 54EF              ANL     A,#0EFH
0090 FF                MOV     R7,A
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
0093 905877            MOV     DPTR,#05877H
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 EF                MOV     A,R7
0099 54F9              ANL     A,#0F9H
009B FF                MOV     R7,A
009C EF                MOV     A,R7
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
009E 9043A1            MOV     DPTR,#043A1H
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 EF                MOV     A,R7
00A4 54FE              ANL     A,#0FEH
00A6 FF                MOV     R7,A
00A7 EF                MOV     A,R7
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
00A9 9043B1            MOV     DPTR,#043B1H
00AC E0                MOVX    A,@DPTR
00AD FF                MOV     R7,A
00AE EF                MOV     A,R7
00AF 54FE              ANL     A,#0FEH
00B1 FF                MOV     R7,A
00B2 EF                MOV     A,R7
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
00B4 905882            MOV     DPTR,#05882H
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 EF                MOV     A,R7
00BA 54F7              ANL     A,#0F7H
00BC FF                MOV     R7,A
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
00BF 9043A2            MOV     DPTR,#043A2H
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 EF                MOV     A,R7
00C5 54FE              ANL     A,#0FEH
00C7 FF                MOV     R7,A
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
00CA 9043B2            MOV     DPTR,#043B2H
00CD E0                MOVX    A,@DPTR
00CE FF                MOV     R7,A
00CF EF                MOV     A,R7
00D0 54FE              ANL     A,#0FEH
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 41  

00D2 FF                MOV     R7,A
00D3 EF                MOV     A,R7
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
00D5 900000      R     MOV     DPTR,#enableInterrupts
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
00DA 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 417
00DD 22                RET     
             ; FUNCTION ADC_DelSig_1_Stop (END)

             ; FUNCTION _ADC_DelSig_1_SetBufferGain (BEGIN)
                                           ; SOURCE LINE # 434
0000 900000      R     MOV     DPTR,#gain
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 437
0005 90589B            MOV     DPTR,#0589BH
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54F3              ANL     A,#0F3H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#tmpReg
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
0013 900000      R     MOV     DPTR,#tmpReg
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#gain
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 25E0              ADD     A,ACC
0020 25E0              ADD     A,ACC
0022 FE                MOV     R6,A
0023 EE                MOV     A,R6
0024 540C              ANL     A,#0CH
0026 FE                MOV     R6,A
0027 EF                MOV     A,R7
0028 4E                ORL     A,R6
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#tmpReg
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
002F 900000      R     MOV     DPTR,#tmpReg
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 90589B            MOV     DPTR,#0589BH
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
0039 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetBufferGain (END)

             ; FUNCTION _ADC_DelSig_1_SetCoherency (BEGIN)
                                           ; SOURCE LINE # 470
0000 900000      R     MOV     DPTR,#coherency
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 42  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 474
0005 904E14            MOV     DPTR,#04E14H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54FC              ANL     A,#0FCH
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#tmpReg
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
0013 900000      R     MOV     DPTR,#tmpReg
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#coherency
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 5403              ANL     A,#03H
0020 FE                MOV     R6,A
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 FF                MOV     R7,A
0024 900000      R     MOV     DPTR,#tmpReg
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
0029 900000      R     MOV     DPTR,#tmpReg
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 904E14            MOV     DPTR,#04E14H
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0033 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetCoherency (END)

             ; FUNCTION _ADC_DelSig_1_SetGCOR (BEGIN)
                                           ; SOURCE LINE # 510
0000 900000      R     MOV     DPTR,#gainAdjust
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 516
0006 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B EF                MOV     A,R7
000C 75F003            MOV     B,#03H
000F A4                MUL     AB
0010 2400        R     ADD     A,#LOW ADC_DelSig_1_gcor+0FFFDH
0012 F582              MOV     DPL,A
0014 E4                CLR     A
0015 3400        R     ADDC    A,#HIGH ADC_DelSig_1_gcor+0FFFDH
0017 F583              MOV     DPH,A
0019 E0                MOVX    A,@DPTR
001A FE                MOV     R6,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 43  

001E 900000      R     MOV     DPTR,#tmpReg
0021 EE                MOV     A,R6
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
0026 900000      R     MOV     DPTR,#tmpReg
0029 E0                MOVX    A,@DPTR
002A FC                MOV     R4,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FD                MOV     R5,A
002E E4                CLR     A
002F 120000      E     LCALL   ?C?FCASTI
0032 7B00              MOV     R3,#00H
0034 7A00              MOV     R2,#00H
0036 7900              MOV     R1,#00H
0038 7847              MOV     R0,#047H
003A 120000      E     LCALL   ?C?FPDIV
003D 900000      R     MOV     DPTR,#tmpValue
0040 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 518
0043 900000      R     MOV     DPTR,#tmpValue
0046 120000      E     LCALL   ?C?LLDXDATA
0049 900000      R     MOV     DPTR,#gainAdjust
004C 120000      E     LCALL   ?C?LLDXDATA0
004F 120000      E     LCALL   ?C?FPMUL
0052 900000      R     MOV     DPTR,#tmpValue
0055 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 520
0058 7FB9              MOV     R7,#0B9H
005A 7EFC              MOV     R6,#0FCH
005C 7DFF              MOV     R5,#0FFH
005E 7C3F              MOV     R4,#03FH
0060 900000      R     MOV     DPTR,#tmpValue
0063 120000      E     LCALL   ?C?LLDXDATA0
0066 120000      E     LCALL   ?C?FPCMP3
0069 600A              JZ      ?C0010
006B 4008              JC      ?C0010
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 522
006D 900000      R     MOV     DPTR,#status
0070 7401              MOV     A,#01H
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 523
0073 805E              SJMP    ?C0011
0075         ?C0010:
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 526
0075 900000      R     MOV     DPTR,#tmpValue
0078 120000      E     LCALL   ?C?LLDXDATA
007B 7B00              MOV     R3,#00H
007D 7A00              MOV     R2,#00H
007F 7900              MOV     R1,#00H
0081 7847              MOV     R0,#047H
0083 120000      E     LCALL   ?C?FPMUL
0086 900000      R     MOV     DPTR,#tmpValue
0089 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 527
008C 900000      R     MOV     DPTR,#tmpValue
008F 120000      E     LCALL   ?C?LLDXDATA
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 44  

0092 120000      E     LCALL   ?C?CASTF
0095 900000      R     MOV     DPTR,#tmpReg
0098 EE                MOV     A,R6
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
009D 7B02              MOV     R3,#02H
009F 7A4E              MOV     R2,#04EH
00A1 790C              MOV     R1,#0CH
00A3 900000      R     MOV     DPTR,#tmpReg
00A6 E0                MOVX    A,@DPTR
00A7 FC                MOV     R4,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FD                MOV     R5,A
00AB 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 530
00AE 900000      R     MOV     DPTR,#tmpReg
00B1 E0                MOVX    A,@DPTR
00B2 FE                MOV     R6,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
00B9 E0                MOVX    A,@DPTR
00BA FD                MOV     R5,A
00BB ED                MOV     A,R5
00BC 75F003            MOV     B,#03H
00BF A4                MUL     AB
00C0 2400        R     ADD     A,#LOW ADC_DelSig_1_gcor+0FFFDH
00C2 F582              MOV     DPL,A
00C4 E4                CLR     A
00C5 3400        R     ADDC    A,#HIGH ADC_DelSig_1_gcor+0FFFDH
00C7 F583              MOV     DPH,A
00C9 EE                MOV     A,R6
00CA F0                MOVX    @DPTR,A
00CB A3                INC     DPTR
00CC EF                MOV     A,R7
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
00CE 900000      R     MOV     DPTR,#status
00D1 E4                CLR     A
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 534
00D3         ?C0011:
                                           ; SOURCE LINE # 535
00D3 900000      R     MOV     DPTR,#status
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
                                           ; SOURCE LINE # 536
00D8         ?C0012:
00D8 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetGCOR (END)

             ; FUNCTION ADC_DelSig_1_ReadGCOR (BEGIN)
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 562
0000 904E0E            MOV     DPTR,#04E0EH
0003 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 45  

0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#gValue
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
000A 7B02              MOV     R3,#02H
000C 7A4E              MOV     R2,#04EH
000E 790C              MOV     R1,#0CH
0010 120000      E     LCALL   _cyread16_nodpx
0013 900000      R     MOV     DPTR,#gcorValue
0016 EE                MOV     A,R6
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
001B 900000      R     MOV     DPTR,#gValue
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 C3                CLR     C
0022 940F              SUBB    A,#0FH
0024 5028              JNC     ?C0013
                                           ; SOURCE LINE # 566
                                           ; SOURCE LINE # 567
0026 900000      R     MOV     DPTR,#gcorValue
0029 E0                MOVX    A,@DPTR
002A FE                MOV     R6,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 900000      R     MOV     DPTR,#gValue
0031 E0                MOVX    A,@DPTR
0032 FD                MOV     R5,A
0033 C3                CLR     C
0034 740F              MOV     A,#0FH
0036 9D                SUBB    A,R5
0037 FD                MOV     R5,A
0038 EF                MOV     A,R7
0039 A805              MOV     R0,AR5
003B 08                INC     R0
003C 8005              SJMP    ?C0095
003E         ?C0094:
003E C3                CLR     C
003F 33                RLC     A
0040 CE                XCH     A,R6
0041 33                RLC     A
0042 CE                XCH     A,R6
0043         ?C0095:
0043 D8F9              DJNZ    R0,?C0094
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#gcorValue
0049 EE                MOV     A,R6
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
004E         ?C0013:
                                           ; SOURCE LINE # 570
004E 900000      R     MOV     DPTR,#gcorValue
0051 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 46  

0052 FE                MOV     R6,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
                                           ; SOURCE LINE # 571
0056         ?C0014:
0056 22                RET     
             ; FUNCTION ADC_DelSig_1_ReadGCOR (END)

             ; FUNCTION ADC_DelSig_1_StartConvert (BEGIN)
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 594
0000 904E00            MOV     DPTR,#04E00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
000B 22                RET     
             ; FUNCTION ADC_DelSig_1_StartConvert (END)

             ; FUNCTION ADC_DelSig_1_StopConvert (BEGIN)
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 617
0000 904E00            MOV     DPTR,#04E00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
000B 22                RET     
             ; FUNCTION ADC_DelSig_1_StopConvert (END)

             ; FUNCTION _ADC_DelSig_1_IsEndConversion (BEGIN)
                                           ; SOURCE LINE # 649
0000 900000      R     MOV     DPTR,#retMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 650
0005         ?C0019:
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 658
0005 900000      R     MOV     DPTR,#ADC_DelSig_1_stopConversion
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 600C              JZ      ?C0020
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
000D 900000      R     MOV     DPTR,#ADC_DelSig_1_convDone
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 900000      R     MOV     DPTR,#status
0015 EF                MOV     A,R7
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 47  

0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
0017 800E              SJMP    ?C0017
0019         ?C0020:
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 664
0019 904E01            MOV     DPTR,#04E01H
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 5401              ANL     A,#01H
0021 FF                MOV     R7,A
0022 900000      R     MOV     DPTR,#status
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 666
0027         ?C0017:
0027 900000      R     MOV     DPTR,#status
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 6401              XRL     A,#01H
002F 6008              JZ      ?C0018
0031 900000      R     MOV     DPTR,#retMode
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 60CC              JZ      ?C0019
0039         ?C0018:
                                           ; SOURCE LINE # 668
0039 900000      R     MOV     DPTR,#status
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
                                           ; SOURCE LINE # 669
003E         ?C0023:
003E 22                RET     
             ; FUNCTION _ADC_DelSig_1_IsEndConversion (END)

             ; FUNCTION ADC_DelSig_1_GetResult8 (BEGIN)
                                           ; SOURCE LINE # 696
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 702
0000 904E14            MOV     DPTR,#04E14H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5403              ANL     A,#03H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#coherency
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
000E 904E10            MOV     DPTR,#04E10H
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#result
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 706
0018 900000      R     MOV     DPTR,#coherency
001B E0                MOVX    A,@DPTR
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 48  

001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E B40207            CJNE    A,#02H,?C0024
                                           ; SOURCE LINE # 707
                                           ; SOURCE LINE # 708
0021 904E11            MOV     DPTR,#04E11H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
                                           ; SOURCE LINE # 709
0026 800E              SJMP    ?C0025
0028         ?C0024:
                                           ; SOURCE LINE # 710
0028 900000      R     MOV     DPTR,#coherency
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E B40305            CJNE    A,#03H,?C0025
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 712
0031 904E12            MOV     DPTR,#04E12H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 716
0036         ?C0025:
                                           ; SOURCE LINE # 718
0036 900000      R     MOV     DPTR,#ADC_DelSig_1_stopConversion
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 6005              JZ      ?C0028
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
003E 900000      R     MOV     DPTR,#ADC_DelSig_1_convDone
0041 E4                CLR     A
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 721
0043         ?C0028:
                                           ; SOURCE LINE # 722
0043 900000      R     MOV     DPTR,#result
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
                                           ; SOURCE LINE # 723
0048         ?C0029:
0048 22                RET     
             ; FUNCTION ADC_DelSig_1_GetResult8 (END)

             ; FUNCTION ADC_DelSig_1_GetResult16 (BEGIN)
                                           ; SOURCE LINE # 750
                                           ; SOURCE LINE # 751
                                           ; SOURCE LINE # 756
0000 904E14            MOV     DPTR,#04E14H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5403              ANL     A,#03H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#coherency
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 49  

000E 900000      R     MOV     DPTR,#coherency
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 D3                SETB    C
0015 9401              SUBB    A,#01H
0017 5032              JNC     ?C0030
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 761
0019 904E11            MOV     DPTR,#04E11H
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 7E00              MOV     R6,#00H
0020 900000      R     MOV     DPTR,#result
0023 EE                MOV     A,R6
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 762
0028 900000      R     MOV     DPTR,#result
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 7F00              MOV     R7,#00H
0033 FE                MOV     R6,A
0034 904E10            MOV     DPTR,#04E10H
0037 E0                MOVX    A,@DPTR
0038 FD                MOV     R5,A
0039 7C00              MOV     R4,#00H
003B EE                MOV     A,R6
003C 4C                ORL     A,R4
003D FE                MOV     R6,A
003E EF                MOV     A,R7
003F 4D                ORL     A,R5
0040 FF                MOV     R7,A
0041 900000      R     MOV     DPTR,#result
0044 EE                MOV     A,R6
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 766
0049 801F              SJMP    ?C0031
004B         ?C0030:
                                           ; SOURCE LINE # 768
                                           ; SOURCE LINE # 770
004B 7B02              MOV     R3,#02H
004D 7A4E              MOV     R2,#04EH
004F 7910              MOV     R1,#010H
0051 120000      E     LCALL   _cyread16_nodpx
0054 900000      R     MOV     DPTR,#result
0057 EE                MOV     A,R6
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
005C 900000      R     MOV     DPTR,#coherency
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 50  

005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 B40305            CJNE    A,#03H,?C0031
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 777
0065 904E12            MOV     DPTR,#04E12H
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
006A         ?C0031:
                                           ; SOURCE LINE # 781
006A 900000      R     MOV     DPTR,#ADC_DelSig_1_stopConversion
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 6005              JZ      ?C0033
                                           ; SOURCE LINE # 782
                                           ; SOURCE LINE # 783
0072 900000      R     MOV     DPTR,#ADC_DelSig_1_convDone
0075 E4                CLR     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
0077         ?C0033:
                                           ; SOURCE LINE # 786
0077 900000      R     MOV     DPTR,#result
007A E0                MOVX    A,@DPTR
007B FE                MOV     R6,A
007C A3                INC     DPTR
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
                                           ; SOURCE LINE # 787
007F         ?C0034:
007F 22                RET     
             ; FUNCTION ADC_DelSig_1_GetResult16 (END)

             ; FUNCTION ADC_DelSig_1_GetResult32 (BEGIN)
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 819
0000 904E14            MOV     DPTR,#04E14H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5403              ANL     A,#03H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#coherency
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 821
000E 900000      R     MOV     DPTR,#coherency
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 D3                SETB    C
0015 9401              SUBB    A,#01H
0017 4003              JC      $ + 5H
0019 020000      R     LJMP    ?C0035
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 824
001C 904E12            MOV     DPTR,#04E12H
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 51  

001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 E4                CLR     A
0022 FC                MOV     R4,A
0023 FD                MOV     R5,A
0024 FE                MOV     R6,A
0025 900000      R     MOV     DPTR,#result
0028 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 825
002B 900000      R     MOV     DPTR,#result
002E 120000      E     LCALL   ?C?LLDXDATA
0031 EF                MOV     A,R7
0032 5480              ANL     A,#080H
0034 FF                MOV     R7,A
0035 EE                MOV     A,R6
0036 5400              ANL     A,#00H
0038 FE                MOV     R6,A
0039 ED                MOV     A,R5
003A 5400              ANL     A,#00H
003C FD                MOV     R5,A
003D EC                MOV     A,R4
003E 5400              ANL     A,#00H
0040 FC                MOV     R4,A
0041 EF                MOV     A,R7
0042 4E                ORL     A,R6
0043 601C              JZ      ?C0036
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
0045 900000      R     MOV     DPTR,#result
0048 120000      E     LCALL   ?C?LLDXDATA
004B EF                MOV     A,R7
004C 4400              ORL     A,#00H
004E FF                MOV     R7,A
004F EE                MOV     A,R6
0050 44FF              ORL     A,#0FFH
0052 FE                MOV     R6,A
0053 ED                MOV     A,R5
0054 4400              ORL     A,#00H
0056 FD                MOV     R5,A
0057 EC                MOV     A,R4
0058 4400              ORL     A,#00H
005A FC                MOV     R4,A
005B 900000      R     MOV     DPTR,#result
005E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 828
0061         ?C0036:
                                           ; SOURCE LINE # 829
0061 900000      R     MOV     DPTR,#result
0064 120000      E     LCALL   ?C?LLDXDATA
0067 7808              MOV     R0,#08H
0069 120000      E     LCALL   ?C?LSHL
006C A804              MOV     R0,AR4
006E A905              MOV     R1,AR5
0070 AA06              MOV     R2,AR6
0072 AB07              MOV     R3,AR7
0074 904E11            MOV     DPTR,#04E11H
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 E4                CLR     A
007A FC                MOV     R4,A
007B FD                MOV     R5,A
007C FE                MOV     R6,A
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 52  

007D 120000      E     LCALL   ?C?LOR
0080 900000      R     MOV     DPTR,#result
0083 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 830
0086 900000      R     MOV     DPTR,#result
0089 120000      E     LCALL   ?C?LLDXDATA
008C 7808              MOV     R0,#08H
008E 120000      E     LCALL   ?C?LSHL
0091 A804              MOV     R0,AR4
0093 A905              MOV     R1,AR5
0095 AA06              MOV     R2,AR6
0097 AB07              MOV     R3,AR7
0099 904E10            MOV     DPTR,#04E10H
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
009E E4                CLR     A
009F FC                MOV     R4,A
00A0 FD                MOV     R5,A
00A1 FE                MOV     R6,A
00A2 120000      E     LCALL   ?C?LOR
00A5 900000      R     MOV     DPTR,#result
00A8 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 835
00AB 020000      R     LJMP    ?C0037
00AE         ?C0035:
                                           ; SOURCE LINE # 836
00AE 900000      R     MOV     DPTR,#coherency
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 6402              XRL     A,#02H
00B6 6003              JZ      $ + 5H
00B8 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 839
00BB 904E12            MOV     DPTR,#04E12H
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 E4                CLR     A
00C1 FC                MOV     R4,A
00C2 FD                MOV     R5,A
00C3 FE                MOV     R6,A
00C4 900000      R     MOV     DPTR,#result
00C7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 840
00CA 900000      R     MOV     DPTR,#result
00CD 120000      E     LCALL   ?C?LLDXDATA
00D0 EF                MOV     A,R7
00D1 5480              ANL     A,#080H
00D3 FF                MOV     R7,A
00D4 EE                MOV     A,R6
00D5 5400              ANL     A,#00H
00D7 FE                MOV     R6,A
00D8 ED                MOV     A,R5
00D9 5400              ANL     A,#00H
00DB FD                MOV     R5,A
00DC EC                MOV     A,R4
00DD 5400              ANL     A,#00H
00DF FC                MOV     R4,A
00E0 EF                MOV     A,R7
00E1 4E                ORL     A,R6
00E2 601C              JZ      ?C0039
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 53  

                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 842
00E4 900000      R     MOV     DPTR,#result
00E7 120000      E     LCALL   ?C?LLDXDATA
00EA EF                MOV     A,R7
00EB 4400              ORL     A,#00H
00ED FF                MOV     R7,A
00EE EE                MOV     A,R6
00EF 44FF              ORL     A,#0FFH
00F1 FE                MOV     R6,A
00F2 ED                MOV     A,R5
00F3 4400              ORL     A,#00H
00F5 FD                MOV     R5,A
00F6 EC                MOV     A,R4
00F7 4400              ORL     A,#00H
00F9 FC                MOV     R4,A
00FA 900000      R     MOV     DPTR,#result
00FD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 843
0100         ?C0039:
                                           ; SOURCE LINE # 844
0100 7B02              MOV     R3,#02H
0102 7A4E              MOV     R2,#04EH
0104 7910              MOV     R1,#010H
0106 120000      E     LCALL   _cyread16_nodpx
0109 E4                CLR     A
010A FC                MOV     R4,A
010B FD                MOV     R5,A
010C C004              PUSH    AR4
010E C005              PUSH    AR5
0110 C006              PUSH    AR6
0112 C007              PUSH    AR7
0114 900000      R     MOV     DPTR,#result
0117 120000      E     LCALL   ?C?LLDXDATA
011A 7810              MOV     R0,#010H
011C 120000      E     LCALL   ?C?LSHL
011F A804              MOV     R0,AR4
0121 A905              MOV     R1,AR5
0123 AA06              MOV     R2,AR6
0125 AB07              MOV     R3,AR7
0127 D007              POP     AR7
0129 D006              POP     AR6
012B D005              POP     AR5
012D D004              POP     AR4
012F 120000      E     LCALL   ?C?LOR
0132 900000      R     MOV     DPTR,#result
0135 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 850
0138 8076              SJMP    ?C0037
013A         ?C0038:
                                           ; SOURCE LINE # 852
                                           ; SOURCE LINE # 855
013A 7B02              MOV     R3,#02H
013C 7A4E              MOV     R2,#04EH
013E 7910              MOV     R1,#010H
0140 120000      E     LCALL   _cyread16_nodpx
0143 E4                CLR     A
0144 FC                MOV     R4,A
0145 FD                MOV     R5,A
0146 900000      R     MOV     DPTR,#result
0149 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 856
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 54  

014C 904E12            MOV     DPTR,#04E12H
014F E0                MOVX    A,@DPTR
0150 FF                MOV     R7,A
0151 7E00              MOV     R6,#00H
0153 900000      R     MOV     DPTR,#tmp
0156 EE                MOV     A,R6
0157 F0                MOVX    @DPTR,A
0158 A3                INC     DPTR
0159 EF                MOV     A,R7
015A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
015B 900000      R     MOV     DPTR,#tmp
015E E0                MOVX    A,@DPTR
015F FE                MOV     R6,A
0160 A3                INC     DPTR
0161 E0                MOVX    A,@DPTR
0162 FF                MOV     R7,A
0163 EF                MOV     A,R7
0164 30E712            JNB     ACC.7,?C0041
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
0167 900000      R     MOV     DPTR,#tmp
016A E0                MOVX    A,@DPTR
016B FE                MOV     R6,A
016C A3                INC     DPTR
016D E0                MOVX    A,@DPTR
016E FF                MOV     R7,A
016F 7EFF              MOV     R6,#0FFH
0171 900000      R     MOV     DPTR,#tmp
0174 EE                MOV     A,R6
0175 F0                MOVX    @DPTR,A
0176 A3                INC     DPTR
0177 EF                MOV     A,R7
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
0179         ?C0041:
                                           ; SOURCE LINE # 861
0179 900000      R     MOV     DPTR,#result
017C 120000      E     LCALL   ?C?LLDXDATA
017F C004              PUSH    AR4
0181 C005              PUSH    AR5
0183 C006              PUSH    AR6
0185 C007              PUSH    AR7
0187 900000      R     MOV     DPTR,#tmp
018A E0                MOVX    A,@DPTR
018B FE                MOV     R6,A
018C A3                INC     DPTR
018D E0                MOVX    A,@DPTR
018E FF                MOV     R7,A
018F E4                CLR     A
0190 FC                MOV     R4,A
0191 FD                MOV     R5,A
0192 7810              MOV     R0,#010H
0194 120000      E     LCALL   ?C?LSHL
0197 A804              MOV     R0,AR4
0199 A905              MOV     R1,AR5
019B AA06              MOV     R2,AR6
019D AB07              MOV     R3,AR7
019F D007              POP     AR7
01A1 D006              POP     AR6
01A3 D005              POP     AR5
01A5 D004              POP     AR4
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 55  

01A7 120000      E     LCALL   ?C?LOR
01AA 900000      R     MOV     DPTR,#result
01AD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 866
01B0         ?C0037:
                                           ; SOURCE LINE # 868
01B0 900000      R     MOV     DPTR,#ADC_DelSig_1_stopConversion
01B3 E0                MOVX    A,@DPTR
01B4 FF                MOV     R7,A
01B5 EF                MOV     A,R7
01B6 6005              JZ      ?C0042
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 870
01B8 900000      R     MOV     DPTR,#ADC_DelSig_1_convDone
01BB E4                CLR     A
01BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 871
01BD         ?C0042:
                                           ; SOURCE LINE # 873
01BD 900000      R     MOV     DPTR,#result
01C0 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 874
01C3         ?C0043:
01C3 22                RET     
             ; FUNCTION ADC_DelSig_1_GetResult32 (END)

             ; FUNCTION _ADC_DelSig_1_SetOffset (BEGIN)
                                           ; SOURCE LINE # 903
0000 900000      R     MOV     DPTR,#offset
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 906
0006 900000      R     MOV     DPTR,#offset
0009 120000      E     LCALL   ?C?LLDXDATA
000C 900000      R     MOV     DPTR,#ADC_DelSig_1_Offset
000F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 907
0012 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetOffset (END)

             ; FUNCTION _ADC_DelSig_1_SetGain (BEGIN)
                                           ; SOURCE LINE # 938
0000 900000      R     MOV     DPTR,#adcGain
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 940
0006 900000      R     MOV     DPTR,#adcGain
0009 120000      E     LCALL   ?C?LLDXDATA
000C 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
000F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 941
0012 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetGain (END)

             ; FUNCTION _ADC_DelSig_1_CountsTo_mVolts (BEGIN)
                                           ; SOURCE LINE # 965
0000 900000      R     MOV     DPTR,#adcCounts
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 966
                                           ; SOURCE LINE # 997
0006 900000      R     MOV     DPTR,#adcCounts
0009 120000      E     LCALL   ?C?LLDXDATA
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 56  

000C 900000      R     MOV     DPTR,#ADC_DelSig_1_Offset
000F 120000      E     LCALL   ?C?LLDXDATA0
0012 120000      E     LCALL   ?C?LSUB
0015 900000      R     MOV     DPTR,#adcCounts
0018 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 999
001B 7FE8              MOV     R7,#0E8H
001D 7E03              MOV     R6,#03H
001F 7D00              MOV     R5,#00H
0021 7C00              MOV     R4,#00H
0023 900000      R     MOV     DPTR,#adcCounts
0026 120000      E     LCALL   ?C?LLDXDATA0
0029 120000      E     LCALL   ?C?LMUL
002C 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
002F 120000      E     LCALL   ?C?LLDXDATA0
0032 120000      E     LCALL   ?C?SLDIV
0035 900000      R     MOV     DPTR,#mVolts
0038 EE                MOV     A,R6
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1001
003D 900000      R     MOV     DPTR,#mVolts
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
                                           ; SOURCE LINE # 1002
0045         ?C0046:
0045 22                RET     
             ; FUNCTION _ADC_DelSig_1_CountsTo_mVolts (END)

             ; FUNCTION _ADC_DelSig_1_CountsTo_Volts (BEGIN)
                                           ; SOURCE LINE # 1026
0000 900000      R     MOV     DPTR,#adcCounts
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1058
0006 900000      R     MOV     DPTR,#adcCounts
0009 120000      E     LCALL   ?C?LLDXDATA
000C 900000      R     MOV     DPTR,#ADC_DelSig_1_Offset
000F 120000      E     LCALL   ?C?LLDXDATA0
0012 120000      E     LCALL   ?C?LSUB
0015 900000      R     MOV     DPTR,#adcCounts
0018 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1060
001B 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
001E 120000      E     LCALL   ?C?LLDXDATA
0021 EC                MOV     A,R4
0022 120000      E     LCALL   ?C?FCASTL
0025 C004              PUSH    AR4
0027 C005              PUSH    AR5
0029 C006              PUSH    AR6
002B C007              PUSH    AR7
002D 900000      R     MOV     DPTR,#adcCounts
0030 120000      E     LCALL   ?C?LLDXDATA
0033 EC                MOV     A,R4
0034 120000      E     LCALL   ?C?FCASTL
0037 D003              POP     AR3
0039 D002              POP     AR2
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 57  

003B D001              POP     AR1
003D D000              POP     AR0
003F 120000      E     LCALL   ?C?FPDIV
0042 900000      R     MOV     DPTR,#Volts
0045 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1062
0048 900000      R     MOV     DPTR,#Volts
004B 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1063
004E         ?C0047:
004E 22                RET     
             ; FUNCTION _ADC_DelSig_1_CountsTo_Volts (END)

             ; FUNCTION _ADC_DelSig_1_CountsTo_uVolts (BEGIN)
                                           ; SOURCE LINE # 1092
0000 900000      R     MOV     DPTR,#adcCounts
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1102
0006 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B EF                MOV     A,R7
000C B40108            CJNE    A,#01H,?C0048
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1104
000F 900000      R     MOV     DPTR,#resolution
0012 7410              MOV     A,#010H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1108
0015 8028              SJMP    ?C0049
0017         ?C0048:
                                           ; SOURCE LINE # 1109
0017 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D B40208            CJNE    A,#02H,?C0050
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
0020 900000      R     MOV     DPTR,#resolution
0023 7410              MOV     A,#010H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1115
0026 8017              SJMP    ?C0049
0028         ?C0050:
                                           ; SOURCE LINE # 1116
0028 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E B40308            CJNE    A,#03H,?C0052
                                           ; SOURCE LINE # 1117
                                           ; SOURCE LINE # 1118
0031 900000      R     MOV     DPTR,#resolution
0034 7410              MOV     A,#010H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
0037 8006              SJMP    ?C0049
0039         ?C0052:
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1125
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 58  

0039 900000      R     MOV     DPTR,#resolution
003C 7410              MOV     A,#010H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1129
003F         ?C0049:
                                           ; SOURCE LINE # 1131
003F 900000      R     MOV     DPTR,#resolution
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 120000      E     LCALL   ?C?CCASE
0048 0000        R     DW      ?C0055
004A 10                DB      010H
004B 0000              DW      00H
004D 0000        R     DW      ?C0056
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1173
004F         ?C0055:
                                           ; SOURCE LINE # 1174
004F 7F12              MOV     R7,#012H
0051 7E7A              MOV     R6,#07AH
0053 7D00              MOV     R5,#00H
0055 7C00              MOV     R4,#00H
0057 900000      R     MOV     DPTR,#coefA
005A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1175
005D 7F20              MOV     R7,#020H
005F 7E00              MOV     R6,#00H
0061 7D00              MOV     R5,#00H
0063 7C00              MOV     R4,#00H
0065 900000      R     MOV     DPTR,#coefB
0068 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1176
006B 801C              SJMP    ?C0054
                                           ; SOURCE LINE # 1214
006D         ?C0056:
                                           ; SOURCE LINE # 1216
006D 7F40              MOV     R7,#040H
006F 7E42              MOV     R6,#042H
0071 7D0F              MOV     R5,#0FH
0073 7C00              MOV     R4,#00H
0075 900000      R     MOV     DPTR,#coefA
0078 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1217
007B 7F01              MOV     R7,#01H
007D 7E00              MOV     R6,#00H
007F 7D00              MOV     R5,#00H
0081 7C00              MOV     R4,#00H
0083 900000      R     MOV     DPTR,#coefB
0086 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
0089         ?C0054:
                                           ; SOURCE LINE # 1220
0089 900000      R     MOV     DPTR,#coefB
008C 120000      E     LCALL   ?C?LLDXDATA0
008F 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
0092 120000      E     LCALL   ?C?LLDXDATA
0095 120000      E     LCALL   ?C?SLDIV
0098 900000      R     MOV     DPTR,#coefB
009B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1221
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 59  

009E 900000      R     MOV     DPTR,#ADC_DelSig_1_Offset
00A1 120000      E     LCALL   ?C?LLDXDATA
00A4 900000      R     MOV     DPTR,#coefA
00A7 120000      E     LCALL   ?C?LLDXDATA0
00AA 120000      E     LCALL   ?C?LMUL
00AD 900000      R     MOV     DPTR,#coefB
00B0 120000      E     LCALL   ?C?LLDXDATA0
00B3 120000      E     LCALL   ?C?SLDIV
00B6 C004              PUSH    AR4
00B8 C005              PUSH    AR5
00BA C006              PUSH    AR6
00BC C007              PUSH    AR7
00BE 900000      R     MOV     DPTR,#adcCounts
00C1 120000      E     LCALL   ?C?LLDXDATA
00C4 900000      R     MOV     DPTR,#coefA
00C7 120000      E     LCALL   ?C?LLDXDATA0
00CA 120000      E     LCALL   ?C?LMUL
00CD 900000      R     MOV     DPTR,#coefB
00D0 120000      E     LCALL   ?C?LLDXDATA0
00D3 120000      E     LCALL   ?C?SLDIV
00D6 D003              POP     AR3
00D8 D002              POP     AR2
00DA D001              POP     AR1
00DC D000              POP     AR0
00DE 120000      E     LCALL   ?C?LSUB
00E1 900000      R     MOV     DPTR,#uVolts
00E4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1223
00E7 900000      R     MOV     DPTR,#uVolts
00EA 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1224
00ED         ?C0057:
00ED 22                RET     
             ; FUNCTION _ADC_DelSig_1_CountsTo_uVolts (END)

             ; FUNCTION _ADC_DelSig_1_InitConfig (BEGIN)
                                           ; SOURCE LINE # 1247
0000 900000      R     MOV     DPTR,#config
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1249
0005 900000      R     MOV     DPTR,#ADC_DelSig_1_stopConversion
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1251
000A 900000      R     MOV     DPTR,#config
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 6401              XRL     A,#01H
0012 6003              JZ      $ + 5H
0014 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1254
0017 904E00            MOV     DPTR,#04E00H
001A 7438              MOV     A,#038H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1255
001D 904E02            MOV     DPTR,#04E02H
0020 7404              MOV     A,#04H
0022 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 60  

                                           ; SOURCE LINE # 1256
0023 904E03            MOV     DPTR,#04E03H
0026 7407              MOV     A,#07H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1257
0029 904E04            MOV     DPTR,#04E04H
002C E4                CLR     A
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1258
002E 904E05            MOV     DPTR,#04E05H
0031 E4                CLR     A
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1259
0033 904E06            MOV     DPTR,#04E06H
0036 743F              MOV     A,#03FH
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1260
0039 904E08            MOV     DPTR,#04E08H
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1261
003E 904E09            MOV     DPTR,#04E09H
0041 E4                CLR     A
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1262
0043 904E0A            MOV     DPTR,#04E0AH
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1263
0048 904E14            MOV     DPTR,#04E14H
004B 7401              MOV     A,#01H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1265
004E 905884            MOV     DPTR,#05884H
0051 7450              MOV     A,#050H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1266
0054 905885            MOV     DPTR,#05885H
0057 7427              MOV     A,#027H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1267
005A 905886            MOV     DPTR,#05886H
005D 742C              MOV     A,#02CH
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1268
0060 905887            MOV     DPTR,#05887H
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1269
0065 90588A            MOV     DPTR,#0588AH
0068 7455              MOV     A,#055H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1270
006B 90588B            MOV     DPTR,#0588BH
006E 745A              MOV     A,#05AH
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1271
0071 90588C            MOV     DPTR,#0588CH
0074 7405              MOV     A,#05H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1272
0077 90588E            MOV     DPTR,#0588EH
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 61  

007A 7401              MOV     A,#01H
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1273
007D 90588F            MOV     DPTR,#0588FH
0080 7411              MOV     A,#011H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1274
0083 905890            MOV     DPTR,#05890H
0086 7419              MOV     A,#019H
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1275
0089 905891            MOV     DPTR,#05891H
008C 7497              MOV     A,#097H
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1277
008F 7F44              MOV     R7,#044H
0091 120000      R     LCALL   _ADC_DelSig_1_SetDSMRef0Reg
                                           ; SOURCE LINE # 1278
0094 905894            MOV     DPTR,#05894H
0097 7458              MOV     A,#058H
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1279
009A 905895            MOV     DPTR,#05895H
009D E4                CLR     A
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1281
009F 90589A            MOV     DPTR,#0589AH
00A2 7405              MOV     A,#05H
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1282
00A5 90589B            MOV     DPTR,#0589BH
00A8 7401              MOV     A,#01H
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1283
00AB 90589C            MOV     DPTR,#0589CH
00AE E4                CLR     A
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1284
00B0 90589D            MOV     DPTR,#0589DH
00B3 740A              MOV     A,#0AH
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1305
00B6 7F00              MOV     R7,#00H
00B8 7E7D              MOV     R6,#07DH
00BA 7D00              MOV     R5,#00H
00BC 7C00              MOV     R4,#00H
00BE 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
00C1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1307
00C4 7D01              MOV     R5,#01H
00C6 7F05              MOV     R7,#05H
00C8 7E00              MOV     R6,#00H
00CA 120000      E     LCALL   _ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister
                                           ; SOURCE LINE # 1311
00CD 7D01              MOV     R5,#01H
00CF 7F25              MOV     R7,#025H
00D1 7E00              MOV     R6,#00H
00D3 120000      E     LCALL   _ADC_DelSig_1_theACLK_SetDividerRegister
                                           ; SOURCE LINE # 1316
00D6 7C00        E     MOV     R4,#HIGH ADC_DelSig_1_ISR1
00D8 7D00        E     MOV     R5,#LOW ADC_DelSig_1_ISR1
00DA 7F1D              MOV     R7,#01DH
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 62  

00DC 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1318
00DF         ?C0058:
                                           ; SOURCE LINE # 1321
00DF 900000      R     MOV     DPTR,#config
00E2 E0                MOVX    A,@DPTR
00E3 FF                MOV     R7,A
00E4 EF                MOV     A,R7
00E5 6402              XRL     A,#02H
00E7 6003              JZ      $ + 5H
00E9 020000      R     LJMP    ?C0059
                                           ; SOURCE LINE # 1322
                                           ; SOURCE LINE # 1324
00EC 904E00            MOV     DPTR,#04E00H
00EF 7438              MOV     A,#038H
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1325
00F2 904E02            MOV     DPTR,#04E02H
00F5 7404              MOV     A,#04H
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1326
00F8 904E03            MOV     DPTR,#04E03H
00FB 7407              MOV     A,#07H
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1327
00FE 904E04            MOV     DPTR,#04E04H
0101 E4                CLR     A
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1328
0103 904E05            MOV     DPTR,#04E05H
0106 E4                CLR     A
0107 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1329
0108 904E06            MOV     DPTR,#04E06H
010B 743F              MOV     A,#03FH
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1330
010E 904E08            MOV     DPTR,#04E08H
0111 E4                CLR     A
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1331
0113 904E09            MOV     DPTR,#04E09H
0116 E4                CLR     A
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1332
0118 904E0A            MOV     DPTR,#04E0AH
011B E4                CLR     A
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1333
011D 904E14            MOV     DPTR,#04E14H
0120 7401              MOV     A,#01H
0122 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1335
0123 905884            MOV     DPTR,#05884H
0126 7450              MOV     A,#050H
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1336
0129 905885            MOV     DPTR,#05885H
012C 7427              MOV     A,#027H
012E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1337
012F 905886            MOV     DPTR,#05886H
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 63  

0132 742C              MOV     A,#02CH
0134 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1338
0135 905887            MOV     DPTR,#05887H
0138 E4                CLR     A
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1339
013A 90588A            MOV     DPTR,#0588AH
013D 7455              MOV     A,#055H
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1340
0140 90588B            MOV     DPTR,#0588BH
0143 745A              MOV     A,#05AH
0145 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1341
0146 90588C            MOV     DPTR,#0588CH
0149 7405              MOV     A,#05H
014B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1342
014C 90588E            MOV     DPTR,#0588EH
014F 7401              MOV     A,#01H
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1343
0152 90588F            MOV     DPTR,#0588FH
0155 7411              MOV     A,#011H
0157 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1344
0158 905890            MOV     DPTR,#05890H
015B 7419              MOV     A,#019H
015D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1345
015E 905891            MOV     DPTR,#05891H
0161 7497              MOV     A,#097H
0163 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1347
0164 7F44              MOV     R7,#044H
0166 120000      R     LCALL   _ADC_DelSig_1_SetDSMRef0Reg
                                           ; SOURCE LINE # 1348
0169 905894            MOV     DPTR,#05894H
016C 7458              MOV     A,#058H
016E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1349
016F 905895            MOV     DPTR,#05895H
0172 E4                CLR     A
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1351
0174 90589A            MOV     DPTR,#0589AH
0177 7405              MOV     A,#05H
0179 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1352
017A 90589B            MOV     DPTR,#0589BH
017D 7401              MOV     A,#01H
017F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1353
0180 90589C            MOV     DPTR,#0589CH
0183 E4                CLR     A
0184 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1354
0185 90589D            MOV     DPTR,#0589DH
0188 740A              MOV     A,#0AH
018A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1376
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 64  

018B 7F00              MOV     R7,#00H
018D 7E7D              MOV     R6,#07DH
018F 7D00              MOV     R5,#00H
0191 7C00              MOV     R4,#00H
0193 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
0196 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1378
0199 7D01              MOV     R5,#01H
019B 7F05              MOV     R7,#05H
019D 7E00              MOV     R6,#00H
019F 120000      E     LCALL   _ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister
                                           ; SOURCE LINE # 1382
01A2 7D01              MOV     R5,#01H
01A4 7F25              MOV     R7,#025H
01A6 7E00              MOV     R6,#00H
01A8 120000      E     LCALL   _ADC_DelSig_1_theACLK_SetDividerRegister
                                           ; SOURCE LINE # 1387
01AB 7C00        E     MOV     R4,#HIGH ADC_DelSig_1_ISR2
01AD 7D00        E     MOV     R5,#LOW ADC_DelSig_1_ISR2
01AF 7F1D              MOV     R7,#01DH
01B1 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1389
01B4         ?C0059:
                                           ; SOURCE LINE # 1393
01B4 900000      R     MOV     DPTR,#config
01B7 E0                MOVX    A,@DPTR
01B8 FF                MOV     R7,A
01B9 EF                MOV     A,R7
01BA 6403              XRL     A,#03H
01BC 6003              JZ      $ + 5H
01BE 020000      R     LJMP    ?C0060
                                           ; SOURCE LINE # 1394
                                           ; SOURCE LINE # 1396
01C1 904E00            MOV     DPTR,#04E00H
01C4 7438              MOV     A,#038H
01C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1397
01C7 904E02            MOV     DPTR,#04E02H
01CA 7404              MOV     A,#04H
01CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1398
01CD 904E03            MOV     DPTR,#04E03H
01D0 7407              MOV     A,#07H
01D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1399
01D3 904E04            MOV     DPTR,#04E04H
01D6 E4                CLR     A
01D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1400
01D8 904E05            MOV     DPTR,#04E05H
01DB E4                CLR     A
01DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1401
01DD 904E06            MOV     DPTR,#04E06H
01E0 743F              MOV     A,#03FH
01E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1402
01E3 904E08            MOV     DPTR,#04E08H
01E6 E4                CLR     A
01E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1403
01E8 904E09            MOV     DPTR,#04E09H
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 65  

01EB E4                CLR     A
01EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1404
01ED 904E0A            MOV     DPTR,#04E0AH
01F0 E4                CLR     A
01F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1405
01F2 904E14            MOV     DPTR,#04E14H
01F5 7401              MOV     A,#01H
01F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1407
01F8 905884            MOV     DPTR,#05884H
01FB 7450              MOV     A,#050H
01FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1408
01FE 905885            MOV     DPTR,#05885H
0201 7427              MOV     A,#027H
0203 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1409
0204 905886            MOV     DPTR,#05886H
0207 742C              MOV     A,#02CH
0209 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1410
020A 905887            MOV     DPTR,#05887H
020D E4                CLR     A
020E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1411
020F 90588A            MOV     DPTR,#0588AH
0212 7455              MOV     A,#055H
0214 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1412
0215 90588B            MOV     DPTR,#0588BH
0218 745A              MOV     A,#05AH
021A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1413
021B 90588C            MOV     DPTR,#0588CH
021E 7405              MOV     A,#05H
0220 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1414
0221 90588E            MOV     DPTR,#0588EH
0224 7401              MOV     A,#01H
0226 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1415
0227 90588F            MOV     DPTR,#0588FH
022A 7411              MOV     A,#011H
022C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1416
022D 905890            MOV     DPTR,#05890H
0230 7419              MOV     A,#019H
0232 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1417
0233 905891            MOV     DPTR,#05891H
0236 7497              MOV     A,#097H
0238 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1419
0239 7F44              MOV     R7,#044H
023B 120000      R     LCALL   _ADC_DelSig_1_SetDSMRef0Reg
                                           ; SOURCE LINE # 1420
023E 905894            MOV     DPTR,#05894H
0241 7458              MOV     A,#058H
0243 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1421
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 66  

0244 905895            MOV     DPTR,#05895H
0247 E4                CLR     A
0248 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1423
0249 90589A            MOV     DPTR,#0589AH
024C 7405              MOV     A,#05H
024E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1424
024F 90589B            MOV     DPTR,#0589BH
0252 7401              MOV     A,#01H
0254 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1425
0255 90589C            MOV     DPTR,#0589CH
0258 E4                CLR     A
0259 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1426
025A 90589D            MOV     DPTR,#0589DH
025D 740A              MOV     A,#0AH
025F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1446
0260 7F00              MOV     R7,#00H
0262 7E7D              MOV     R6,#07DH
0264 7D00              MOV     R5,#00H
0266 7C00              MOV     R4,#00H
0268 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
026B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1448
026E 7D01              MOV     R5,#01H
0270 7F05              MOV     R7,#05H
0272 7E00              MOV     R6,#00H
0274 120000      E     LCALL   _ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister
                                           ; SOURCE LINE # 1452
0277 7D01              MOV     R5,#01H
0279 7F25              MOV     R7,#025H
027B 7E00              MOV     R6,#00H
027D 120000      E     LCALL   _ADC_DelSig_1_theACLK_SetDividerRegister
                                           ; SOURCE LINE # 1457
0280 7C00        E     MOV     R4,#HIGH ADC_DelSig_1_ISR3
0282 7D00        E     MOV     R5,#LOW ADC_DelSig_1_ISR3
0284 7F1D              MOV     R7,#01DH
0286 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1459
0289         ?C0060:
                                           ; SOURCE LINE # 1463
0289 900000      R     MOV     DPTR,#config
028C E0                MOVX    A,@DPTR
028D FF                MOV     R7,A
028E EF                MOV     A,R7
028F 6404              XRL     A,#04H
0291 6003              JZ      $ + 5H
0293 020000      R     LJMP    ?C0062
                                           ; SOURCE LINE # 1464
                                           ; SOURCE LINE # 1466
0296 904E00            MOV     DPTR,#04E00H
0299 7438              MOV     A,#038H
029B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1467
029C 904E02            MOV     DPTR,#04E02H
029F 7404              MOV     A,#04H
02A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1468
02A2 904E03            MOV     DPTR,#04E03H
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 67  

02A5 7407              MOV     A,#07H
02A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1469
02A8 904E04            MOV     DPTR,#04E04H
02AB E4                CLR     A
02AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1470
02AD 904E05            MOV     DPTR,#04E05H
02B0 E4                CLR     A
02B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1471
02B2 904E06            MOV     DPTR,#04E06H
02B5 743F              MOV     A,#03FH
02B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1472
02B8 904E08            MOV     DPTR,#04E08H
02BB E4                CLR     A
02BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1473
02BD 904E09            MOV     DPTR,#04E09H
02C0 E4                CLR     A
02C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1474
02C2 904E0A            MOV     DPTR,#04E0AH
02C5 E4                CLR     A
02C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1475
02C7 904E14            MOV     DPTR,#04E14H
02CA 7401              MOV     A,#01H
02CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1477
02CD 905884            MOV     DPTR,#05884H
02D0 7450              MOV     A,#050H
02D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1478
02D3 905885            MOV     DPTR,#05885H
02D6 7427              MOV     A,#027H
02D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1479
02D9 905886            MOV     DPTR,#05886H
02DC 742C              MOV     A,#02CH
02DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1480
02DF 905887            MOV     DPTR,#05887H
02E2 E4                CLR     A
02E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1481
02E4 90588A            MOV     DPTR,#0588AH
02E7 7455              MOV     A,#055H
02E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1482
02EA 90588B            MOV     DPTR,#0588BH
02ED 745A              MOV     A,#05AH
02EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1483
02F0 90588C            MOV     DPTR,#0588CH
02F3 7405              MOV     A,#05H
02F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1484
02F6 90588E            MOV     DPTR,#0588EH
02F9 7401              MOV     A,#01H
02FB F0                MOVX    @DPTR,A
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 68  

                                           ; SOURCE LINE # 1485
02FC 90588F            MOV     DPTR,#0588FH
02FF 7411              MOV     A,#011H
0301 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1486
0302 905890            MOV     DPTR,#05890H
0305 7419              MOV     A,#019H
0307 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1487
0308 905891            MOV     DPTR,#05891H
030B 7497              MOV     A,#097H
030D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1489
030E 7F44              MOV     R7,#044H
0310 120000      R     LCALL   _ADC_DelSig_1_SetDSMRef0Reg
                                           ; SOURCE LINE # 1490
0313 905894            MOV     DPTR,#05894H
0316 7458              MOV     A,#058H
0318 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1491
0319 905895            MOV     DPTR,#05895H
031C E4                CLR     A
031D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1493
031E 90589A            MOV     DPTR,#0589AH
0321 7405              MOV     A,#05H
0323 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1494
0324 90589B            MOV     DPTR,#0589BH
0327 7401              MOV     A,#01H
0329 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1495
032A 90589C            MOV     DPTR,#0589CH
032D E4                CLR     A
032E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1496
032F 90589D            MOV     DPTR,#0589DH
0332 740A              MOV     A,#0AH
0334 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1516
0335 7F00              MOV     R7,#00H
0337 7E7D              MOV     R6,#07DH
0339 7D00              MOV     R5,#00H
033B 7C00              MOV     R4,#00H
033D 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
0340 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1518
0343 7D01              MOV     R5,#01H
0345 7F05              MOV     R7,#05H
0347 7E00              MOV     R6,#00H
0349 120000      E     LCALL   _ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister
                                           ; SOURCE LINE # 1522
034C 7D01              MOV     R5,#01H
034E 7F25              MOV     R7,#025H
0350 7E00              MOV     R6,#00H
0352 120000      E     LCALL   _ADC_DelSig_1_theACLK_SetDividerRegister
                                           ; SOURCE LINE # 1527
0355 7C00        E     MOV     R4,#HIGH ADC_DelSig_1_ISR4
0357 7D00        E     MOV     R5,#LOW ADC_DelSig_1_ISR4
0359 7F1D              MOV     R7,#01DH
035B 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1529
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 69  

                                           ; SOURCE LINE # 1531
035E         ?C0062:
035E 22                RET     
             ; FUNCTION _ADC_DelSig_1_InitConfig (END)

             ; FUNCTION _ADC_DelSig_1_SelectConfiguration (BEGIN)
                                           ; SOURCE LINE # 1560
0000 900000      R     MOV     DPTR,#config
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#restart
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1562
                                           ; SOURCE LINE # 1564
000A 900000      R     MOV     DPTR,#config
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9400              SUBB    A,#00H
0013 4079              JC      ?C0063
0015 900000      R     MOV     DPTR,#config
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B D3                SETB    C
001C 9404              SUBB    A,#04H
001E 506E              JNC     ?C0063
                                           ; SOURCE LINE # 1565
                                           ; SOURCE LINE # 1569
0020 900000      R     MOV     DPTR,#ADC_DelSig_1_initVar
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 7006              JNZ     ?C0064
                                           ; SOURCE LINE # 1570
                                           ; SOURCE LINE # 1571
0028 900000      R     MOV     DPTR,#ADC_DelSig_1_started
002B 7401              MOV     A,#01H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1572
002E         ?C0064:
                                           ; SOURCE LINE # 1575
002E 900000      R     MOV     DPTR,#config
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#ADC_DelSig_1_Config
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1578
0038 120000      R     LCALL   ADC_DelSig_1_Stop
                                           ; SOURCE LINE # 1581
003B 900000      R     MOV     DPTR,#config
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 120000      R     LCALL   _ADC_DelSig_1_InitConfig
                                           ; SOURCE LINE # 1584
0043 900000      R     MOV     DPTR,#config
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 70  

0049 75F003            MOV     B,#03H
004C A4                MUL     AB
004D 2400        R     ADD     A,#LOW ADC_DelSig_1_gcor+0FFFFH
004F F582              MOV     DPL,A
0051 E4                CLR     A
0052 3400        R     ADDC    A,#HIGH ADC_DelSig_1_gcor+0FFFFH
0054 F583              MOV     DPH,A
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 904E0E            MOV     DPTR,#04E0EH
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1585
005D 900000      R     MOV     DPTR,#config
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 EF                MOV     A,R7
0063 75F003            MOV     B,#03H
0066 A4                MUL     AB
0067 2400        R     ADD     A,#LOW ADC_DelSig_1_gcor+0FFFDH
0069 F582              MOV     DPL,A
006B E4                CLR     A
006C 3400        R     ADDC    A,#HIGH ADC_DelSig_1_gcor+0FFFDH
006E F583              MOV     DPH,A
0070 E0                MOVX    A,@DPTR
0071 FC                MOV     R4,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FD                MOV     R5,A
0075 7B02              MOV     R3,#02H
0077 7A4E              MOV     R2,#04EH
0079 790C              MOV     R1,#0CH
007B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 1587
007E 900000      R     MOV     DPTR,#restart
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 EF                MOV     A,R7
0084 B4010C            CJNE    A,#01H,?C0068
                                           ; SOURCE LINE # 1588
                                           ; SOURCE LINE # 1590
0087 120000      R     LCALL   ADC_DelSig_1_Start
                                           ; SOURCE LINE # 1593
008A 120000      R     LCALL   ADC_DelSig_1_StartConvert
                                           ; SOURCE LINE # 1594
                                           ; SOURCE LINE # 1595
008D 22                RET     
008E         ?C0063:
                                           ; SOURCE LINE # 1597
                                           ; SOURCE LINE # 1599
008E 7F00              MOV     R7,#00H
0090 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 1600
                                           ; SOURCE LINE # 1601
0093         ?C0068:
0093 22                RET     
             ; FUNCTION _ADC_DelSig_1_SelectConfiguration (END)

             ; FUNCTION _ADC_DelSig_1_GainCompensation (BEGIN)
                                           ; SOURCE LINE # 1625
0000 900000      R     MOV     DPTR,#inputRange
0003 EF                MOV     A,R7
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 71  

0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#idealDecGain
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#idealOddDecGain
0010 EA                MOV     A,R2
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EB                MOV     A,R3
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1627
                                           ; SOURCE LINE # 1633
0015 900000      R     MOV     DPTR,#config
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B D3                SETB    C
001C 9400              SUBB    A,#00H
001E 5003              JNC     $ + 5H
0020 020000      R     LJMP    ?C0069
0023 900000      R     MOV     DPTR,#config
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 D3                SETB    C
002A 9404              SUBB    A,#04H
002C 4003              JC      $ + 5H
002E 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1634
                                           ; SOURCE LINE # 1635
0031 900000      R     MOV     DPTR,#inputRange
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 120000      E     LCALL   ?C?CCASE
003A 0000        R     DW      ?C0072
003C 01                DB      01H
003D 0000        R     DW      ?C0072
003F 04                DB      04H
0040 0000        R     DW      ?C0075
0042 07                DB      07H
0043 0000        R     DW      ?C0078
0045 08                DB      08H
0046 0000        R     DW      ?C0081
0048 0A                DB      0AH
0049 0000              DW      00H
004B 0000        R     DW      ?C0084
                                           ; SOURCE LINE # 1636
                                           ; SOURCE LINE # 1637
                                           ; SOURCE LINE # 1638
004D         ?C0072:
                                           ; SOURCE LINE # 1640
004D 900000      R     MOV     DPTR,#resolution
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 D3                SETB    C
0054 940F              SUBB    A,#0FH
0056 4011              JC      ?C0073
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 72  

                                           ; SOURCE LINE # 1641
                                           ; SOURCE LINE # 1642
0058 7B0C              MOV     R3,#0CH
005A 7A01              MOV     R2,#01H
005C 7918              MOV     R1,#018H
005E 120000      E     LCALL   _cyread8
0061 900000      R     MOV     DPTR,#flash
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1643
0066 020000      R     LJMP    ?C0070
0069         ?C0073:
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1646
0069 7B0C              MOV     R3,#0CH
006B 7A01              MOV     R2,#01H
006D 791C              MOV     R1,#01CH
006F 120000      E     LCALL   _cyread8
0072 900000      R     MOV     DPTR,#flash
0075 EF                MOV     A,R7
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1647
                                           ; SOURCE LINE # 1648
0077 020000      R     LJMP    ?C0070
                                           ; SOURCE LINE # 1650
007A         ?C0075:
                                           ; SOURCE LINE # 1652
007A 900000      R     MOV     DPTR,#resolution
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 D3                SETB    C
0081 940F              SUBB    A,#0FH
0083 4010              JC      ?C0076
                                           ; SOURCE LINE # 1653
                                           ; SOURCE LINE # 1654
0085 7B0C              MOV     R3,#0CH
0087 7A01              MOV     R2,#01H
0089 7919              MOV     R1,#019H
008B 120000      E     LCALL   _cyread8
008E 900000      R     MOV     DPTR,#flash
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1655
0093 806B              SJMP    ?C0070
0095         ?C0076:
                                           ; SOURCE LINE # 1657
                                           ; SOURCE LINE # 1658
0095 7B0C              MOV     R3,#0CH
0097 7A01              MOV     R2,#01H
0099 791D              MOV     R1,#01DH
009B 120000      E     LCALL   _cyread8
009E 900000      R     MOV     DPTR,#flash
00A1 EF                MOV     A,R7
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1659
                                           ; SOURCE LINE # 1660
00A3 805B              SJMP    ?C0070
                                           ; SOURCE LINE # 1662
00A5         ?C0078:
                                           ; SOURCE LINE # 1664
00A5 900000      R     MOV     DPTR,#resolution
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 73  

00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB D3                SETB    C
00AC 940F              SUBB    A,#0FH
00AE 4010              JC      ?C0079
                                           ; SOURCE LINE # 1665
                                           ; SOURCE LINE # 1666
00B0 7B0C              MOV     R3,#0CH
00B2 7A01              MOV     R2,#01H
00B4 791A              MOV     R1,#01AH
00B6 120000      E     LCALL   _cyread8
00B9 900000      R     MOV     DPTR,#flash
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1667
00BE 8040              SJMP    ?C0070
00C0         ?C0079:
                                           ; SOURCE LINE # 1669
                                           ; SOURCE LINE # 1670
00C0 7B0C              MOV     R3,#0CH
00C2 7A01              MOV     R2,#01H
00C4 791E              MOV     R1,#01EH
00C6 120000      E     LCALL   _cyread8
00C9 900000      R     MOV     DPTR,#flash
00CC EF                MOV     A,R7
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1671
                                           ; SOURCE LINE # 1672
00CE 8030              SJMP    ?C0070
                                           ; SOURCE LINE # 1674
00D0         ?C0081:
                                           ; SOURCE LINE # 1676
00D0 900000      R     MOV     DPTR,#resolution
00D3 E0                MOVX    A,@DPTR
00D4 FF                MOV     R7,A
00D5 EF                MOV     A,R7
00D6 D3                SETB    C
00D7 940F              SUBB    A,#0FH
00D9 4010              JC      ?C0082
                                           ; SOURCE LINE # 1677
                                           ; SOURCE LINE # 1678
00DB 7B0C              MOV     R3,#0CH
00DD 7A01              MOV     R2,#01H
00DF 791B              MOV     R1,#01BH
00E1 120000      E     LCALL   _cyread8
00E4 900000      R     MOV     DPTR,#flash
00E7 EF                MOV     A,R7
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1679
00E9 8015              SJMP    ?C0070
00EB         ?C0082:
                                           ; SOURCE LINE # 1681
                                           ; SOURCE LINE # 1682
00EB 7B0C              MOV     R3,#0CH
00ED 7A01              MOV     R2,#01H
00EF 791F              MOV     R1,#01FH
00F1 120000      E     LCALL   _cyread8
00F4 900000      R     MOV     DPTR,#flash
00F7 EF                MOV     A,R7
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1683
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 74  

                                           ; SOURCE LINE # 1684
00F9 8005              SJMP    ?C0070
                                           ; SOURCE LINE # 1686
00FB         ?C0084:
                                           ; SOURCE LINE # 1687
00FB 900000      R     MOV     DPTR,#flash
00FE E4                CLR     A
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1688
                                           ; SOURCE LINE # 1689
0100         ?C0070:
                                           ; SOURCE LINE # 1692
0100 900000      R     MOV     DPTR,#flash
0103 E0                MOVX    A,@DPTR
0104 FF                MOV     R7,A
0105 EF                MOV     A,R7
0106 33                RLC     A
0107 95E0              SUBB    A,ACC
0109 FE                MOV     R6,A
010A FD                MOV     R5,A
010B FC                MOV     R4,A
010C 7B20              MOV     R3,#020H
010E 7A00              MOV     R2,#00H
0110 7900              MOV     R1,#00H
0112 7800              MOV     R0,#00H
0114 120000      E     LCALL   ?C?LMUL
0117 A804              MOV     R0,AR4
0119 A905              MOV     R1,AR5
011B AA06              MOV     R2,AR6
011D AB07              MOV     R3,AR7
011F 900000      R     MOV     DPTR,#idealDecGain
0122 E0                MOVX    A,@DPTR
0123 FE                MOV     R6,A
0124 A3                INC     DPTR
0125 E0                MOVX    A,@DPTR
0126 FF                MOV     R7,A
0127 E4                CLR     A
0128 FC                MOV     R4,A
0129 FD                MOV     R5,A
012A 120000      E     LCALL   ?C?LADD
012D 900000      R     MOV     DPTR,#normalised
0130 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1693
0133 900000      R     MOV     DPTR,#normalised
0136 120000      E     LCALL   ?C?LLDXDATA
0139 AB07              MOV     R3,AR7
013B AA06              MOV     R2,AR6
013D A905              MOV     R1,AR5
013F A804              MOV     R0,AR4
0141 A804              MOV     R0,AR4
0143 A905              MOV     R1,AR5
0145 AA06              MOV     R2,AR6
0147 AB07              MOV     R3,AR7
0149 900000      R     MOV     DPTR,#idealOddDecGain
014C E0                MOVX    A,@DPTR
014D FE                MOV     R6,A
014E A3                INC     DPTR
014F E0                MOVX    A,@DPTR
0150 FF                MOV     R7,A
0151 E4                CLR     A
0152 FC                MOV     R4,A
0153 FD                MOV     R5,A
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 75  

0154 120000      E     LCALL   ?C?LMUL
0157 900000      R     MOV     DPTR,#gcorTmp
015A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1694
015D 7B00              MOV     R3,#00H
015F 7A80              MOV     R2,#080H
0161 7900              MOV     R1,#00H
0163 7800              MOV     R0,#00H
0165 900000      R     MOV     DPTR,#gcorTmp
0168 120000      E     LCALL   ?C?LLDXDATA
016B 120000      E     LCALL   ?C?ULDIV
016E 900000      R     MOV     DPTR,#gcorValue
0171 EE                MOV     A,R6
0172 F0                MOVX    @DPTR,A
0173 A3                INC     DPTR
0174 EF                MOV     A,R7
0175 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1696
0176 900000      R     MOV     DPTR,#resolution
0179 E0                MOVX    A,@DPTR
017A FF                MOV     R7,A
017B EF                MOV     A,R7
017C C3                CLR     C
017D 940E              SUBB    A,#0EH
017F 5047              JNC     ?C0085
                                           ; SOURCE LINE # 1697
                                           ; SOURCE LINE # 1698
0181 900000      R     MOV     DPTR,#gcorValue
0184 E0                MOVX    A,@DPTR
0185 FE                MOV     R6,A
0186 A3                INC     DPTR
0187 E0                MOVX    A,@DPTR
0188 FF                MOV     R7,A
0189 900000      R     MOV     DPTR,#resolution
018C E0                MOVX    A,@DPTR
018D FD                MOV     R5,A
018E C3                CLR     C
018F 740E              MOV     A,#0EH
0191 9D                SUBB    A,R5
0192 FD                MOV     R5,A
0193 EF                MOV     A,R7
0194 A805              MOV     R0,AR5
0196 08                INC     R0
0197 8005              SJMP    ?C0097
0199         ?C0096:
0199 CE                XCH     A,R6
019A C3                CLR     C
019B 13                RRC     A
019C CE                XCH     A,R6
019D 13                RRC     A
019E         ?C0097:
019E D8F9              DJNZ    R0,?C0096
01A0 FF                MOV     R7,A
01A1 900000      R     MOV     DPTR,#gcorValue
01A4 EE                MOV     A,R6
01A5 F0                MOVX    @DPTR,A
01A6 A3                INC     DPTR
01A7 EF                MOV     A,R7
01A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1699
01A9 900000      R     MOV     DPTR,#resolution
01AC E0                MOVX    A,@DPTR
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 76  

01AD FF                MOV     R7,A
01AE EF                MOV     A,R7
01AF 04                INC     A
01B0 FF                MOV     R7,A
01B1 900000      R     MOV     DPTR,#config
01B4 E0                MOVX    A,@DPTR
01B5 FE                MOV     R6,A
01B6 EE                MOV     A,R6
01B7 75F003            MOV     B,#03H
01BA A4                MUL     AB
01BB 2400        R     ADD     A,#LOW ADC_DelSig_1_gcor+0FFFFH
01BD F582              MOV     DPL,A
01BF E4                CLR     A
01C0 3400        R     ADDC    A,#HIGH ADC_DelSig_1_gcor+0FFFFH
01C2 F583              MOV     DPH,A
01C4 EF                MOV     A,R7
01C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1700
01C6 8016              SJMP    ?C0086
01C8         ?C0085:
                                           ; SOURCE LINE # 1702
                                           ; SOURCE LINE # 1704
01C8 900000      R     MOV     DPTR,#config
01CB E0                MOVX    A,@DPTR
01CC FF                MOV     R7,A
01CD EF                MOV     A,R7
01CE 75F003            MOV     B,#03H
01D1 A4                MUL     AB
01D2 2400        R     ADD     A,#LOW ADC_DelSig_1_gcor+0FFFFH
01D4 F582              MOV     DPL,A
01D6 E4                CLR     A
01D7 3400        R     ADDC    A,#HIGH ADC_DelSig_1_gcor+0FFFFH
01D9 F583              MOV     DPH,A
01DB 740F              MOV     A,#0FH
01DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1705
01DE         ?C0086:
                                           ; SOURCE LINE # 1708
01DE 900000      R     MOV     DPTR,#gcorValue
01E1 E0                MOVX    A,@DPTR
01E2 FE                MOV     R6,A
01E3 A3                INC     DPTR
01E4 E0                MOVX    A,@DPTR
01E5 FF                MOV     R7,A
01E6 900000      R     MOV     DPTR,#config
01E9 E0                MOVX    A,@DPTR
01EA FD                MOV     R5,A
01EB ED                MOV     A,R5
01EC 75F003            MOV     B,#03H
01EF A4                MUL     AB
01F0 2400        R     ADD     A,#LOW ADC_DelSig_1_gcor+0FFFDH
01F2 F582              MOV     DPL,A
01F4 E4                CLR     A
01F5 3400        R     ADDC    A,#HIGH ADC_DelSig_1_gcor+0FFFDH
01F7 F583              MOV     DPH,A
01F9 EE                MOV     A,R6
01FA F0                MOVX    @DPTR,A
01FB A3                INC     DPTR
01FC EF                MOV     A,R7
01FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1709
01FE 22                RET     
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 77  

01FF         ?C0069:
                                           ; SOURCE LINE # 1711
                                           ; SOURCE LINE # 1713
01FF 7F00              MOV     R7,#00H
0201 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 1714
                                           ; SOURCE LINE # 1715
0204         ?C0089:
0204 22                RET     
             ; FUNCTION _ADC_DelSig_1_GainCompensation (END)

             ; FUNCTION _ADC_DelSig_1_SetDSMRef0Reg (BEGIN)
                                           ; SOURCE LINE # 1732
0000 900000      R     MOV     DPTR,#value
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1733
                                           ; SOURCE LINE # 1735
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#enableInterrupts
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1738
000D 9046F8            MOV     DPTR,#046F8H
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 4403              ORL     A,#03H
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1739
0018 9046F9            MOV     DPTR,#046F9H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 4403              ORL     A,#03H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1740
0023 900000      R     MOV     DPTR,#value
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 905892            MOV     DPTR,#05892H
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1743
002D 7F03              MOV     R7,#03H
002F 7E00              MOV     R6,#00H
0031 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1745
0034 9046F8            MOV     DPTR,#046F8H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 54FC              ANL     A,#0FCH
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1746
003F 9046F9            MOV     DPTR,#046F9H
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 78  

0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 54FC              ANL     A,#0FCH
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1748
004A 900000      R     MOV     DPTR,#enableInterrupts
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1749
0052 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetDSMRef0Reg (END)

             ; FUNCTION ADC_DelSig_1_Read8 (BEGIN)
                                           ; SOURCE LINE # 1770
                                           ; SOURCE LINE # 1771
                                           ; SOURCE LINE # 1775
0000 904E01            MOV     DPTR,#04E01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1776
000B 120000      R     LCALL   ADC_DelSig_1_StartConvert
                                           ; SOURCE LINE # 1777
000E 7F00              MOV     R7,#00H
0010 120000      R     LCALL   _ADC_DelSig_1_IsEndConversion
                                           ; SOURCE LINE # 1778
0013 120000      R     LCALL   ADC_DelSig_1_GetResult8
0016 900000      R     MOV     DPTR,#result
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1779
001B 120000      R     LCALL   ADC_DelSig_1_StopConvert
                                           ; SOURCE LINE # 1781
001E 900000      R     MOV     DPTR,#result
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
                                           ; SOURCE LINE # 1782
0023         ?C0091:
0023 22                RET     
             ; FUNCTION ADC_DelSig_1_Read8 (END)

             ; FUNCTION ADC_DelSig_1_Read16 (BEGIN)
                                           ; SOURCE LINE # 1803
                                           ; SOURCE LINE # 1804
                                           ; SOURCE LINE # 1808
0000 904E01            MOV     DPTR,#04E01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1809
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 79  

000B 120000      R     LCALL   ADC_DelSig_1_StartConvert
                                           ; SOURCE LINE # 1810
000E 7F00              MOV     R7,#00H
0010 120000      R     LCALL   _ADC_DelSig_1_IsEndConversion
                                           ; SOURCE LINE # 1811
0013 120000      R     LCALL   ADC_DelSig_1_GetResult16
0016 900000      R     MOV     DPTR,#result
0019 EE                MOV     A,R6
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1812
001E 120000      R     LCALL   ADC_DelSig_1_StopConvert
                                           ; SOURCE LINE # 1814
0021 900000      R     MOV     DPTR,#result
0024 E0                MOVX    A,@DPTR
0025 FE                MOV     R6,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
                                           ; SOURCE LINE # 1815
0029         ?C0092:
0029 22                RET     
             ; FUNCTION ADC_DelSig_1_Read16 (END)

             ; FUNCTION ADC_DelSig_1_Read32 (BEGIN)
                                           ; SOURCE LINE # 1836
                                           ; SOURCE LINE # 1837
                                           ; SOURCE LINE # 1841
0000 904E01            MOV     DPTR,#04E01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1842
000B 120000      R     LCALL   ADC_DelSig_1_StartConvert
                                           ; SOURCE LINE # 1843
000E 7F00              MOV     R7,#00H
0010 120000      R     LCALL   _ADC_DelSig_1_IsEndConversion
                                           ; SOURCE LINE # 1844
0013 120000      R     LCALL   ADC_DelSig_1_GetResult32
0016 900000      R     MOV     DPTR,#result
0019 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1845
001C 120000      R     LCALL   ADC_DelSig_1_StopConvert
                                           ; SOURCE LINE # 1847
001F 900000      R     MOV     DPTR,#result
0022 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1848
0025         ?C0093:
0025 22                RET     
             ; FUNCTION ADC_DelSig_1_Read32 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4040    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.51   ADC_DELSIG_1                                                          06/03/2019 13:54:16 PAGE 80  

   XDATA SIZE       =     25     104
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
