/* ========================================
 *
 * Copyright YOUR COMPANY, THE YEAR
 * All Rights Reserved
 * UNPUBLISHED, LICENSED SOFTWARE.
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION
 * WHICH IS THE PROPERTY OF your company.
 *
 * ========================================
*/
#ifndef _SERIALCOMMUNICATION_H   
#define _SERIALCOMMUNICATION_H   
 
    
#include "project.h" 
/*************************************************************************************************
*** CRC look-up table
*************************************************************************************************/
const char TabCRCHi[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

const char TabCRCLo[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
    0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
    0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
    0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
    0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
    0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
    0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
    0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
    0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
}; 

union
{
    unsigned char Array[2];
    
    struct
    {
        unsigned char LL    :4;
        unsigned char LH    :4;
        unsigned char HL    :4;
        unsigned char HH    :4;
    }NB4;
    
    struct
    {                               // Nibbles x 16 bits
        unsigned char Lo;           // IntL
        unsigned char Hi;           // IntH
    }Byte;
    
    struct
    {                               // BITs
        unsigned b00 :1;
        unsigned b01 :1;
        unsigned b02 :1;
        unsigned b03 :1;
        unsigned b04 :1;
        unsigned b05 :1;
        unsigned b06 :1;
        unsigned b07 :1;
        unsigned b08 :1;
        unsigned b09 :1;
        unsigned b10 :1;
        unsigned b11 :1;
        unsigned b12 :1;
        unsigned b13 :1;
        unsigned b14 :1;
        unsigned b15 :1;
    }Bit;

    signed int INTs;
    unsigned int INTu;
}CRC;
    
/*
    
1. Max Read Register 64

2. Max write Register 16

3. BT Modbus Rx Packet 128 character
	000 : $  -> Start Byte
	001 : P  -> Packet version high nibble
	002 : V  -> Packet vesion low nibble
	003 : P  -> Packet Type high nibble
	004 : T  -> Packet Type low nibble
			
	005 : T  -> Transaction Type high nibble
	006 : I  -> Transaction Type low nibble
		 TI -> Transaction Type
		 01: Modbus Scanner
		 02: Modbus Sniffer
		 03: Modbus Direct
	007 : ,  -> command seperator
	008 : B  -> Baudrate high nibble	
	009 : R  -> Baudrate low nibble
	010 : P  -> Parity high nibble
	011 : R  -> Parity low nibbble
	012 : T  -> Timeout high byte high nibble
	013 : I  -> Timeout high byte low nibble
	014 : O  -> Timeout low  byte high nibble
	015 : T  -> Timeout low  byte low nibble
	016 : R  -> Retries high nibble
	017 : T  -> Retries low nibble
	018 : R  -> Session code high
	019 : R  -> Session code low
	020 : R  -> Reserved
	021 : R  -> Reserved
	022 : R  -> Reserved
	023 : R  -> Reserved
	024 : R  -> Reserved
	025 : R  -> Reserved
	026 : ,  -> command seperator
	027 : M  -> Modbus Byte high nibble
	028 : B  -> Modbus byte low  nibble
	029 : S  -> Slave ID high nibble
	030 : I  -> Slave ID low nibble
	031 : F  -> function code high nibble
	032 : C  -> function code low nibble
	033 : S  -> Start register high byte high nibble
	034 : T  -> Start register high byte low nibble
	035 : R  -> Start register low byte high nibble
	036 : T  -> Start register low byte low nibble 
    ::: : M  -> Modbus rest packet
    ::: : M  -> Modbus rest packet
    126 : M  -> Modbus rest packet
    127 : #  -> End charter

aui8BluethoothRxArrayV2

00 : Packet version byte
01 : Packet Type
02 : Transition ID
03 : Baudrate
04 : Parity
05 : Timeout high byte
06 : Timeout low byte
07 : Retries
08 : Reserved-1
09 : Reserved-2
10 : Reserved-3
11 : Reserved-4
12 : Modbus byte
13 : slave Id
14 : function code
15 : Start Register high byte
16 : Start Register low byte
17 : Modbus Packet
::
::
62 : Modbus Packet

4. BT Modbus Tx Packet 300 character

    000 : $  -> Start Byte
    
    001 : P  -> Packet version high byte
	002 : V  -> Packet vesion low byte
	
	003 : P  -> Packet Type high nibble
	004 : T  -> Packet Type low nibble
	
	005 : T  -> Transaction ID high nibble
	006 : I  -> Transaction ID low nibble
		 TI -> Transition ID
	
	007 : ,  -> command seperator
	
	008 : M  -> Modbus slave result high byte
	009 : R  -> Modbus slave result low byte
	
	010 : M  -> Modbus Error byte's high nibble
	011 : M  -> Modbus Error byte's low nibble
	
	012 : E  -> Modbus retries byte's high nibble
	013 : M  -> Modbus retries byte's low nibble
	
	014 : T  -> TimeInms High Byte's High nibble
	015 : I  -> TimeInms High Byte's Lower nibble
	
	016 : O  -> TimeInms Low Byte's High nibble
	017 : T  -> TimeInms Low Byte's Lower nibble
	
	018 : R  -> Reserved
	019 : R  -> Reserved
	
	020 : R  -> Reserved
	021 : R  -> Reserved
	
	022 : R  -> Reserved
	023 : R  -> Reserved
	
	024 : R  -> Reserved
	025 : R  -> Reserved
	
	026 : ,  -> command seperator
	
	027 : M  -> Modbus byte count high nibble
	028 : M  -> Modbus byte count low nibble
	
	029 : M  -> Modbus response
	::: 
	:::
	:::
	300 : # end character
    
    */
#define UART_RxBuffersize   128    
#define UART_Arraysize      63 
#define UART_TxBuffersize   300
#define Modbus_Command_Size 0x08
#define StartRegisterAdd    0x64
#define EndRegisterAdd      0x92
#define TxRespErrStartindex 39
#define TxRespStartindex    223

#define Singlewriteflag     444
#define Multiplewriteflag   445

#define UART_Stringsize     128
#define UART_Startindex     00
#define UART_Endindex       127
#define Shift_8_bits        8
#define DeviceID            17
#define FunctionCode        03
#define SingleWrite         06
#define MultipleWrite       16


#define ErrorRespArraySize  05
#define Responsesize        97

#define FunctionCodeError   01
#define InvalidRegisterAdd  02
#define CRCError            03


void UART_RxChar_to_ByteConversion(void);
uint8 ASCII_to_HexConversion(char ASCIIHex[]);
void Modbuslike_Process(void);
void UART_TxOperation(char arraydata[], uint16 size);
void UART_RxOperation(uint16 size);
uint16 Uint8_to_Uint16Conversion(uint8 firstindex, uint8 lastindex);
void Modbusresponse_Generation(uint8 Responseflag);
uint16 CalculateCRC16(uint8 *MsgStartAddr, uint8 MsgLength);
void UART_TxDefault_Values(void);
void ASCII_Conversion(uint8 hexbytevalue, uint8 index);
void Modbus_Error_Response(uint8 modbusarray[] , uint8 index);
void Modbus_Response(uint16 StartAddress, uint16 RegCount);
void Check_For_Proper_Response(void);
void Modbus_Single_Write(uint16 RegAdd, uint16 value);
void Modbus_Multiple_Write();



extern void EEPROM_WriteFunction(uint16 EepromAddress);
extern void EEPROM_Read(uint16 EepromAddress , uint16 RegCount);
/*Define your macro callbacks here */
    /*For more information, refer to the Writing Code topic in the PSoC Creator Help.*/

    
#endif /* SERIALCOMMUNICATION_H */    
    
/* [] END OF FILE */
