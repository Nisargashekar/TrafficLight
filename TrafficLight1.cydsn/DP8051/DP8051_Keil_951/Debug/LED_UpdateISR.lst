C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LED_UPDATEISR
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\LED_UpdateISR.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\LED_UpdateISR.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DE
                    -BUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/LED_UpdateISR.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\LED_Upda
                    -teISR.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LED_UpdateISR.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          
  19          #include <cydevice_trm.h>
  20          #include <CyLib.h>
  21          #include <LED_UpdateISR.h>
  22          #include "cyapicallbacks.h"
  23          
  24          #if !defined(LED_UpdateISR__REMOVED) /* Check for removal by optimization */
  25          
  26          /*******************************************************************************
  27          *  Place your includes, defines and code here 
  28          ********************************************************************************/
  29          /* `#START LED_UpdateISR_intc` */
  30          extern uint8 TimeInState;
  31          //extern uint8 Ftimer;
  32          //extern uint8 Rtimer;
  33          //extern uint8 Dtimer;
  34          //extern uint8 Ltimer;
  35          //extern uint8 FtimerFlag;
  36          //extern uint8 RtimerFlag;
  37          //extern uint8 DtimerFlag;
  38          //extern uint8 LtimerFlag;
  39          //void LCD_Print();
  40          //#include<LCD.h>
  41          //#include<main.c>
  42          /* `#END` */
  43          
  44          
  45          /*******************************************************************************
  46          * Function Name: LED_UpdateISR_Start
  47          ********************************************************************************
  48          *
  49          * Summary:
  50          *  Set up the interrupt and enable it. This function disables the interrupt, 
  51          *  sets the default interrupt vector, sets the priority from the value in the
  52          *  Design Wide Resources Interrupt Editor, then enables the interrupt to the 
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 2   

  53          *  interrupt controller.
  54          *
  55          * Parameters:  
  56          *   None
  57          *
  58          * Return:
  59          *   None
  60          *
  61          *******************************************************************************/
  62          void LED_UpdateISR_Start(void) 
  63          {
  64   1          /* For all we know the interrupt is active. */
  65   1          LED_UpdateISR_Disable();
  66   1      
  67   1          /* Set the ISR to point to the LED_UpdateISR Interrupt. */
  68   1          LED_UpdateISR_SetVector(&LED_UpdateISR_Interrupt);
  69   1      
  70   1          /* Set the priority. */
  71   1          LED_UpdateISR_SetPriority((uint8)LED_UpdateISR_INTC_PRIOR_NUMBER);
  72   1      
  73   1          /* Enable it. */
  74   1          LED_UpdateISR_Enable();
  75   1      }
  76          
  77          
  78          /*******************************************************************************
  79          * Function Name: LED_UpdateISR_StartEx
  80          ********************************************************************************
  81          *
  82          * Summary:
  83          *  Sets up the interrupt and enables it. This function disables the interrupt,
  84          *  sets the interrupt vector based on the address passed in, sets the priority 
  85          *  from the value in the Design Wide Resources Interrupt Editor, then enables 
  86          *  the interrupt to the interrupt controller.
  87          *  
  88          *  When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
  89          *  used to provide consistent definition across compilers:
  90          *  
  91          *  Function definition example:
  92          *   CY_ISR(MyISR)
  93          *   {
  94          *   }
  95          *   Function prototype example:
  96          *   CY_ISR_PROTO(MyISR);
  97          *
  98          * Parameters:  
  99          *   address: Address of the ISR to set in the interrupt vector table.
 100          *
 101          * Return:
 102          *   None
 103          *
 104          *******************************************************************************/
 105          void LED_UpdateISR_StartEx(cyisraddress address) 
 106          {
 107   1          /* For all we know the interrupt is active. */
 108   1          LED_UpdateISR_Disable();
 109   1      
 110   1          /* Set the ISR to point to the LED_UpdateISR Interrupt. */
 111   1          LED_UpdateISR_SetVector(address);
 112   1      
 113   1          /* Set the priority. */
 114   1          LED_UpdateISR_SetPriority((uint8)LED_UpdateISR_INTC_PRIOR_NUMBER);
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 3   

 115   1      
 116   1          /* Enable it. */
 117   1          LED_UpdateISR_Enable();
 118   1      }
 119          
 120          
 121          /*******************************************************************************
 122          * Function Name: LED_UpdateISR_Stop
 123          ********************************************************************************
 124          *
 125          * Summary:
 126          *   Disables and removes the interrupt.
 127          *
 128          * Parameters:  
 129          *   None
 130          *
 131          * Return:
 132          *   None
 133          *
 134          *******************************************************************************/
 135          void LED_UpdateISR_Stop(void) 
 136          {
 137   1          /* Disable this interrupt. */
 138   1          LED_UpdateISR_Disable();
 139   1      }
 140          
 141          
 142          /*******************************************************************************
 143          * Function Name: LED_UpdateISR_Interrupt
 144          ********************************************************************************
 145          *
 146          * Summary:
 147          *   The default Interrupt Service Routine for LED_UpdateISR.
 148          *
 149          *   Add custom code between the START and END comments to keep the next version
 150          *   of this file from over-writing your code.
 151          *
 152          *   Note You may use either the default ISR by using this API, or you may define
 153          *   your own separate ISR through ISR_StartEx().
 154          *
 155          * Parameters:  
 156          *   None
 157          *
 158          * Return:
 159          *   None
 160          *
 161          *******************************************************************************/
 162          CY_ISR(LED_UpdateISR_Interrupt)
 163          {
 164   1          #ifdef LED_UpdateISR_INTERRUPT_INTERRUPT_CALLBACK
                      LED_UpdateISR_Interrupt_InterruptCallback();
                  #endif /* LED_UpdateISR_INTERRUPT_INTERRUPT_CALLBACK */
 167   1      
 168   1          /*  Place your Interrupt code here. */
 169   1          /* `#START LED_UpdateISR_Interrupt` */
 170   1           ++TimeInState;
 171   1          
 172   1      //    if(FtimerFlag == 1){
 173   1      //        ++Ftimer;
 174   1      //    }else if(FtimerFlag == 2){
 175   1      //        //Ftimer = 0;
 176   1      //        ++Ftimer;
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 4   

 177   1      //    }
 178   1      //    if(RtimerFlag == 1){
 179   1      //        ++Rtimer;
 180   1      //    }else if(RtimerFlag == 2){
 181   1      //       // Rtimer = 0;
 182   1      //        ++Rtimer;
 183   1      //    }if(DtimerFlag == 1){
 184   1      //        ++Dtimer;
 185   1      //    }else if(DtimerFlag == 2){
 186   1      //        //Dtimer = 0;
 187   1      //        ++Dtimer;
 188   1      //    }if(LtimerFlag == 1){
 189   1      //        ++Ltimer;
 190   1      //    }else if(LtimerFlag == 2){
 191   1      //        //Ltimer = 0;
 192   1      //        ++Ltimer;
 193   1      //    }
 194   1      //    
 195   1      //     LCD_Print();
 196   1          /* `#END` */
 197   1      
 198   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 199   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 200   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (LED_UpdateISR__ES2_PATCH ))      
                          LED_UpdateISR_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 203   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 204   1      }
 205          
 206          
 207          /*******************************************************************************
 208          * Function Name: LED_UpdateISR_SetVector
 209          ********************************************************************************
 210          *
 211          * Summary:
 212          *   Change the ISR vector for the Interrupt. Note calling LED_UpdateISR_Start
 213          *   will override any effect this method would have had. To set the vector 
 214          *   before the component has been started use LED_UpdateISR_StartEx instead.
 215          * 
 216          *   When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
 217          *   used to provide consistent definition across compilers:
 218          *
 219          *   Function definition example:
 220          *   CY_ISR(MyISR)
 221          *   {
 222          *   }
 223          *
 224          *   Function prototype example:
 225          *     CY_ISR_PROTO(MyISR);
 226          *
 227          * Parameters:
 228          *   address: Address of the ISR to set in the interrupt vector table.
 229          *
 230          * Return:
 231          *   None
 232          *
 233          *******************************************************************************/
 234          void LED_UpdateISR_SetVector(cyisraddress address) 
 235          {
 236   1          CY_SET_REG16(LED_UpdateISR_INTC_VECTOR, (uint16) address);
 237   1      }
 238          
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 5   

 239          
 240          /*******************************************************************************
 241          * Function Name: LED_UpdateISR_GetVector
 242          ********************************************************************************
 243          *
 244          * Summary:
 245          *   Gets the "address" of the current ISR vector for the Interrupt.
 246          *
 247          * Parameters:
 248          *   None
 249          *
 250          * Return:
 251          *   Address of the ISR in the interrupt vector table.
 252          *
 253          *******************************************************************************/
 254          cyisraddress LED_UpdateISR_GetVector(void) 
 255          {
 256   1          return (cyisraddress) CY_GET_REG16(LED_UpdateISR_INTC_VECTOR);
 257   1      }
 258          
 259          
 260          /*******************************************************************************
 261          * Function Name: LED_UpdateISR_SetPriority
 262          ********************************************************************************
 263          *
 264          * Summary:
 265          *   Sets the Priority of the Interrupt. 
 266          *
 267          *   Note calling LED_UpdateISR_Start or LED_UpdateISR_StartEx will 
 268          *   override any effect this API would have had. This API should only be called
 269          *   after LED_UpdateISR_Start or LED_UpdateISR_StartEx has been called. 
 270          *   To set the initial priority for the component, use the Design-Wide Resources
 271          *   Interrupt Editor.
 272          *
 273          *   Note This API has no effect on Non-maskable interrupt NMI).
 274          *
 275          * Parameters:
 276          *   priority: Priority of the interrupt, 0 being the highest priority
 277          *             PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 278          *             PSoC 4: Priority is from 0 to 3.
 279          *
 280          * Return:
 281          *   None
 282          *
 283          *******************************************************************************/
 284          void LED_UpdateISR_SetPriority(uint8 priority) 
 285          {
 286   1          *LED_UpdateISR_INTC_PRIOR = priority << 5;
 287   1      }
 288          
 289          
 290          /*******************************************************************************
 291          * Function Name: LED_UpdateISR_GetPriority
 292          ********************************************************************************
 293          *
 294          * Summary:
 295          *   Gets the Priority of the Interrupt.
 296          *
 297          * Parameters:
 298          *   None
 299          *
 300          * Return:
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 6   

 301          *   Priority of the interrupt, 0 being the highest priority
 302          *    PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 303          *    PSoC 4: Priority is from 0 to 3.
 304          *
 305          *******************************************************************************/
 306          uint8 LED_UpdateISR_GetPriority(void) 
 307          {
 308   1          uint8 priority;
 309   1      
 310   1      
 311   1          priority = *LED_UpdateISR_INTC_PRIOR >> 5;
 312   1      
 313   1          return priority;
 314   1      }
 315          
 316          
 317          /*******************************************************************************
 318          * Function Name: LED_UpdateISR_Enable
 319          ********************************************************************************
 320          *
 321          * Summary:
 322          *   Enables the interrupt to the interrupt controller. Do not call this function
 323          *   unless ISR_Start() has been called or the functionality of the ISR_Start() 
 324          *   function, which sets the vector and the priority, has been called.
 325          *
 326          * Parameters:
 327          *   None
 328          *
 329          * Return:
 330          *   None
 331          *
 332          *******************************************************************************/
 333          void LED_UpdateISR_Enable(void) 
 334          {
 335   1          /* Enable the general interrupt. */
 336   1          *LED_UpdateISR_INTC_SET_EN = LED_UpdateISR__INTC_MASK;
 337   1      }
 338          
 339          
 340          /*******************************************************************************
 341          * Function Name: LED_UpdateISR_GetState
 342          ********************************************************************************
 343          *
 344          * Summary:
 345          *   Gets the state (enabled, disabled) of the Interrupt.
 346          *
 347          * Parameters:
 348          *   None
 349          *
 350          * Return:
 351          *   1 if enabled, 0 if disabled.
 352          *
 353          *******************************************************************************/
 354          uint8 LED_UpdateISR_GetState(void) 
 355          {
 356   1          /* Get the state of the general interrupt. */
 357   1          return ((*LED_UpdateISR_INTC_SET_EN & (uint8)LED_UpdateISR__INTC_MASK) != 0u) ? 1u:0u;
 358   1      }
 359          
 360          
 361          /*******************************************************************************
 362          * Function Name: LED_UpdateISR_Disable
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 7   

 363          ********************************************************************************
 364          *
 365          * Summary:
 366          *   Disables the Interrupt in the interrupt controller.
 367          *
 368          * Parameters:
 369          *   None
 370          *
 371          * Return:
 372          *   None
 373          *
 374          *******************************************************************************/
 375          void LED_UpdateISR_Disable(void) 
 376          {
 377   1          /* Disable the general interrupt. */
 378   1          *LED_UpdateISR_INTC_CLR_EN = LED_UpdateISR__INTC_MASK;
 379   1      }
 380          
 381          
 382          /*******************************************************************************
 383          * Function Name: LED_UpdateISR_SetPending
 384          ********************************************************************************
 385          *
 386          * Summary:
 387          *   Causes the Interrupt to enter the pending state, a software method of
 388          *   generating the interrupt.
 389          *
 390          * Parameters:
 391          *   None
 392          *
 393          * Return:
 394          *   None
 395          *
 396          * Side Effects:
 397          *   If interrupts are enabled and the interrupt is set up properly, the ISR is
 398          *   entered (depending on the priority of this interrupt and other pending 
 399          *   interrupts).
 400          *
 401          *******************************************************************************/
 402          void LED_UpdateISR_SetPending(void) 
 403          {
 404   1          *LED_UpdateISR_INTC_SET_PD = LED_UpdateISR__INTC_MASK;
 405   1      }
 406          
 407          
 408          /*******************************************************************************
 409          * Function Name: LED_UpdateISR_ClearPending
 410          ********************************************************************************
 411          *
 412          * Summary:
 413          *   Clears a pending interrupt in the interrupt controller.
 414          *
 415          *   Note Some interrupt sources are clear-on-read and require the block 
 416          *   interrupt/status register to be read/cleared with the appropriate block API 
 417          *   (GPIO, UART, and so on). Otherwise the ISR will continue to remain in 
 418          *   pending state even though the interrupt itself is cleared using this API.
 419          *
 420          * Parameters:
 421          *   None
 422          *
 423          * Return:
 424          *   None
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 8   

 425          *
 426          *******************************************************************************/
 427          void LED_UpdateISR_ClearPending(void) 
 428          {
 429   1          *LED_UpdateISR_INTC_CLR_PD = LED_UpdateISR__INTC_MASK;
 430   1      }
 431          
 432          #endif /* End check for removal by optimization */
 433          
 434          
 435          /* [] END OF FILE */
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LED_UpdateISR_Start (BEGIN)
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 65
0000 120000      R     LCALL   LED_UpdateISR_Disable
                                           ; SOURCE LINE # 68
0003 7E00        R     MOV     R6,#HIGH LED_UpdateISR_Interrupt
0005 7F00        R     MOV     R7,#LOW LED_UpdateISR_Interrupt
0007 120000      R     LCALL   _LED_UpdateISR_SetVector
                                           ; SOURCE LINE # 71
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _LED_UpdateISR_SetPriority
                                           ; SOURCE LINE # 74
000F 120000      R     LCALL   LED_UpdateISR_Enable
                                           ; SOURCE LINE # 75
0012 22                RET     
             ; FUNCTION LED_UpdateISR_Start (END)

             ; FUNCTION _LED_UpdateISR_StartEx (BEGIN)
                                           ; SOURCE LINE # 105
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 108
0008 120000      R     LCALL   LED_UpdateISR_Disable
                                           ; SOURCE LINE # 111
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _LED_UpdateISR_SetVector
                                           ; SOURCE LINE # 114
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _LED_UpdateISR_SetPriority
                                           ; SOURCE LINE # 117
001B 120000      R     LCALL   LED_UpdateISR_Enable
                                           ; SOURCE LINE # 118
001E 22                RET     
             ; FUNCTION _LED_UpdateISR_StartEx (END)

             ; FUNCTION LED_UpdateISR_Stop (BEGIN)
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 138
0000 120000      R     LCALL   LED_UpdateISR_Disable
                                           ; SOURCE LINE # 139
0003 22                RET     
             ; FUNCTION LED_UpdateISR_Stop (END)

             ; FUNCTION LED_UpdateISR_Interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 10  

0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 170
0014 900000      E     MOV     DPTR,#TimeInState
0017 E0                MOVX    A,@DPTR
0018 04                INC     A
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
001A D000        E     POP     ?C?XPAGE1SFR
001C D086              POP     DPS
001E D084              POP     DPL1
0020 D085              POP     DPH1
0022 D082              POP     DPL
0024 D083              POP     DPH
0026 D0E0              POP     ACC
0028 32                RETI    
             ; FUNCTION LED_UpdateISR_Interrupt (END)

             ; FUNCTION _LED_UpdateISR_SetVector (BEGIN)
                                           ; SOURCE LINE # 234
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7900              MOV     R1,#00H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 237
001D 22                RET     
             ; FUNCTION _LED_UpdateISR_SetVector (END)

             ; FUNCTION LED_UpdateISR_GetVector (BEGIN)
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7900              MOV     R1,#00H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 257
0009         ?C0006:
0009 22                RET     
             ; FUNCTION LED_UpdateISR_GetVector (END)

C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 11  

             ; FUNCTION _LED_UpdateISR_SetPriority (BEGIN)
                                           ; SOURCE LINE # 284
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904480            MOV     DPTR,#04480H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0015 22                RET     
             ; FUNCTION _LED_UpdateISR_SetPriority (END)

             ; FUNCTION LED_UpdateISR_GetPriority (BEGIN)
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 311
0000 904480            MOV     DPTR,#04480H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 314
0015         ?C0008:
0015 22                RET     
             ; FUNCTION LED_UpdateISR_GetPriority (END)

             ; FUNCTION LED_UpdateISR_Enable (BEGIN)
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 336
0000 9044C0            MOV     DPTR,#044C0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
0006 22                RET     
             ; FUNCTION LED_UpdateISR_Enable (END)

             ; FUNCTION LED_UpdateISR_GetState (BEGIN)
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 357
0000 9044C0            MOV     DPTR,#044C0H
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 12  

0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E004            JNB     ACC.0,?C0010
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0011
000D         ?C0010:
000D 7F00              MOV     R7,#00H
000F         ?C0011:
                                           ; SOURCE LINE # 358
000F         ?C0012:
000F 22                RET     
             ; FUNCTION LED_UpdateISR_GetState (END)

             ; FUNCTION LED_UpdateISR_Disable (BEGIN)
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 378
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0006 22                RET     
             ; FUNCTION LED_UpdateISR_Disable (END)

             ; FUNCTION LED_UpdateISR_SetPending (BEGIN)
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 404
0000 9044D0            MOV     DPTR,#044D0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
0006 22                RET     
             ; FUNCTION LED_UpdateISR_SetPending (END)

             ; FUNCTION LED_UpdateISR_ClearPending (BEGIN)
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
0000 9044D8            MOV     DPTR,#044D8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
0006 22                RET     
             ; FUNCTION LED_UpdateISR_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    223    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.51   LED_UPDATEISR                                                         04/12/2019 13:07:37 PAGE 13  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
