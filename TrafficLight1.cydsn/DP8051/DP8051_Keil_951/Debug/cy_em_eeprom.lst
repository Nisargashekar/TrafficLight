C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CY_EM_EEPROM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cy_em_eeprom.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cy_em_eeprom.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEB
                    -UG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/cy_em_eeprom.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\cy_em_eepr
                    -om.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file cy_em_eeprom.c
   3          * \version 2.20
   4          *
   5          * \brief
   6          *  This file provides source code of the API for the Emulated EEPROM library.
   7          *  The Emulated EEPROM API allows creating of an emulated EEPROM in flash that
   8          *  has the ability to do wear leveling and restore corrupted data from a
   9          *  redundant copy.
  10          *
  11          ********************************************************************************
  12          * \copyright
  13          * Copyright 2017, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          
  20          #include "cytypes.h"
  21          #include <string.h>
  22          
  23          #if (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC6)
                  #include "em_eeprom/cy_em_eeprom.h"
              #else
  26              #include "cy_em_eeprom.h"
  27          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC6) */
  28          
  29          
  30          #if defined(__cplusplus)
              extern "C" {
              #endif
  33          
  34          
  35          /***************************************
  36          * Private Function Prototypes
  37          ***************************************/
  38          static void FindLastWrittenRow(uint32 * lastWrRowPtr, cy_stc_eeprom_context_t * context);
  39          static uint32 GetRowAddrBySeqNum(uint32 seqNum, cy_stc_eeprom_context_t * context);
  40          static uint8 CalcChecksum(uint8 rowData[], uint32 len);
  41          static void GetNextRowToWrite(uint32 seqNum,
  42                                      uint32 * rowToWrPtr,
  43                                      uint32 * rowToRdPtr,
  44                                      cy_stc_eeprom_context_t * context);
  45          static cy_en_em_eeprom_status_t CheckRanges(cy_stc_eeprom_config_t* config);
  46          static cy_en_em_eeprom_status_t WriteRow(uint32 rowAddr, uint32 *rowData, cy_stc_eeprom_context_t * contex
             -t);
  47          static cy_en_em_eeprom_status_t EraseRow(uint32 rowAddr, uint32 ramBuffAddr, cy_stc_eeprom_context_t * con
             -text);
  48          static cy_en_em_eeprom_status_t CheckCrcAndCopy(uint32 startAddr,
  49                                                          uint32 dstAddr,
  50                                                          uint32 rowOffset,
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 2   

  51                                                          uint32 numBytes,
  52                                                          cy_stc_eeprom_context_t * context);
  53          static uint32 GetAddresses(uint32 *startAddr, uint32 *endAddr, uint32 *offset, uint32 rowNum, uint32 addr,
             - uint32 len);
  54          static cy_en_em_eeprom_status_t FillChecksum(cy_stc_eeprom_context_t * context);
  55          
  56          /**
  57          * \addtogroup group_em_eeprom_functions
  58          * \{
  59          */
  60          
  61          /*******************************************************************************
  62          * Function Name: Cy_Em_EEPROM_Init
  63          ****************************************************************************//**
  64          *
  65          * Initializes the Emulated EEPROM library by filling the context structure. 
  66          *
  67          * \param config
  68          * The pointer to a configuration structure. See \ref cy_stc_eeprom_config_t.
  69          *
  70          * \param context
  71          * The pointer to the EEPROM context structure to be filled by the function.
  72          * \ref cy_stc_eeprom_context_t.
  73          *
  74          * \return
  75          * error / status code. See \ref cy_en_em_eeprom_status_t.
  76          *
  77          * \note
  78          * The context structure should not be modified by the user after it is filled
  79          * with this function. Modification of context structure may cause the 
  80          * unexpected behavior of the Cy_Em_EEPROM API functions which rely on it.
  81          *
  82          * \note
  83          * This function uses a buffer of the flash row size to perform read
  84          * operation. For the size of the row refer to the specific PSoC device
  85          * datasheet.
  86          *
  87          * \sideeffect 
  88          * If the "Redundant Copy" option is used, the function performs a number of 
  89          * write operations to the EEPROM to initialize flash rows checksums. Therefore,
  90          * Cy_Em_EEPROM_NumWrites(), when it is called right after Cy_Em_EEPROM_Init(), 
  91          * will return a non-zero value that identifies the number of writes performed 
  92          * by Cy_Em_EEPROM_Init().
  93          *
  94          *******************************************************************************/
  95          cy_en_em_eeprom_status_t Cy_Em_EEPROM_Init(cy_stc_eeprom_config_t* config, cy_stc_eeprom_context_t * conte
             -xt)
  96          {
  97   1          cy_en_em_eeprom_status_t ret = CY_EM_EEPROM_BAD_PARAM;
  98   1      
  99   1          if((NULL != context) && (NULL != config) && (NULL != ((uint32 *)config->userFlashStartAddr)) &&
 100   1              (config->wearLevelingFactor <= CY_EM_EEPROM_MAX_WEAR_LEVELING_FACTOR) && (config->eepromSize != 0u
             -))
 101   1          {
 102   2              ret = CheckRanges(config);
 103   2      
 104   2              if(CY_EM_EEPROM_SUCCESS == ret)
 105   2              {
 106   3                  /* Copy the user config structure fields into context */
 107   3                  context->eepromSize = config->eepromSize;
 108   3                  context->wearLevelingFactor = config->wearLevelingFactor;
 109   3                  context->redundantCopy = config->redundantCopy;
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 3   

 110   3                  context->blockingWrite = config->blockingWrite;
 111   3                  context->userFlashStartAddr = config->userFlashStartAddr;
 112   3                  /* Store frequently used data for internal use */
 113   3                  context->numberOfRows = CY_EM_EEPROM_GET_NUM_ROWS_IN_EEPROM(config->eepromSize);
 114   3                  context->wlEndAddr = ((CY_EM_EEPROM_GET_EEPROM_SIZE(context->numberOfRows) * config->wearLevel
             -ingFactor) +
 115   3                          config->userFlashStartAddr);
 116   3                  /* Find last written EEPROM row and store it for quick access */
 117   3                  FindLastWrittenRow(&context->lastWrRowAddr, context);
 118   3      
 119   3                  if((0u == CY_EM_EEPROM_GET_SEQ_NUM(context->lastWrRowAddr)) && (0u != context->redundantCopy))
 120   3                  {
 121   4                      /* Call the function only after device reprogramming in case
 122   4                      * if redundant copy is enabled.
 123   4                      */
 124   4                      ret = FillChecksum(context);
 125   4                      
 126   4                      /* Update the last written EEPROM row for Cy_Em_EEPROM_NumWrites() */
 127   4                      FindLastWrittenRow(&context->lastWrRowAddr, context);
 128   4                  }
 129   3              }
 130   2          }
 131   1      
 132   1          return(ret);
 133   1      }
 134          
 135          
 136          /*******************************************************************************
 137          * Function Name: Cy_Em_EEPROM_Read
 138          ****************************************************************************//**
 139          *
 140          * This function takes the logical EEPROM address, converts it to the actual
 141          * physical address where the data is stored and returns the data to the user.
 142          *
 143          * \param addr
 144          * The logical start address in EEPROM to start reading data from.
 145          *
 146          * \param eepromData
 147          * The pointer to a user array to write data to.
 148          *
 149          * \param size
 150          * The amount of data to read.
 151          *
 152          * \param context
 153          * The pointer to the EEPROM context structure \ref cy_stc_eeprom_context_t.
 154          *
 155          * \return
 156          * This function returns \ref cy_en_em_eeprom_status_t.
 157          *
 158          * \note
 159          * This function uses a buffer of the flash row size to perform read
 160          * operation. For the size of the row refer to the specific PSoC device
 161          * datasheet.
 162          *
 163          * \note
 164          * In case if redundant copy option is enabled the function may perform writes
 165          * to EEPROM. This is done in case if the data in the EEPPROM is corrupted and
 166          * the data in redundant copy is valid based on CRC-8 data integrity check.
 167          *
 168          *******************************************************************************/
 169          cy_en_em_eeprom_status_t Cy_Em_EEPROM_Read(uint32 addr, 
 170                                                  void * eepromData, 
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 4   

 171                                                  uint32 size,
 172                                                  cy_stc_eeprom_context_t * context)
 173          {
 174   1          cy_en_em_eeprom_status_t ret = CY_EM_EEPROM_BAD_PARAM;
 175   1          uint32 i;
 176   1          uint32 numBytesToRead;
 177   1          uint32 curEepromBaseAddr;
 178   1          uint32 curRowOffset;
 179   1          uint32 startRowAddr;
 180   1          uint32 actEepromRowNum;
 181   1          uint32 curRdEepromRowNum = 0u;
 182   1          uint32 dataStartEepromRowNum = 0u;
 183   1          uint32 eeData = (uint32) eepromData; /* To avoid the pointer arithmetic with void */
 184   1      
 185   1          /* Validate input parameters */
 186   1          if((0u != size) && ((addr + size) <= (context->eepromSize)) && (NULL != eepromData))
 187   1          {
 188   2              uint32 rdAddr = addr;
 189   2              uint32 rdSize = size;
 190   2              /* Get the sequence number of the last written row */
 191   2              uint32 seqNum = CY_EM_EEPROM_GET_SEQ_NUM(context->lastWrRowAddr);
 192   2              uint32 updateAddrFlag = 0u;
 193   2      
 194   2              /* Calculate the number of the row read operations. Currently this only concerns
 195   2              * the reads from the EEPROM data locations.
 196   2              */
 197   2              uint32 numRowReads = ((((rdAddr + rdSize) - 1u) / CY_EM_EEPROM_EEPROM_DATA_LEN) -
 198   2                                    (rdAddr / CY_EM_EEPROM_EEPROM_DATA_LEN)) + 1u;
 199   2      
 200   2              /* Get the address of the first row of the currently active EEPROM sector. If
 201   2              * no wear leveling is used - the EEPROM has only one sector, so use the base
 202   2              * addr stored in "context->userFlashStartAddr".
 203   2              */
 204   2              curEepromBaseAddr = (((context->lastWrRowAddr - context->userFlashStartAddr) /
 205   2                                    (CY_EM_EEPROM_FLASH_SIZEOF_ROW * context->numberOfRows)) *
 206   2                                    (CY_EM_EEPROM_FLASH_SIZEOF_ROW * context->numberOfRows)) +
 207   2                                     context->userFlashStartAddr;
 208   2      
 209   2              /* Find the number of the row that contains the start address of the data */
 210   2              for(i = 0u; i < context->numberOfRows; i++)
 211   2              {
 212   3                  if(0u != CY_EM_EEPROM_IS_ADDR_IN_ROW_RANGE(rdAddr, i))
 213   3                  {
 214   4                      dataStartEepromRowNum = i;
 215   4                      curRdEepromRowNum = dataStartEepromRowNum;
 216   4                      break;
 217   4                  }
 218   3              }
 219   2      
 220   2              /* Find the row number of the last written row */
 221   2              actEepromRowNum = (context->lastWrRowAddr - curEepromBaseAddr) / CY_EM_EEPROM_FLASH_SIZEOF_ROW;
 222   2      
 223   2              /* Check if wear leveling is used */
 224   2              if(context->wearLevelingFactor > 1u)
 225   2              {
 226   3                  uint32 dataEndEepromRowNum = dataStartEepromRowNum + (numRowReads - 1u);
 227   3      
 228   3                  /* Check if the future validation of the read address is required. */
 229   3                  updateAddrFlag = (dataStartEepromRowNum > actEepromRowNum) ? 1u :
 230   3                                    ((dataEndEepromRowNum > actEepromRowNum) ? 1u : 0u);
 231   3              }
 232   2      
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 5   

 233   2              /* Copy data from the EEPROM data locations to the user buffer */
 234   2              for(i = 0u; i < numRowReads; i++)
 235   2              {
 236   3                  startRowAddr = curEepromBaseAddr + (curRdEepromRowNum * CY_EM_EEPROM_FLASH_SIZEOF_ROW);
 237   3                  curRowOffset = CY_EM_EEPROM_EEPROM_DATA_LEN + (rdAddr % CY_EM_EEPROM_EEPROM_DATA_LEN);
 238   3      
 239   3                  /* Check if there are more reads pending and update the number of the
 240   3                  * remaining bytes to read respectively.
 241   3                  */
 242   3                  if((i + 1u) < numRowReads)
 243   3                  {
 244   4                      numBytesToRead = CY_EM_EEPROM_EEPROM_DATA_LEN - (rdAddr % CY_EM_EEPROM_EEPROM_DATA_LEN);
 245   4                  }
 246   3                  else
 247   3                  {
 248   4                      numBytesToRead = rdSize;
 249   4                  }
 250   3      
 251   3                  /* Check if the read address needs to be updated to point to the correct
 252   3                  * EEPROM sector.
 253   3                  */
 254   3                  if((0u != updateAddrFlag) && (curRdEepromRowNum > actEepromRowNum))
 255   3                  {
 256   4                      startRowAddr -= context->numberOfRows * CY_EM_EEPROM_FLASH_SIZEOF_ROW;
 257   4      
 258   4                      if(startRowAddr < context->userFlashStartAddr)
 259   4                      {
 260   5                          startRowAddr = context->wlEndAddr -
 261   5                              ((context->numberOfRows - curRdEepromRowNum) * CY_EM_EEPROM_FLASH_SIZEOF_ROW);
 262   5                      }
 263   4                  }
 264   3      
 265   3                  if(0u != context->redundantCopy)
 266   3                  {
 267   4                      /* Check a checksum of the EEPROM row and if it is bad, check a checksum in
 268   4                      * the corresponding row in redundant copy, otherwise return failure.
 269   4                      */
 270   4                      ret = CheckCrcAndCopy(startRowAddr, eeData, curRowOffset, numBytesToRead, context);
 271   4      
 272   4                      if(CY_EM_EEPROM_SUCCESS != ret)
 273   4                      {
 274   5                          break;
 275   5                      }
 276   4                  }
 277   3                  else
 278   3                  {
 279   4                      /* Copy the data to the user buffer */
 280   4                      (void)memcpy((void *)(eeData),
 281   4                                   (void *)(startRowAddr + curRowOffset),
 282   4                                   numBytesToRead);
 283   4      
 284   4                      /* Indicate success to be able to execute next code block */
 285   4                      ret = CY_EM_EEPROM_SUCCESS;
 286   4                  }
 287   3      
 288   3                  /* Update variables anticipated in the read operation */
 289   3                  rdAddr += numBytesToRead;
 290   3                  rdSize -= numBytesToRead;
 291   3                  eeData += numBytesToRead;
 292   3                  curRdEepromRowNum++;
 293   3              }
 294   2      
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 6   

 295   2              /* This code block will copy the latest data from the EEPROM headers into the
 296   2              * user buffer. The data previously copied into the user buffer may be updated
 297   2              * as the EEPROM headers contain more recent data. 
 298   2              * The code block is executed when two following conditions are true:
 299   2              *  1) The reads from "historic" data locations were successful;
 300   2              *  2) The user performed at least one write operation to Em_EEPROM (0u !=
 301   2              *     seqNum).        
 302   2              */
 303   2              if((CY_EM_EEPROM_SUCCESS == ret) && (0u != seqNum))
 304   2              {
 305   3                  numRowReads = (context->numberOfRows <= seqNum) ? (context->numberOfRows) : (seqNum);
 306   3                  numRowReads--;
 307   3      
 308   3                  for(i = (seqNum - numRowReads); i <= seqNum; i++)
 309   3                  {
 310   4                      startRowAddr = GetRowAddrBySeqNum(i, context);
 311   4      
 312   4                      if (0u != startRowAddr)
 313   4                      {
 314   5                          /* The following variables are introduced to increase code readability. */
 315   5                          uint32 startAddr  = *(uint32 *)(startRowAddr + CY_EM_EEPROM_HEADER_ADDR_OFFSET);
 316   5                          uint32 endAddr    = startAddr + (*(uint32 *)(startRowAddr + CY_EM_EEPROM_HEADER_LEN_OF
             -FSET));
 317   5      
 318   5                          /* Check if the current row EEPROM header contains the data requested for read */
 319   5                          if(0u != CY_EM_EEPROM_IS_ADDRESES_CROSSING(startAddr, endAddr, addr, addr + size))
 320   5                          {
 321   6                              uint32 srcOffset = (startAddr > addr) ? (0u) : (addr - startAddr);
 322   6                              uint32 dstOffset = (startAddr > addr) ? (startAddr - addr): (0u);
 323   6                              rdAddr = (startAddr > addr) ? (startAddr) : (addr);
 324   6      
 325   6                              srcOffset += CY_EM_EEPROM_HEADER_DATA_OFFSET;
 326   6      
 327   6                              /* Calculate the number of bytes to be read from the current row's EEPROM header *
             -/
 328   6                              numBytesToRead = ((endAddr < (addr + size)) ? endAddr : (addr + size)) - rdAddr;
 329   6      
 330   6                              /* Calculate the offset in the user buffer from which the data will be updated. */
 331   6                              eeData = ((uint32)eepromData) + dstOffset;
 332   6      
 333   6                              /* Check a checksum of the EEPROM row and if it is bad, check a checksum in the
 334   6                              * corresponding row in redundant copy, otherwise return failure. Copy the data
 335   6                              * from the recent EEPROM headers to the user buffer. This will overwrite the
 336   6                              * data copied form EEPROM data locations as the data in EEPROM headers is newer.
 337   6                              */
 338   6                              if(0u != context->redundantCopy)
 339   6                              {
 340   7                                  ret = CheckCrcAndCopy(startRowAddr, eeData, srcOffset, numBytesToRead, context
             -);
 341   7      
 342   7                                  if(CY_EM_EEPROM_SUCCESS != ret)
 343   7                                  {
 344   8                                      break;
 345   8                                  }
 346   7                              }
 347   6                              else
 348   6                              {
 349   7                                  (void)memcpy((void *)(eeData), (void *)(startRowAddr + srcOffset), numBytesToR
             -ead);
 350   7                              }
 351   6                          }
 352   5                      }
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 7   

 353   4                  }
 354   3              }
 355   2          }
 356   1      
 357   1          return(ret);
 358   1      }
 359          
 360          
 361          /*******************************************************************************
 362          * Function Name: Cy_Em_EEPROM_Write
 363          ****************************************************************************//**
 364          *
 365          * This function takes the logical EEPROM address and converts it to the actual
 366          * physical address and writes data there. If wear leveling is implemented, the
 367          * writing process will use the wear leveling techniques. This is a blocking
 368          * function and it does not return until the write operation is completed. The
 369          * user firmware should not enter Hibernate mode until write is completed. The
 370          * write operation is allowed in Sleep and Deep-Sleep modes. During the flash
 371          * operation, the device should not be reset, including the XRES pin, a software
 372          * reset, and watchdog reset sources. Also, low-voltage detect circuits should
 373          * be configured to generate an interrupt instead of a reset. Otherwise, portions
 374          * of flash may undergo unexpected changes.
 375          *
 376          * \param addr
 377          * The logical start address in EEPROM to start writing data from.
 378          *
 379          * \param eepromData
 380          * Data to write to EEPROM.
 381          *
 382          * \param size
 383          * The amount of data to write to EEPROM.
 384          *
 385          * \param context
 386          * The pointer to the EEPROM context structure \ref cy_stc_eeprom_context_t.
 387          *
 388          * \return
 389          * This function returns \ref cy_en_em_eeprom_status_t.
 390          *
 391          * \note
 392          * This function uses a buffer of the flash row size to perform write
 393          * operation. For the size of the row refer to the specific PSoC device
 394          * datasheet.
 395          *
 396          * \sideeffect
 397          * In case when blocking write option is used, if this function is called by
 398          * the CM4 the user code on CM0P and the user code on CM4 are blocked until erase
 399          * flash row operation is finished. If this function is called by the CM0P the
 400          * user code on CM4 is not blocked and the user code on CM0P is blocked until
 401          * erase flash row operation is finished. Plan your task allocation accordingly.
 402          *
 403          * \sideeffect
 404          * In case if non-blocking write option is used and when user flash is used as
 405          * an EEPROM storage care should be taken to prevent the read while write (RWW)
 406          * exception. To prevent the RWW exception the user flash macro that includes
 407          * the EEPROM storage should not be read while the EEPROM write is not completed.
 408          * The read also means the user code execution from the respective flash macro.
 409          *
 410          *******************************************************************************/
 411          cy_en_em_eeprom_status_t Cy_Em_EEPROM_Write(uint32 addr,
 412                                                      void * eepromData,
 413                                                      uint32 size,
 414                                                      cy_stc_eeprom_context_t * context)
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 8   

 415          {
 416   1          cy_en_em_eeprom_status_t ret = CY_EM_EEPROM_BAD_PARAM;
 417   1          uint32 i;
 418   1          uint32 wrCnt;
 419   1          uint32 actEmEepromRowNum;
 420   1          uint32 writeRamBuffer[CY_EM_EEPROM_FLASH_SIZEOF_ROW / CY_EM_EEPROM_U32_DIV];
 421   1          uint32 startAddr = 0u;
 422   1          uint32 endAddr = 0u;
 423   1          uint32 tmpRowAddr;
 424   1          uint32 emEepromRowAddr = context->lastWrRowAddr;
 425   1          uint32 emEepromRowRdAddr;
 426   1          void * tmpData;
 427   1          uint32 eeData = (uint32) eepromData; /* To avoid the pointer arithmetic with void */
 428   1      
 429   1          /* Check if the EEPROM data does not exceed the EEPROM capacity */
 430   1          if((0u != size) && ((addr + size) <= (context->eepromSize)) && (NULL != eepromData))
 431   1          {
 432   2              uint32 numWrites = ((size - 1u) / CY_EM_EEPROM_HEADER_DATA_LEN) + 1u;
 433   2              uint32 eeHeaderDataOffset = 0u;
 434   2      
 435   2              for(wrCnt = 0u; wrCnt < numWrites; wrCnt++)
 436   2              {
 437   3                  uint32 skipOperation = 0u;
 438   3                  /* Get the sequence number of the last written row */
 439   3                  uint32 seqNum = CY_EM_EEPROM_GET_SEQ_NUM(emEepromRowAddr);
 440   3      
 441   3                  /* Get the address of the row to be written. The "emEepromRowAddr" may be
 442   3                  * updated with the proper address (if wear leveling is used). The
 443   3                  * "emEepromRowRdAddr" will point to the row address from which the historic
 444   3                  * data will be read into the RAM buffer.
 445   3                  */
 446   3                  GetNextRowToWrite(seqNum, &emEepromRowAddr, &emEepromRowRdAddr, context);
 447   3      
 448   3                  /* Clear the RAM buffer so to not put junk into flash */
 449   3                  (void)memset(writeRamBuffer, 0, CY_EM_EEPROM_FLASH_SIZEOF_ROW);
 450   3      
 451   3                  /* Fill the EM_EEPROM header info for the row in the RAM buffer */
 452   3                  seqNum++;
 453   3                  writeRamBuffer[CY_EM_EEPROM_HEADER_SEQ_NUM_OFFSET_U32] = seqNum;
 454   3                  writeRamBuffer[CY_EM_EEPROM_HEADER_ADDR_OFFSET_U32] = addr;
 455   3                  tmpData = (void *) eeData;
 456   3      
 457   3                  /* Check if this is the last row to write */
 458   3                  if(wrCnt == (numWrites - 1u))
 459   3                  {
 460   4                      /* Fill in the remaining size value to the EEPROM header. */
 461   4                      writeRamBuffer[CY_EM_EEPROM_HEADER_LEN_OFFSET_U32] = size;
 462   4                  }
 463   3                  else
 464   3                  {
 465   4                      /* This is not the last row to write in the current EEPROM write operation.
 466   4                      * Write the maximum possible data size to the EEPROM header. Update the
 467   4                      * size, eeData and addr respectively.
 468   4                      */
 469   4                      writeRamBuffer[CY_EM_EEPROM_HEADER_LEN_OFFSET_U32] = CY_EM_EEPROM_HEADER_DATA_LEN;
 470   4                      size -= CY_EM_EEPROM_HEADER_DATA_LEN;
 471   4                      addr += CY_EM_EEPROM_HEADER_DATA_LEN;
 472   4                      eeData += CY_EM_EEPROM_HEADER_DATA_LEN;
 473   4                  }
 474   3      
 475   3                  /* Write the data to the EEPROM header */
 476   3                  (void)memcpy((void *)&writeRamBuffer[CY_EM_EEPROM_HEADER_DATA_OFFSET_U32],
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 9   

 477   3                               tmpData,
 478   3                               writeRamBuffer[CY_EM_EEPROM_HEADER_LEN_OFFSET_U32]);
 479   3      
 480   3                  if(emEepromRowRdAddr != 0UL)
 481   3                  {
 482   4                      /* Copy the EEPROM historic data for this row from flash to RAM */
 483   4                      (void)memcpy((void *)&writeRamBuffer[CY_EM_EEPROM_EEPROM_DATA_OFFSET_U32],
 484   4                                   (void *)(emEepromRowRdAddr + CY_EM_EEPROM_EEPROM_DATA_LEN),
 485   4                                   CY_EM_EEPROM_EEPROM_DATA_LEN);
 486   4                  }
 487   3      
 488   3                  /* Check if there is data for this location in other EEPROM headers:
 489   3                  * find out the row with the lowest possible sequence number which
 490   3                  * may contain the data for the current row.
 491   3                  */
 492   3                  i = (seqNum > context->numberOfRows) ? ((seqNum - (context->numberOfRows)) + 1u) : 1u;
 493   3      
 494   3                  for(; i <= seqNum; i++)
 495   3                  {
 496   4                      if(i == seqNum)
 497   4                      {
 498   5                          /* The code reached the row that is about to be written. Analyze the recently
 499   5                          * created EEPROM header (stored in the RAM buffer currently): if it contains
 500   5                          * the data for EEPROM data locations in the row that is about to be written.
 501   5                          */
 502   5                          tmpRowAddr = (uint32) writeRamBuffer;
 503   5                      }
 504   4                      else
 505   4                      {
 506   5                          /* Retrieve the address of the previously written row by its sequence number.
 507   5                          * The pointer will be used to get data from the respective EEPROM header.
 508   5                          */
 509   5                          tmpRowAddr = GetRowAddrBySeqNum(i, context);
 510   5                      }
 511   4      
 512   4                      actEmEepromRowNum = CY_EM_EEPROM_GET_ACT_ROW_NUM_FROM_ADDR(emEepromRowAddr,
 514   4                                                                                 context->numberOfRows,
 514   4                                                                                 context->userFlashStartAddr);
 515   4                      if(0UL != tmpRowAddr)
 516   4                      {
 517   5                          /* Calculate the required addressed for the later EEPROM historic data update */
 518   5                          skipOperation = GetAddresses(
 519   5                                                    &startAddr,
 520   5                                                    &endAddr,
 521   5                                                    &eeHeaderDataOffset,
 522   5                                                    actEmEepromRowNum,
 523   5                                                    *(uint32 *)(tmpRowAddr + CY_EM_EEPROM_HEADER_ADDR_OFFSET),
 524   5                                                    *(uint32 *)(tmpRowAddr + CY_EM_EEPROM_HEADER_LEN_OFFSET));
 525   5                      }
 526   4                      else
 527   4                      {
 528   5                          /* Skip writes to the RAM buffer */
 529   5                          skipOperation++;
 530   5                      }
 531   4      
 532   4                      /* Write data to the RAM buffer */
 533   4                      if(0u == skipOperation)
 534   4                      {
 535   5                          uint32 dataAddr = ((uint32)((uint8 *)&writeRamBuffer)) + startAddr;
 536   5      
 537   5                          /* Update the address to point to the EEPROM header data and not to
 538   5                          * the start of the row.
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 10  

 539   5                          */
 540   5                          tmpRowAddr = tmpRowAddr + CY_EM_EEPROM_HEADER_DATA_OFFSET + eeHeaderDataOffset;
 541   5                          (void)memcpy((void *)(dataAddr), (void *)(tmpRowAddr), endAddr - startAddr);
 542   5                      }
 543   4      
 544   4                      /* Calculate the checksum if redundant copy is enabled */
 545   4                      if(0u != context->redundantCopy)
 546   4                      {
 547   5                          writeRamBuffer[CY_EM_EEPROM_HEADER_CHECKSUM_OFFSET_U32] = (uint32)
 548   5                              CalcChecksum((uint8 *) &writeRamBuffer[CY_EM_EEPROM_EEPROM_DATA_OFFSET_U32],
 549   5                                                        CY_EM_EEPROM_EEPROM_DATA_LEN);
 550   5                      }
 551   4                  }
 552   3      
 553   3                  /* Write the data to the specified flash row */
 554   3                  ret = WriteRow(emEepromRowAddr, writeRamBuffer, context);
 555   3                  tmpRowAddr = emEepromRowAddr;
 556   3      
 557   3                  /* Check if redundant copy is used */
 558   3                  if((0u != context->redundantCopy) && (CY_EM_EEPROM_SUCCESS == ret))
 559   3                  {
 560   4                      /* Update the row address to point to the row in the redundant EEPROM's copy */
 561   4                      tmpRowAddr = (emEepromRowAddr - context->userFlashStartAddr) + context->wlEndAddr;
 562   4      
 563   4                      /* Write the data to the specified flash row */
 564   4                      ret = WriteRow(tmpRowAddr, writeRamBuffer, context);
 565   4                  }
 566   3      
 567   3                  if(CY_EM_EEPROM_SUCCESS == ret)
 568   3                  {
 569   4                      /* Store last written row address only when EEPROM and redundant
 570   4                      * copy writes were successful.
 571   4                      */
 572   4                      context->lastWrRowAddr = emEepromRowAddr;
 573   4                  }
 574   3                  else
 575   3                  {
 576   4                      break;
 577   4                  }
 578   3              }
 579   2          }
 580   1          return(ret);
 581   1      }
 582          
 583          
 584          /*******************************************************************************
 585          * Function Name: Cy_Em_EEPROM_Erase
 586          ****************************************************************************//**
 587          *
 588          * This function erases the entire contents of the EEPROM. Erased values are all
 589          * zeros. This is a blocking function and it does not return until the write
 590          * operation is completed. The user firmware should not enter Hibernate mode until
 591          * erase is completed. The erase operation is allowed in Sleep and Deep-Sleep modes.
 592          * During the flash operation, the device should not be reset, including the
 593          * XRES pin, a software reset, and watchdog reset sources. Also, low-voltage
 594          * detect circuits should be configured to generate an interrupt instead of a
 595          * reset. Otherwise, portions of flash may undergo unexpected changes.
 596          *
 597          * \param context
 598          * The pointer to the EEPROM context structure \ref cy_stc_eeprom_context_t.
 599          *
 600          * \return
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 11  

 601          * This function returns \ref cy_en_em_eeprom_status_t.
 602          *
 603          * \note
 604          * For all non PSoC 6 devices the erase operation is performed by clearing
 605          * the EEPROM data using flash write. This affects the flash durability.
 606          * So it is recommended to use this function in utmost case to prolongate
 607          * flash life.
 608          *
 609          * \note
 610          * This function uses a buffer of the flash row size to perform erase
 611          * operation. For the size of the row refer to the specific PSoC device
 612          * datasheet.
 613          *
 614          * \sideeffect
 615          * In case when blocking write option is used, if this function is called by
 616          * the CM4 the user code on CM0P and the user code on CM4 are blocked until erase
 617          * flash row operation is finished. If this function is called by the CM0P the
 618          * user code on CM4 is not blocked and the user code on CM0P is blocked until
 619          * erase flash row operation is finished. Plan your task allocation accordingly.
 620          *
 621          * \sideeffect
 622          * In case if non-blocking write option is used and when user flash is used as
 623          * an EEPROM storage care should be taken to prevent the read while write (RWW)
 624          * exception. To prevent the RWW exception the user flash macro that includes
 625          * the EEPROM storage should not be read while the EEPROM erase is not completed.
 626          * The read also means the user code execution from the respective flash macro.
 627          *
 628          *******************************************************************************/
 629          cy_en_em_eeprom_status_t Cy_Em_EEPROM_Erase(cy_stc_eeprom_context_t * context)
 630          {
 631   1          uint32 i;
 632   1          uint32 seqNum;
 633   1          uint32 emEepromRowAddr = context->lastWrRowAddr;
 634   1          uint32 emEepromRowRdAddr;
 635   1          cy_en_em_eeprom_status_t ret = CY_EM_EEPROM_WRITE_FAIL;
 636   1          uint32 writeRamBuffer[CY_EM_EEPROM_FLASH_SIZEOF_ROW / CY_EM_EEPROM_U32_DIV] = {0u};
 637   1      #if (CY_PSOC6)
                  uint32 emEepromStoredRowAddr = context->lastWrRowAddr;
                  uint32 storedSeqNum;
              #endif /* (!CY_PSOC6) */
 641   1      
 642   1          /* Get the sequence number of the last written row */
 643   1          seqNum = CY_EM_EEPROM_GET_SEQ_NUM(emEepromRowAddr);
 644   1      
 645   1          /* If there were no writes to EEPROM - nothing to erase */
 646   1          if(0u != seqNum)
 647   1          {
 648   2              /* Calculate the number of row erase operations required */
 649   2              uint32 numWrites = context->numberOfRows * context->wearLevelingFactor;
 650   2      
 651   2          #if (CY_PSOC6)
                      GetNextRowToWrite(seqNum, &emEepromStoredRowAddr, &emEepromRowRdAddr, context);
                      storedSeqNum = seqNum + 1u;
                  #endif /* (CY_PSOC6) */
 655   2      
 656   2              if(0u != context->redundantCopy)
 657   2              {
 658   3                  writeRamBuffer[CY_EM_EEPROM_HEADER_CHECKSUM_OFFSET_U32] = (uint32)
 659   3                              CalcChecksum((uint8 *) &writeRamBuffer[CY_EM_EEPROM_EEPROM_DATA_OFFSET_U32],
 660   3                                                        CY_EM_EEPROM_EEPROM_DATA_LEN);
 661   3              }
 662   2      
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 12  

 663   2              for(i = 0u; i < numWrites; i++)
 664   2              {
 665   3              #if (CY_PSOC6)
                          /* For PSoC 6 the erase operation moves backwards. From last written row
                          * identified by "seqNum" down to "seqNum" - "numWrites". If "emEepromRowAddr"
                          * is zero this means that the row identified by "seqNum" was previously 
                          * erased.
                          */
                          if(0u != emEepromRowAddr)
                          {
                              ret = EraseRow(emEepromRowAddr, (uint32)writeRamBuffer, context);
                          }
              
                          seqNum--;
              
                          if(0u == seqNum)
                          {
                              /* Exit the loop as there is no more row is EEPROM to be erased */
                              break;
                          }
                          emEepromRowAddr = GetRowAddrBySeqNum(seqNum, context);
                      #else
 685   3                  seqNum = CY_EM_EEPROM_GET_SEQ_NUM(emEepromRowAddr);
 686   3                  /* Get the address of the row to be erased. "emEepromRowAddr" may be updated
 687   3                  * with the proper address (if wear leveling is used).
 688   3                  */
 689   3                  GetNextRowToWrite(seqNum, &emEepromRowAddr, &emEepromRowRdAddr, context);
 690   3                  seqNum++;
 691   3                  writeRamBuffer[0u] = seqNum;
 692   3                  ret = EraseRow(emEepromRowAddr, (uint32)writeRamBuffer, context);
 693   3              #endif /* (CY_PSOC6) */
 694   3              }
 695   2      
 696   2          #if (CY_PSOC6)
                      if(CY_EM_EEPROM_SUCCESS == ret)
                      {
                          writeRamBuffer[0u] = storedSeqNum;
              
                          /* Write the previously stored sequence number to the flash row which would be
                          * written next if the erase wouldn't happen. In this case the write to
                          * redundant copy can be skipped as it does not add any value.
                          */
                          ret = WriteRow(emEepromStoredRowAddr, writeRamBuffer, context);
              
                          if(CY_EM_EEPROM_SUCCESS == ret)
                          {
                              context->lastWrRowAddr = emEepromStoredRowAddr;
                          }
                      }
                  #endif /* (CY_PSOC6) */
 713   2      
 714   2          }
 715   1          return(ret);
 716   1      }
 717          
 718          
 719          /*******************************************************************************
 720          * Function Name: Cy_Em_EEPROM_NumWrites
 721          ****************************************************************************//**
 722          *
 723          * Returns the number of the EEPROM writes completed so far.
 724          *
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 13  

 725          * \param context
 726          * The pointer to the EEPROM context structure \ref cy_stc_eeprom_context_t.
 727          *
 728          * \return
 729          * The number of writes performed to the EEPROM.
 730          *
 731          *******************************************************************************/
 732          uint32 Cy_Em_EEPROM_NumWrites(cy_stc_eeprom_context_t * context)
 733          {
 734   1          return(CY_EM_EEPROM_GET_SEQ_NUM(context->lastWrRowAddr));
 735   1      }
 736          
 737          /** \} */
 738          
 739          /** \cond INTERNAL */
 740          
 741          
 742          /*******************************************************************************
 743          * Function Name: FindLastWrittenRow
 744          ****************************************************************************//**
 745          *
 746          * Performs a search of the last written row address of the EEPROM associated
 747          * with the context structure. If there were no writes to the EEPROM the
 748          * function returns the start address of the EEPROM. The row address is returned
 749          * in the input parameter.
 750          *
 751          * \param lastWrRowPtr
 752          * The pointer to a memory where the last written row will be returned.
 753          *
 754          * \param context
 755          * The pointer to the EEPROM context structure \ref cy_stc_eeprom_context_t.
 756          *
 757          *******************************************************************************/
 758          static void FindLastWrittenRow(uint32 * lastWrRowPtr, cy_stc_eeprom_context_t * context)
 759          {
 760   1          uint32 seqNum = 0u;
 761   1          uint32 prevSeqNum = 0u;
 762   1          uint32 numRows;
 763   1          uint32 emEepromAddr = context->userFlashStartAddr;
 764   1      
 765   1          *lastWrRowPtr = emEepromAddr;
 766   1      
 767   1          for(numRows = 0u; numRows < (context->numberOfRows * context->wearLevelingFactor); numRows++)
 768   1          {
 769   2              seqNum = CY_EM_EEPROM_GET_SEQ_NUM(emEepromAddr);
 770   2              if((0u != seqNum) && (seqNum > prevSeqNum))
 771   2              {
 772   3                  /* Some record in EEPROM was found. Store found sequence
 773   3                  * number and row address.
 774   3                  */
 775   3                  prevSeqNum = seqNum;
 776   3                  *lastWrRowPtr = emEepromAddr;
 777   3              }
 778   2      
 779   2              /* Switch to the next row */
 780   2              emEepromAddr = emEepromAddr + CY_EM_EEPROM_FLASH_SIZEOF_ROW;
 781   2          }
 782   1      }
 783          
 784          
 785          /*******************************************************************************
 786          * Function Name: GetRowAddrBySeqNum
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 14  

 787          ****************************************************************************//**
 788          *
 789          * Returns the address of the row in EEPROM using its sequence number.
 790          *
 791          * \param seqNum
 792          * The sequence number of the row.
 793          *
 794          * \param context
 795          * The pointer to the EEPROM context structure.
 796          *
 797          * \return
 798          * The address of the row or zero if the row with the sequence number was not
 799          * found.
 800          *
 801          *******************************************************************************/
 802          static uint32 GetRowAddrBySeqNum(uint32 seqNum, cy_stc_eeprom_context_t * context)
 803          {
 804   1          uint32 emEepromAddr = context->userFlashStartAddr;
 805   1      
 806   1          while(CY_EM_EEPROM_GET_SEQ_NUM(emEepromAddr) != seqNum)
 807   1          {
 808   2              /* Switch to the next row */
 809   2              emEepromAddr = emEepromAddr + CY_EM_EEPROM_FLASH_SIZEOF_ROW;
 810   2      
 811   2              if (CY_EM_EEPROM_ADDR_IN_RANGE !=
 812   2                  CY_EM_EEPROM_IS_ADDR_EXCEED_RANGE(emEepromAddr, context->wlEndAddr))
 813   2              {
 814   3                  emEepromAddr = 0u;
 815   3                  /* Exit the loop as we reached the end of EEPROM */
 816   3                  break;
 817   3              }
 818   2          }
 819   1      
 820   1          return (emEepromAddr);
 821   1      }
 822          
 823          
 824          /*******************************************************************************
 825          * Function Name: GetNextRowToWrite
 826          ****************************************************************************//**
 827          *
 828          * Performs a range check of the row that should be written and updates the
 829          * address to the row respectively. The similar actions are done for the read
 830          * address.
 831          *
 832          * \param seqNum
 833          * The sequence number of the last written row.
 834          *
 835          * \param rowToWrPtr
 836          * The address of the last written row (input). The address of the row to be 
 837          * written (output).
 838          *
 839          * \param rowToRdPtr
 840          * The address of the row from which the data should be read into the RAM buffer
 841          * in a later write operation. Out parameter.
 842          *
 843          * \param context
 844          * The pointer to the EEPROM context structure \ref cy_stc_eeprom_context_t.
 845          *
 846          *******************************************************************************/
 847          static void GetNextRowToWrite(uint32 seqNum,
 848                                      uint32 * rowToWrPtr,
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 15  

 849                                      uint32 * rowToRdPtr,
 850                                      cy_stc_eeprom_context_t * context)
 851          {
 852   1          /* Switch to the next row to be written if the current sequence number is
 853   1          * not zero.
 854   1          */
 855   1          if(0u != seqNum)
 856   1          {
 857   2              *rowToWrPtr = (*rowToWrPtr + CY_EM_EEPROM_FLASH_SIZEOF_ROW);
 858   2          }
 859   1      
 860   1          /* If the resulting row address is out of EEPROM, then switch to the base
 861   1          * EEPROM address (Row#0).
 862   1          */
 863   1          if(CY_EM_EEPROM_ADDR_IN_RANGE !=
 864   1                  CY_EM_EEPROM_IS_ADDR_EXCEED_RANGE(*rowToWrPtr, context->wlEndAddr))
 865   1          {
 866   2              *rowToWrPtr = context->userFlashStartAddr;
 867   2          }
 868   1      
 869   1          *rowToRdPtr = 0u;
 870   1      
 871   1          /* Check if the sequence number is larger than the number of rows in the EEPROM.
 872   1          * If not, do not update the row read address because there is no historic
 873   1          * data to be read.
 874   1          */
 875   1          if(context->numberOfRows <= seqNum)
 876   1          {
 877   2              /* Check if wear leveling is used in EEPROM */
 878   2              if(context->wearLevelingFactor > 1u)
 879   2              {
 880   3                  /* The read row address should be taken from an EEPROM copy that became
 881   3                  * inactive recently. This condition check handles that.
 882   3                  */
 883   3                  if((*rowToWrPtr - (context->numberOfRows * CY_EM_EEPROM_FLASH_SIZEOF_ROW)) <
 884   3                      context->userFlashStartAddr)
 885   3                  {
 886   4                      *rowToRdPtr = context->userFlashStartAddr +
 887   4                          (context->numberOfRows * (context->wearLevelingFactor - 1u) *
 888   4                              CY_EM_EEPROM_FLASH_SIZEOF_ROW) + (*rowToWrPtr - context->userFlashStartAddr);
 889   4                  }
 890   3                  else
 891   3                  {
 892   4                      *rowToRdPtr = *rowToWrPtr - (context->numberOfRows * CY_EM_EEPROM_FLASH_SIZEOF_ROW);
 893   4                  }
 894   3              }
 895   2              else
 896   2              {
 897   3                  /* If no wear leveling, always read from the same flash row that
 898   3                  * should be written.
 899   3                  */
 900   3                  *rowToRdPtr = *rowToWrPtr;
 901   3              }
 902   2          }
 903   1      }
 904          
 905          
 906          /*******************************************************************************
 907          * Function Name: CalcChecksum
 908          ****************************************************************************//**
 909          *
 910          * Implements CRC-8 that is used in checksum calculation for the redundant copy
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 16  

 911          * algorithm.
 912          *
 913          * \param rowData
 914          * The row data to be used to calculate the checksum.
 915          *
 916          * \param len
 917          * The length of rowData.
 918          *
 919          * \return
 920          * The calculated value of CRC-8.
 921          *
 922          *******************************************************************************/
 923          static uint8 CalcChecksum(uint8 rowData[], uint32 len)
 924          {
 925   1          uint8 crc = CY_EM_EEPROM_CRC8_SEED;
 926   1          uint8 i;
 927   1          uint16 cnt = 0u;
 928   1      
 929   1          while(cnt != len)
 930   1          {
 931   2              crc ^= rowData[cnt];
 932   2              for (i = 0u; i < CY_EM_EEPROM_CRC8_POLYNOM_LEN; i++)
 933   2              {
 934   3                  crc = CY_EM_EEPROM_CALCULATE_CRC8(crc);
 935   3              }
 936   2              cnt++;
 937   2          }
 938   1      
 939   1          return (crc);
 940   1      }
 941          
 942          
 943          /*******************************************************************************
 944          * Function Name: CheckRanges
 945          ****************************************************************************//**
 946          *
 947          * Checks if the EEPROM of the requested size can be placed in flash.
 948          *
 949          * \param config
 950          * The pointer to a configuration structure. See \ref cy_stc_eeprom_config_t.
 951          *
 952          * \return
 953          * error / status code. See \ref cy_en_em_eeprom_status_t.
 954          *
 955          *******************************************************************************/
 956          static cy_en_em_eeprom_status_t CheckRanges(cy_stc_eeprom_config_t* config)
 957          {
 958   1          cy_en_em_eeprom_status_t ret = CY_EM_EEPROM_BAD_DATA;
 959   1          uint32 startAddr = config->userFlashStartAddr;
 960   1          uint32 endAddr = startAddr + CY_EM_EEPROM_GET_PHYSICAL_SIZE(config->eepromSize,
 961   1                  config->wearLevelingFactor, config->redundantCopy);
 962   1      
 963   1          /* Range check if there is enough flash for EEPROM */
 964   1          if (CY_EM_EEPROM_IS_IN_FLASH_RANGE(startAddr, endAddr))
 965   1          {
 966   2              ret = CY_EM_EEPROM_SUCCESS;
 967   2          }
 968   1          return (ret);
 969   1      }
 970          
 971          
 972          /*******************************************************************************
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 17  

 973          * Function Name: WriteRow
 974          ****************************************************************************//**
 975          *
 976          * Writes one flash row starting from the specified row address.
 977          *
 978          * \param rowAdd
 979          * The address of the flash row.
 980          *
 981          * \param rowData
 982          * The pointer to the data to be written to the row.
 983          *
 984          * \param context
 985          * The pointer to the EEPROM context structure \ref cy_stc_eeprom_context_t.
 986          *
 987          * \return
 988          * error / status code. See \ref cy_en_em_eeprom_status_t.
 989          *
 990          *******************************************************************************/
 991          static cy_en_em_eeprom_status_t WriteRow(uint32 rowAddr,
 992                                                  uint32 *rowData,
 993                                                  cy_stc_eeprom_context_t * context)
 994          {
 995   1          cy_en_em_eeprom_status_t ret = CY_EM_EEPROM_WRITE_FAIL;
 996   1      #if (!CY_PSOC6)
 997   1          cystatus rc;
 998   1          #if ((CY_PSOC3) || (CY_PSOC5))
 999   1              uint32 arrayId;
1000   1              uint32 rowId;
1001   1          #else
                      uint32 rowNum;
                  #endif /* (CY_PSOC3) */
1004   1          
1005   1          #if (CY_PSOC3)
1006   1              rowAddr &= CY_EM_EEPROM_CODE_ADDR_MASK;
1007   1              context = context;      /* To avoid compiler warning generation */
1008   1          #else
                      (void)context;          /* To avoid compiler warning generation */
                  #endif /* ((CY_PSOC3) */
1011   1          
1012   1          /* Write the flash row */
1013   1          #if (CY_PSOC4)
                      /* For PSoC 4 devices, the array ID is included in the row number */
                      rowNum = rowAddr / CY_EM_EEPROM_FLASH_SIZEOF_ROW;
                      
                      rc = CySysFlashWriteRow(rowNum, (uint8 *)rowData);
                  #else
1019   1              /* For PSoC 3/5 devices, the array ID and row ID needed to write the row */
1020   1              rowId = (rowAddr / CY_EM_EEPROM_FLASH_SIZEOF_ROW) % CY_EM_EEPROM_ROWS_IN_ARRAY;
1021   1              
1022   1              #ifndef CY_EM_EEPROM_SKIP_TEMP_MEASUREMENT
1023   1                  (void)CySetTemp();
1024   1              #endif /* (CY_EM_EEPROM_SKIP_TEMP_MEASUREMENT) */
1025   1      
1026   1              arrayId = rowAddr / CY_FLASH_SIZEOF_ARRAY;
1027   1              rc = CyWriteRowData((uint8)arrayId, (uint16)rowId, (uint8 *)rowData);
1028   1              
1029   1              #if (CY_PSOC5)
                          CyFlushCache();
                      #endif /* (CY_PSOC5) */
1032   1          #endif /* (CY_PSOC4) */
1033   1      
1034   1          if(CYRET_SUCCESS == rc)
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 18  

1035   1          {
1036   2              ret = CY_EM_EEPROM_SUCCESS;
1037   2          }
1038   1      #else /* PSoC 6 */
                  if(0u != context->blockingWrite)
                  {
                      /* Do blocking write */
                      if(CY_FLASH_DRV_SUCCESS == Cy_Flash_WriteRow(rowAddr, (const uint32 *)rowData))
                      {
                          ret = CY_EM_EEPROM_SUCCESS;
                      }
                  }
                  else
                  {
                      /* Initiate write */
                      if(CY_FLASH_DRV_OPERATION_STARTED == Cy_Flash_StartWrite(rowAddr, (const uint32 *)rowData))
                      {
                          uint32 countMs = CY_EM_EEPROM_MAX_WRITE_DURATION_MS;
                          cy_en_flashdrv_status_t rc;
              
                          do
                          {
                              CyDelay(1u);                         /* Wait 1ms */
                              rc = Cy_Flash_IsWriteComplete();     /* Check if write completed */
                              countMs--;
                          }
                          while ((rc == CY_FLASH_DRV_OPCODE_BUSY) && (0u != countMs));
              
                          if(CY_FLASH_DRV_SUCCESS == rc)
                          {
                              ret = CY_EM_EEPROM_SUCCESS;
                          }
                      }
                  }
              #endif /* (CY_PSOC6) */
1070   1      
1071   1          return (ret);
1072   1      }
1073          
1074          
1075          /*******************************************************************************
1076          * Function Name: EraseRow
1077          ****************************************************************************//**
1078          *
1079          * Erases one flash row starting from the specified row address. If the redundant
1080          * copy option is enabled the corresponding row in the redundant copy will also
1081          * be erased.
1082          *
1083          * \param rowAdd
1084          * The address of the flash row.
1085          *
1086          * \param ramBuffAddr
1087          * The address of the RAM buffer that contains zeroed data (used only for
1088          * non-PSoC 6 devices).
1089          *
1090          * \param context
1091          * The pointer to the EEPROM context structure \ref cy_stc_eeprom_context_t.
1092          *
1093          * \return
1094          * error / status code. See \ref cy_en_em_eeprom_status_t.
1095          *
1096          *******************************************************************************/
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 19  

1097          static cy_en_em_eeprom_status_t EraseRow(uint32 rowAddr,
1098                                                  uint32 ramBuffAddr,
1099                                                  cy_stc_eeprom_context_t * context)
1100          {
1101   1          uint32 emEepromRowAddr = rowAddr;
1102   1          cy_en_em_eeprom_status_t ret = CY_EM_EEPROM_WRITE_FAIL;
1103   1      #if (CY_PSOC6)
                  uint32 i = 1u;
              
                  (void)ramBuffAddr; /* To avoid compiler warning */
              
                  if(0u != context->redundantCopy)
                  {
                      i++;
                  }
              
                  do
                  {
                      if(0u != context->blockingWrite)
                      {
                          /* Erase the flash row */
                          if(CY_FLASH_DRV_SUCCESS == Cy_Flash_EraseRow(emEepromRowAddr))
                          {
                              ret = CY_EM_EEPROM_SUCCESS;
                          }
                      }
                      else
                      {
                          /* Initiate erase */
                          if(CY_FLASH_DRV_OPERATION_STARTED == Cy_Flash_StartErase(emEepromRowAddr))
                          {
                              uint32 countMs = CY_EM_EEPROM_MAX_WRITE_DURATION_MS;
                              cy_en_flashdrv_status_t rc;
              
                              do
                              {
                                  CyDelay(1u);                         /* Wait 1ms */
                                  rc = Cy_Flash_IsWriteComplete();     /* Check if erase completed */
                                  countMs--;
                              }
                              while ((rc == CY_FLASH_DRV_OPCODE_BUSY) && (0u != countMs));
              
                              if(CY_FLASH_DRV_SUCCESS == rc)
                              {
                                  ret = CY_EM_EEPROM_SUCCESS;
                              }
                          }
                      }
              
                      if(CY_EM_EEPROM_SUCCESS == ret)
                      {
                          /* Update the address to point to the redundant copy row */
                          emEepromRowAddr = (emEepromRowAddr - context->userFlashStartAddr) + context->wlEndAddr;
                      }
                      else
                      {
                          break;
                      }
                      i--;
                  } while (0u != i);
              #else
1158   1          /* Write the data to the specified flash row */
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 20  

1159   1          ret = WriteRow(emEepromRowAddr, (uint32 *)ramBuffAddr, context);
1160   1      
1161   1          if((CY_EM_EEPROM_SUCCESS == ret) && (0u != context->redundantCopy))
1162   1          {
1163   2              /* Update the address to point to the redundant copy row */
1164   2              emEepromRowAddr = (emEepromRowAddr - context->userFlashStartAddr) + context->wlEndAddr;
1165   2              ret = WriteRow(emEepromRowAddr, (uint32 *)ramBuffAddr, context);
1166   2          }
1167   1      
1168   1          if(CY_EM_EEPROM_SUCCESS == ret)
1169   1          {
1170   2              context->lastWrRowAddr = rowAddr;
1171   2          }
1172   1      #endif /* (CY_PSOC6) */
1173   1      
1174   1          return(ret);
1175   1      }
1176          
1177          
1178          /*******************************************************************************
1179          * Function Name: CheckCrcAndCopy
1180          ****************************************************************************//**
1181          *
1182          * Checks the checksum of the specific row in EEPROM. If the CRC matches - copies
1183          * the data to the "datAddr" from EEPROM. f the CRC does not match checks the
1184          * CRC of the corresponding row in the EEPROM's redundant copy. If the CRC
1185          * matches - copies the data to the "datAddr" from EEPROM redundant copy. If the
1186          * CRC of the redundant copy does not match - returns bad checksum.
1187          *
1188          * \param startAddr
1189          * The address that points to the start of the specified row.
1190          *
1191          * \param datAddr
1192          * The start address of where the row data will be copied if the CRC check
1193          * will succeed.
1194          *
1195          * \param rowOffset
1196          * The offset in the row from which the data should be copied.
1197          *
1198          * \param numBytes
1199          * The number of bytes to be copied.
1200          *
1201          * \param context
1202          * The pointer to the EEPROM context structure \ref cy_stc_eeprom_context_t.
1203          *
1204          * \return
1205          * error / status code. See \ref cy_en_em_eeprom_status_t.
1206          *
1207          * \note
1208          * This function uses a buffer of the flash row size to perform read
1209          * operation. For the size of the row refer to the specific PSoC device
1210          * datasheet.
1211          *
1212          *******************************************************************************/
1213          static cy_en_em_eeprom_status_t CheckCrcAndCopy(uint32 startAddr,
1214                                                          uint32 dstAddr,
1215                                                          uint32 rowOffset,
1216                                                          uint32 numBytes,
1217                                                          cy_stc_eeprom_context_t * context)
1218          {
1219   1          cy_en_em_eeprom_status_t ret;
1220   1          uint32 writeRamBuffer[CY_EM_EEPROM_FLASH_SIZEOF_ROW / CY_EM_EEPROM_U32_DIV];
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 21  

1221   1      
1222   1          /* Calculate the row address in the EEPROM's redundant copy */
1223   1          uint32 rcStartRowAddr = (startAddr - context->userFlashStartAddr) + context->wlEndAddr;
1224   1      
1225   1          /* Check the row data CRC in the EEPROM */
1226   1          if((*(uint32 *)(startAddr + CY_EM_EEPROM_HEADER_CHECKSUM_OFFSET)) ==
1227   1              ((uint32) CalcChecksum((uint8 *)(startAddr + CY_EM_EEPROM_EEPROM_DATA_OFFSET),
1228   1                  CY_EM_EEPROM_EEPROM_DATA_LEN)))
1229   1          {
1230   2              (void)memcpy((void *)(dstAddr), (void *)(startAddr + rowOffset), numBytes);
1231   2      
1232   2              ret = CY_EM_EEPROM_SUCCESS;
1233   2          }
1234   1          /* Check the row data CRC in the EEPROM's redundant copy */
1235   1          else if((*(uint32 *)(rcStartRowAddr + CY_EM_EEPROM_HEADER_CHECKSUM_OFFSET)) ==
1236   1                  ((uint32) CalcChecksum((uint8 *)(rcStartRowAddr + CY_EM_EEPROM_EEPROM_DATA_OFFSET),
1237   1                      CY_EM_EEPROM_EEPROM_DATA_LEN)))
1238   1          {
1239   2              /* Copy the redundant copy row to RAM buffer to avoid read while write (RWW)
1240   2              * flash exception. The RWW occurs while trying to write and read the data from
1241   2              * same flash macro.
1242   2              */
1243   2              (void)memcpy((void *)(writeRamBuffer), (void *)(rcStartRowAddr), CY_EM_EEPROM_FLASH_SIZEOF_ROW);
1244   2      
1245   2              /* Restore bad row data from the RAM buffer */
1246   2              ret = WriteRow(startAddr, (uint32 *)writeRamBuffer, context);
1247   2      
1248   2              if(CY_EM_EEPROM_SUCCESS == ret)
1249   2              {
1250   3                  (void)memcpy((void *)(dstAddr), (void *)(writeRamBuffer + rowOffset), numBytes);
1251   3              }
1252   2          }
1253   1          else
1254   1          {
1255   2              ret = CY_EM_EEPROM_BAD_CHECKSUM;
1256   2          }
1257   1      
1258   1          return(ret);
1259   1      }
1260          
1261          
1262          /*******************************************************************************
1263          * Function Name: GetAddresses
1264          ****************************************************************************//**
1265          *
1266          * Calculates the start and end address of the row's EEPROM data to be updated.
1267          * The start and end are not absolute addresses but a relative addresses in a
1268          * flash row.
1269          *
1270          * \param startAddr
1271          * The pointer the address where the EEPROM data start address will be returned.
1272          *
1273          * \param endAddr
1274          * The pointer the address where the EEPROM data end address will be returned.
1275          *
1276          * \param offset
1277          * The pointer the address where the calculated offset of the EEPROM header data
1278          * will be returned.
1279          *
1280          * \param rowNum
1281          * The row number that is about to be written.
1282          *
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 22  

1283          * \param addr
1284          * The address of the EEPROM header data in the currently analyzed row that may
1285          * concern to the row about to be written.
1286          *
1287          * \param len
1288          * The length of the EEPROM header data in the currently analyzed row that may
1289          * concern to the row about to be written.
1290          *
1291          * \return
1292          * Zero indicates that the currently analyzed row has the data to be written to
1293          * the active EEPROM row data locations. Non zero value indicates that there is
1294          * no data to be written
1295          *
1296          *******************************************************************************/
1297          static uint32 GetAddresses(uint32 *startAddr, 
1298                                  uint32 *endAddr, 
1299                                  uint32 *offset,
1300                                  uint32 rowNum,
1301                                  uint32 addr,
1302                                  uint32 len)
1303          {
1304   1          uint32 skip = 0u;
1305   1      
1306   1          *offset =0u;
1307   1      
1308   1          if(0u != CY_EM_EEPROM_IS_ADDR_IN_ROW_RANGE(addr, rowNum))
1309   1          {
1310   2              *startAddr = CY_EM_EEPROM_EEPROM_DATA_LEN + (addr % CY_EM_EEPROM_EEPROM_DATA_LEN);
1311   2      
1312   2              if(0u != CY_EM_EEPROM_IS_ADDR_IN_ROW_RANGE(addr + len, rowNum))
1313   2              {
1314   3                  *endAddr = *startAddr + len;
1315   3              }
1316   2              else
1317   2              {
1318   3                  *endAddr = CY_EM_EEPROM_FLASH_SIZEOF_ROW;
1319   3              }
1320   2          }
1321   1          else
1322   1          {
1323   2      
1324   2              if(0u != CY_EM_EEPROM_IS_ADDR_IN_ROW_RANGE(addr + len, rowNum))
1325   2              {
1326   3                  *startAddr = CY_EM_EEPROM_EEPROM_DATA_LEN;
1327   3                  *endAddr = (*startAddr + len) - (*startAddr - (addr % CY_EM_EEPROM_EEPROM_DATA_LEN));
1328   3                  *offset = len - (*endAddr - *startAddr);
1329   3              }
1330   2              else
1331   2              {
1332   3                  skip++;
1333   3              }
1334   2          }
1335   1      
1336   1          return (skip);
1337   1      }
1338          
1339          
1340          /*******************************************************************************
1341          * Function Name: FillChecksum
1342          ****************************************************************************//**
1343          *
1344          * Performs calculation of the checksum on each row in the Em_EEPROM and fills
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 23  

1345          * the Em_EEPROM headers checksum field with the calculated checksums.
1346          *
1347          * \param context
1348          * The pointer to the EEPROM context structure.
1349          *
1350          * \return
1351          * error / status code. See \ref cy_en_em_eeprom_status_t.
1352          *
1353          * \theory 
1354          * In case if redundant copy option is used the Em_EEPROM would return bad 
1355          * checksum while trying to read the EEPROM rows which were not yet written by 
1356          * the user. E.g. any read after device reprogramming without previous Write() 
1357          * operation to the EEPROM would fail. This would happen because the Em_EEPROM 
1358          * headers checksum field values (which is zero at the moment) would not be 
1359          * equal to the actual data checksum. This function allows to avoid read failure
1360          * after device reprogramming. 
1361          *
1362          * \note
1363          * This function uses a buffer of the flash row size to perform read
1364          * operation. For the size of the row refer to the specific PSoC device
1365          * datasheet.
1366          *
1367          *******************************************************************************/
1368          static cy_en_em_eeprom_status_t FillChecksum(cy_stc_eeprom_context_t * context)
1369          {
1370   1          uint32 i;
1371   1          uint32 rdAddr;
1372   1          uint32 writeRamBuffer[CY_EM_EEPROM_FLASH_SIZEOF_ROW / CY_EM_EEPROM_U32_DIV];
1373   1          uint32 wrAddr = context->lastWrRowAddr;
1374   1          uint32 tmpRowAddr;
1375   1          /* Get the sequence number (number of writes) */
1376   1          uint32 seqNum = CY_EM_EEPROM_GET_SEQ_NUM(wrAddr);
1377   1          cy_en_em_eeprom_status_t ret = CY_EM_EEPROM_BAD_PARAM;
1378   1      
1379   1          for(i = 0u; i < (context->numberOfRows * context->wearLevelingFactor); i++)
1380   1          {
1381   2              /* Copy the EEPROM row from Flash to RAM */
1382   2              (void)memcpy((void *)&writeRamBuffer[0u], (void *)(wrAddr), CY_EM_EEPROM_FLASH_SIZEOF_ROW);
1383   2      
1384   2              /* Increment the sequence number */
1385   2              seqNum++;
1386   2              writeRamBuffer[CY_EM_EEPROM_HEADER_SEQ_NUM_OFFSET_U32] = seqNum;
1387   2      
1388   2              /* Calculate and fill the checksum to the Em_EEPROM header */
1389   2              writeRamBuffer[CY_EM_EEPROM_HEADER_CHECKSUM_OFFSET_U32] = (uint32)
1390   2                          CalcChecksum((uint8 *) &writeRamBuffer[CY_EM_EEPROM_EEPROM_DATA_OFFSET_U32],
1391   2                                                    CY_EM_EEPROM_EEPROM_DATA_LEN);
1392   2      
1393   2              /* Write the data to the specified flash row */
1394   2              ret = WriteRow(wrAddr, writeRamBuffer, context);
1395   2      
1396   2              /* Update the row address to point to the relevant row in the redundant 
1397   2              * EEPROM's copy.
1398   2              */
1399   2              tmpRowAddr = (wrAddr - context->userFlashStartAddr) + context->wlEndAddr;
1400   2      
1401   2              /* Write the data to the specified flash row */
1402   2              ret = WriteRow(tmpRowAddr, writeRamBuffer, context);
1403   2      
1404   2              /* Get the address of the next row to be written. 
1405   2              * "rdAddr" is not used in this function but provided to prevent NULL 
1406   2              * pointer exception in GetNextRowToWrite().
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 24  

1407   2              */
1408   2              GetNextRowToWrite(seqNum, &wrAddr, &rdAddr, context);
1409   2          }
1410   1          
1411   1          return(ret);
1412   1      }
1413          
1414          /** \endcond */
1415          
1416          #if defined(__cplusplus)
              }
              #endif
1419          
1420          /* [] END OF FILE */
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 25  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _Cy_Em_EEPROM_Init (BEGIN)
                                           ; SOURCE LINE # 95
0000 900000      R     MOV     DPTR,#config
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
0006 900000      R     MOV     DPTR,#ret
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
000C 7B00              MOV     R3,#00H
000E 7A00              MOV     R2,#00H
0010 7900              MOV     R1,#00H
0012 C003              PUSH    AR3
0014 C002              PUSH    AR2
0016 C001              PUSH    AR1
0018 900000      R     MOV     DPTR,#context
001B 120000      E     LCALL   ?C?PLDXDATA
001E D082              POP     DPL
0020 D083              POP     DPH
0022 D0E0              POP     ACC
0024 6B                XRL     A,R3
0025 7008              JNZ     ?C0153
0027 E9                MOV     A,R1
0028 6582              XRL     A,DPL
002A 7003              JNZ     ?C0153
002C EA                MOV     A,R2
002D 6583              XRL     A,DPH
002F         ?C0153:
002F 7003              JNZ     $ + 5H
0031 020000      R     LJMP    ?C0001
0034 7B00              MOV     R3,#00H
0036 7A00              MOV     R2,#00H
0038 7900              MOV     R1,#00H
003A C003              PUSH    AR3
003C C002              PUSH    AR2
003E C001              PUSH    AR1
0040 900000      R     MOV     DPTR,#config
0043 120000      E     LCALL   ?C?PLDXDATA
0046 D082              POP     DPL
0048 D083              POP     DPH
004A D0E0              POP     ACC
004C 6B                XRL     A,R3
004D 7008              JNZ     ?C0154
004F E9                MOV     A,R1
0050 6582              XRL     A,DPL
0052 7003              JNZ     ?C0154
0054 EA                MOV     A,R2
0055 6583              XRL     A,DPH
0057         ?C0154:
0057 7003              JNZ     $ + 5H
0059 020000      R     LJMP    ?C0001
005C 900000      R     MOV     DPTR,#config
005F 120000      E     LCALL   ?C?PLDXDATA
0062 E9                MOV     A,R1
0063 240A              ADD     A,#0AH
0065 F9                MOV     R1,A
0066 EA                MOV     A,R2
0067 3400              ADDC    A,#00H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 26  

0069 FA                MOV     R2,A
006A 120000      E     LCALL   ?C?LLDPTR
006D A907              MOV     R1,AR7
006F AA06              MOV     R2,AR6
0071 AB05              MOV     R3,AR5
0073 C003              PUSH    AR3
0075 C002              PUSH    AR2
0077 C001              PUSH    AR1
0079 7B00              MOV     R3,#00H
007B 7A00              MOV     R2,#00H
007D 7900              MOV     R1,#00H
007F D082              POP     DPL
0081 D083              POP     DPH
0083 D0E0              POP     ACC
0085 6B                XRL     A,R3
0086 7008              JNZ     ?C0155
0088 E9                MOV     A,R1
0089 6582              XRL     A,DPL
008B 7003              JNZ     ?C0155
008D EA                MOV     A,R2
008E 6583              XRL     A,DPH
0090         ?C0155:
0090 7003              JNZ     $ + 5H
0092 020000      R     LJMP    ?C0001
0095 900000      R     MOV     DPTR,#config
0098 120000      E     LCALL   ?C?PLDXDATA
009B E9                MOV     A,R1
009C 2404              ADD     A,#04H
009E F9                MOV     R1,A
009F EA                MOV     A,R2
00A0 3400              ADDC    A,#00H
00A2 FA                MOV     R2,A
00A3 120000      E     LCALL   ?C?LLDPTR
00A6 D3                SETB    C
00A7 EF                MOV     A,R7
00A8 940A              SUBB    A,#0AH
00AA EE                MOV     A,R6
00AB 9400              SUBB    A,#00H
00AD 4003              JC      $ + 5H
00AF 020000      R     LJMP    ?C0001
00B2 900000      R     MOV     DPTR,#config
00B5 120000      E     LCALL   ?C?PLDXDATA
00B8 120000      E     LCALL   ?C?LLDPTR
00BB EF                MOV     A,R7
00BC 4E                ORL     A,R6
00BD 7003              JNZ     $ + 5H
00BF 020000      R     LJMP    ?C0001
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
00C2 900000      R     MOV     DPTR,#config
00C5 120000      E     LCALL   ?C?PLDXDATA
00C8 120000      R     LCALL   _CheckRanges
00CB 900000      R     MOV     DPTR,#ret
00CE EF                MOV     A,R7
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
00D0 900000      R     MOV     DPTR,#ret
00D3 E0                MOVX    A,@DPTR
00D4 FF                MOV     R7,A
00D5 EF                MOV     A,R7
00D6 6003              JZ      $ + 5H
00D8 020000      R     LJMP    ?C0001
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 27  

                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
00DB 900000      R     MOV     DPTR,#config
00DE 120000      E     LCALL   ?C?PLDXDATA
00E1 120000      E     LCALL   ?C?LLDPTR
00E4 900000      R     MOV     DPTR,#context
00E7 120000      E     LCALL   ?C?PLDXDATA
00EA E9                MOV     A,R1
00EB 240C              ADD     A,#0CH
00ED F9                MOV     R1,A
00EE EA                MOV     A,R2
00EF 3400              ADDC    A,#00H
00F1 FA                MOV     R2,A
00F2 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 108
00F5 900000      R     MOV     DPTR,#config
00F8 120000      E     LCALL   ?C?PLDXDATA
00FB E9                MOV     A,R1
00FC 2404              ADD     A,#04H
00FE F9                MOV     R1,A
00FF EA                MOV     A,R2
0100 3400              ADDC    A,#00H
0102 FA                MOV     R2,A
0103 120000      E     LCALL   ?C?LLDPTR
0106 900000      R     MOV     DPTR,#context
0109 120000      E     LCALL   ?C?PLDXDATA
010C E9                MOV     A,R1
010D 2410              ADD     A,#010H
010F F9                MOV     R1,A
0110 EA                MOV     A,R2
0111 3400              ADDC    A,#00H
0113 FA                MOV     R2,A
0114 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 109
0117 900000      R     MOV     DPTR,#config
011A 120000      E     LCALL   ?C?PLDXDATA
011D E9                MOV     A,R1
011E 2408              ADD     A,#08H
0120 F9                MOV     R1,A
0121 EA                MOV     A,R2
0122 3400              ADDC    A,#00H
0124 FA                MOV     R2,A
0125 120000      E     LCALL   ?C?CLDPTR
0128 FF                MOV     R7,A
0129 900000      R     MOV     DPTR,#context
012C 120000      E     LCALL   ?C?PLDXDATA
012F E9                MOV     A,R1
0130 2414              ADD     A,#014H
0132 F9                MOV     R1,A
0133 EA                MOV     A,R2
0134 3400              ADDC    A,#00H
0136 FA                MOV     R2,A
0137 EF                MOV     A,R7
0138 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 110
013B 900000      R     MOV     DPTR,#config
013E 120000      E     LCALL   ?C?PLDXDATA
0141 E9                MOV     A,R1
0142 2409              ADD     A,#09H
0144 F9                MOV     R1,A
0145 EA                MOV     A,R2
0146 3400              ADDC    A,#00H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 28  

0148 FA                MOV     R2,A
0149 120000      E     LCALL   ?C?CLDPTR
014C FF                MOV     R7,A
014D 900000      R     MOV     DPTR,#context
0150 120000      E     LCALL   ?C?PLDXDATA
0153 E9                MOV     A,R1
0154 2415              ADD     A,#015H
0156 F9                MOV     R1,A
0157 EA                MOV     A,R2
0158 3400              ADDC    A,#00H
015A FA                MOV     R2,A
015B EF                MOV     A,R7
015C 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 111
015F 900000      R     MOV     DPTR,#config
0162 120000      E     LCALL   ?C?PLDXDATA
0165 E9                MOV     A,R1
0166 240A              ADD     A,#0AH
0168 F9                MOV     R1,A
0169 EA                MOV     A,R2
016A 3400              ADDC    A,#00H
016C FA                MOV     R2,A
016D 120000      E     LCALL   ?C?LLDPTR
0170 900000      R     MOV     DPTR,#context
0173 120000      E     LCALL   ?C?PLDXDATA
0176 E9                MOV     A,R1
0177 2416              ADD     A,#016H
0179 F9                MOV     R1,A
017A EA                MOV     A,R2
017B 3400              ADDC    A,#00H
017D FA                MOV     R2,A
017E 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 113
0181 900000      R     MOV     DPTR,#config
0184 120000      E     LCALL   ?C?PLDXDATA
0187 120000      E     LCALL   ?C?LLDPTR
018A EF                MOV     A,R7
018B 547F              ANL     A,#07FH
018D FF                MOV     R7,A
018E EE                MOV     A,R6
018F 5400              ANL     A,#00H
0191 FE                MOV     R6,A
0192 ED                MOV     A,R5
0193 5400              ANL     A,#00H
0195 FD                MOV     R5,A
0196 EC                MOV     A,R4
0197 5400              ANL     A,#00H
0199 FC                MOV     R4,A
019A EF                MOV     A,R7
019B 4E                ORL     A,R6
019C 6012              JZ      ?C0003
019E 7F01              MOV     R7,#01H
01A0 7E00              MOV     R6,#00H
01A2 7D00              MOV     R5,#00H
01A4 7C00              MOV     R4,#00H
01A6 C004              PUSH    AR4
01A8 C005              PUSH    AR5
01AA C006              PUSH    AR6
01AC C007              PUSH    AR7
01AE 8010              SJMP    ?C0004
01B0         ?C0003:
01B0 7F00              MOV     R7,#00H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 29  

01B2 7E00              MOV     R6,#00H
01B4 7D00              MOV     R5,#00H
01B6 7C00              MOV     R4,#00H
01B8 C004              PUSH    AR4
01BA C005              PUSH    AR5
01BC C006              PUSH    AR6
01BE C007              PUSH    AR7
01C0         ?C0004:
01C0 900000      R     MOV     DPTR,#config
01C3 120000      E     LCALL   ?C?PLDXDATA
01C6 120000      E     LCALL   ?C?LLDPTR
01C9 7B80              MOV     R3,#080H
01CB 7A00              MOV     R2,#00H
01CD 7900              MOV     R1,#00H
01CF 7800              MOV     R0,#00H
01D1 120000      E     LCALL   ?C?ULDIV
01D4 A804              MOV     R0,AR4
01D6 A905              MOV     R1,AR5
01D8 AA06              MOV     R2,AR6
01DA AB07              MOV     R3,AR7
01DC D007              POP     AR7
01DE D006              POP     AR6
01E0 D005              POP     AR5
01E2 D004              POP     AR4
01E4 120000      E     LCALL   ?C?LADD
01E7 900000      R     MOV     DPTR,#context
01EA 120000      E     LCALL   ?C?PLDXDATA
01ED E9                MOV     A,R1
01EE 2404              ADD     A,#04H
01F0 F9                MOV     R1,A
01F1 EA                MOV     A,R2
01F2 3400              ADDC    A,#00H
01F4 FA                MOV     R2,A
01F5 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 114
01F8 900000      R     MOV     DPTR,#context
01FB 120000      E     LCALL   ?C?PLDXDATA
01FE E9                MOV     A,R1
01FF 2404              ADD     A,#04H
0201 F9                MOV     R1,A
0202 EA                MOV     A,R2
0203 3400              ADDC    A,#00H
0205 FA                MOV     R2,A
0206 120000      E     LCALL   ?C?LLDPTR
0209 7B00              MOV     R3,#00H
020B 7A01              MOV     R2,#01H
020D 7900              MOV     R1,#00H
020F 7800              MOV     R0,#00H
0211 120000      E     LCALL   ?C?LMUL
0214 900000      R     MOV     DPTR,#config
0217 120000      E     LCALL   ?C?PLDXDATA
021A E9                MOV     A,R1
021B 2404              ADD     A,#04H
021D F9                MOV     R1,A
021E EA                MOV     A,R2
021F 3400              ADDC    A,#00H
0221 FA                MOV     R2,A
0222 120000      E     LCALL   ?C?LLDPTR0
0225 120000      E     LCALL   ?C?LMUL
0228 900000      R     MOV     DPTR,#config
022B 120000      E     LCALL   ?C?PLDXDATA
022E E9                MOV     A,R1
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 30  

022F 240A              ADD     A,#0AH
0231 F9                MOV     R1,A
0232 EA                MOV     A,R2
0233 3400              ADDC    A,#00H
0235 FA                MOV     R2,A
0236 120000      E     LCALL   ?C?LLDPTR0
0239 120000      E     LCALL   ?C?LADD
023C 900000      R     MOV     DPTR,#context
023F 120000      E     LCALL   ?C?PLDXDATA
0242 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 117
0245 900000      R     MOV     DPTR,#context
0248 120000      E     LCALL   ?C?PLDXDATA
024B E9                MOV     A,R1
024C 2408              ADD     A,#08H
024E F9                MOV     R1,A
024F EA                MOV     A,R2
0250 3400              ADDC    A,#00H
0252 FA                MOV     R2,A
0253 C003              PUSH    AR3
0255 C002              PUSH    AR2
0257 C001              PUSH    AR1
0259 900000      R     MOV     DPTR,#context
025C 120000      E     LCALL   ?C?PLDXDATA
025F 900000      R     MOV     DPTR,#?_FindLastWrittenRow?BYTE+03H
0262 120000      E     LCALL   ?C?PSTXDATA
0265 D001              POP     AR1
0267 D002              POP     AR2
0269 D003              POP     AR3
026B 120000      R     LCALL   _FindLastWrittenRow
                                           ; SOURCE LINE # 119
026E 900000      R     MOV     DPTR,#context
0271 120000      E     LCALL   ?C?PLDXDATA
0274 E9                MOV     A,R1
0275 2408              ADD     A,#08H
0277 F9                MOV     R1,A
0278 EA                MOV     A,R2
0279 3400              ADDC    A,#00H
027B FA                MOV     R2,A
027C 120000      E     LCALL   ?C?LLDPTR
027F A907              MOV     R1,AR7
0281 AA06              MOV     R2,AR6
0283 AB05              MOV     R3,AR5
0285 120000      E     LCALL   ?C?LLDPTR
0288 EF                MOV     A,R7
0289 4E                ORL     A,R6
028A 704C              JNZ     ?C0001
028C 900000      R     MOV     DPTR,#context
028F 120000      E     LCALL   ?C?PLDXDATA
0292 E9                MOV     A,R1
0293 2414              ADD     A,#014H
0295 F9                MOV     R1,A
0296 EA                MOV     A,R2
0297 3400              ADDC    A,#00H
0299 FA                MOV     R2,A
029A 120000      E     LCALL   ?C?CLDPTR
029D FF                MOV     R7,A
029E EF                MOV     A,R7
029F 6037              JZ      ?C0001
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 124
02A1 900000      R     MOV     DPTR,#context
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 31  

02A4 120000      E     LCALL   ?C?PLDXDATA
02A7 120000      R     LCALL   _FillChecksum
02AA 900000      R     MOV     DPTR,#ret
02AD EF                MOV     A,R7
02AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
02AF 900000      R     MOV     DPTR,#context
02B2 120000      E     LCALL   ?C?PLDXDATA
02B5 E9                MOV     A,R1
02B6 2408              ADD     A,#08H
02B8 F9                MOV     R1,A
02B9 EA                MOV     A,R2
02BA 3400              ADDC    A,#00H
02BC FA                MOV     R2,A
02BD C003              PUSH    AR3
02BF C002              PUSH    AR2
02C1 C001              PUSH    AR1
02C3 900000      R     MOV     DPTR,#context
02C6 120000      E     LCALL   ?C?PLDXDATA
02C9 900000      R     MOV     DPTR,#?_FindLastWrittenRow?BYTE+03H
02CC 120000      E     LCALL   ?C?PSTXDATA
02CF D001              POP     AR1
02D1 D002              POP     AR2
02D3 D003              POP     AR3
02D5 120000      R     LCALL   _FindLastWrittenRow
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
02D8         ?C0001:
                                           ; SOURCE LINE # 132
02D8 900000      R     MOV     DPTR,#ret
02DB E0                MOVX    A,@DPTR
02DC FF                MOV     R7,A
                                           ; SOURCE LINE # 133
02DD         ?C0006:
02DD 22                RET     
             ; FUNCTION _Cy_Em_EEPROM_Init (END)

             ; FUNCTION _Cy_Em_EEPROM_Read (BEGIN)
                                           ; SOURCE LINE # 169
0000 900000      R     MOV     DPTR,#addr
0003 120000      E     LCALL   ?C?LSTXDATA
0006 900000      R     MOV     DPTR,#eepromData
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
000C 900000      R     MOV     DPTR,#ret
000F 7401              MOV     A,#01H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
0012 7F00              MOV     R7,#00H
0014 7E00              MOV     R6,#00H
0016 7D00              MOV     R5,#00H
0018 7C00              MOV     R4,#00H
001A 900000      R     MOV     DPTR,#curRdEepromRowNum
001D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 182
0020 7F00              MOV     R7,#00H
0022 7E00              MOV     R6,#00H
0024 7D00              MOV     R5,#00H
0026 7C00              MOV     R4,#00H
0028 900000      R     MOV     DPTR,#dataStartEepromRowNum
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 32  

002B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 183
002E 900000      R     MOV     DPTR,#eepromData
0031 120000      E     LCALL   ?C?PLDXDATA
0034 AF01              MOV     R7,AR1
0036 AE02              MOV     R6,AR2
0038 AD03              MOV     R5,AR3
003A 7C00              MOV     R4,#00H
003C 900000      R     MOV     DPTR,#eeData
003F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 186
0042 900000      R     MOV     DPTR,#size
0045 120000      E     LCALL   ?C?LLDXDATA
0048 EF                MOV     A,R7
0049 4E                ORL     A,R6
004A 7003              JNZ     $ + 5H
004C 020000      R     LJMP    ?C0007
004F 900000      R     MOV     DPTR,#context
0052 120000      E     LCALL   ?C?PLDXDATA
0055 E9                MOV     A,R1
0056 240C              ADD     A,#0CH
0058 F9                MOV     R1,A
0059 EA                MOV     A,R2
005A 3400              ADDC    A,#00H
005C FA                MOV     R2,A
005D 120000      E     LCALL   ?C?LLDPTR0
0060 C000              PUSH    AR0
0062 C001              PUSH    AR1
0064 C002              PUSH    AR2
0066 C003              PUSH    AR3
0068 900000      R     MOV     DPTR,#size
006B 120000      E     LCALL   ?C?LLDXDATA
006E 900000      R     MOV     DPTR,#addr
0071 120000      E     LCALL   ?C?LLDXDATA0
0074 120000      E     LCALL   ?C?LADD
0077 D003              POP     AR3
0079 D002              POP     AR2
007B D001              POP     AR1
007D D000              POP     AR0
007F C3                CLR     C
0080 120000      E     LCALL   ?C?ULCMP
0083 5003              JNC     $ + 5H
0085 020000      R     LJMP    ?C0007
0088 7B00              MOV     R3,#00H
008A 7A00              MOV     R2,#00H
008C 7900              MOV     R1,#00H
008E C003              PUSH    AR3
0090 C002              PUSH    AR2
0092 C001              PUSH    AR1
0094 900000      R     MOV     DPTR,#eepromData
0097 120000      E     LCALL   ?C?PLDXDATA
009A D082              POP     DPL
009C D083              POP     DPH
009E D0E0              POP     ACC
00A0 6B                XRL     A,R3
00A1 7008              JNZ     ?C0156
00A3 E9                MOV     A,R1
00A4 6582              XRL     A,DPL
00A6 7003              JNZ     ?C0156
00A8 EA                MOV     A,R2
00A9 6583              XRL     A,DPH
00AB         ?C0156:
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 33  

00AB 7003              JNZ     $ + 5H
00AD 020000      R     LJMP    ?C0007
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
00B0 900000      R     MOV     DPTR,#addr
00B3 120000      E     LCALL   ?C?LLDXDATA
00B6 900000      R     MOV     DPTR,#rdAddr
00B9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 189
00BC 900000      R     MOV     DPTR,#size
00BF 120000      E     LCALL   ?C?LLDXDATA
00C2 900000      R     MOV     DPTR,#rdSize
00C5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 191
00C8 900000      R     MOV     DPTR,#context
00CB 120000      E     LCALL   ?C?PLDXDATA
00CE E9                MOV     A,R1
00CF 2408              ADD     A,#08H
00D1 F9                MOV     R1,A
00D2 EA                MOV     A,R2
00D3 3400              ADDC    A,#00H
00D5 FA                MOV     R2,A
00D6 120000      E     LCALL   ?C?LLDPTR
00D9 A907              MOV     R1,AR7
00DB AA06              MOV     R2,AR6
00DD AB05              MOV     R3,AR5
00DF 120000      E     LCALL   ?C?LLDPTR
00E2 900000      R     MOV     DPTR,#seqNum
00E5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 192
00E8 7F00              MOV     R7,#00H
00EA 7E00              MOV     R6,#00H
00EC 7D00              MOV     R5,#00H
00EE 7C00              MOV     R4,#00H
00F0 900000      R     MOV     DPTR,#updateAddrFlag
00F3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 197
00F6 900000      R     MOV     DPTR,#rdSize
00F9 120000      E     LCALL   ?C?LLDXDATA
00FC 900000      R     MOV     DPTR,#rdAddr
00FF 120000      E     LCALL   ?C?LLDXDATA0
0102 120000      E     LCALL   ?C?LADD
0105 EF                MOV     A,R7
0106 24FF              ADD     A,#0FFH
0108 FF                MOV     R7,A
0109 EE                MOV     A,R6
010A 34FF              ADDC    A,#0FFH
010C FE                MOV     R6,A
010D ED                MOV     A,R5
010E 34FF              ADDC    A,#0FFH
0110 FD                MOV     R5,A
0111 EC                MOV     A,R4
0112 34FF              ADDC    A,#0FFH
0114 FC                MOV     R4,A
0115 7B80              MOV     R3,#080H
0117 7A00              MOV     R2,#00H
0119 7900              MOV     R1,#00H
011B 7800              MOV     R0,#00H
011D 120000      E     LCALL   ?C?ULDIV
0120 C004              PUSH    AR4
0122 C005              PUSH    AR5
0124 C006              PUSH    AR6
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 34  

0126 C007              PUSH    AR7
0128 7B80              MOV     R3,#080H
012A 7A00              MOV     R2,#00H
012C 7900              MOV     R1,#00H
012E 7800              MOV     R0,#00H
0130 900000      R     MOV     DPTR,#rdAddr
0133 120000      E     LCALL   ?C?LLDXDATA
0136 120000      E     LCALL   ?C?ULDIV
0139 A804              MOV     R0,AR4
013B A905              MOV     R1,AR5
013D AA06              MOV     R2,AR6
013F AB07              MOV     R3,AR7
0141 D007              POP     AR7
0143 D006              POP     AR6
0145 D005              POP     AR5
0147 D004              POP     AR4
0149 120000      E     LCALL   ?C?LSUB
014C EF                MOV     A,R7
014D 2401              ADD     A,#01H
014F FF                MOV     R7,A
0150 EE                MOV     A,R6
0151 3400              ADDC    A,#00H
0153 FE                MOV     R6,A
0154 ED                MOV     A,R5
0155 3400              ADDC    A,#00H
0157 FD                MOV     R5,A
0158 EC                MOV     A,R4
0159 3400              ADDC    A,#00H
015B FC                MOV     R4,A
015C 900000      R     MOV     DPTR,#numRowReads
015F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 204
0162 900000      R     MOV     DPTR,#context
0165 120000      E     LCALL   ?C?PLDXDATA
0168 E9                MOV     A,R1
0169 2416              ADD     A,#016H
016B F9                MOV     R1,A
016C EA                MOV     A,R2
016D 3400              ADDC    A,#00H
016F FA                MOV     R2,A
0170 120000      E     LCALL   ?C?LLDPTR0
0173 C000              PUSH    AR0
0175 C001              PUSH    AR1
0177 C002              PUSH    AR2
0179 C003              PUSH    AR3
017B 900000      R     MOV     DPTR,#context
017E 120000      E     LCALL   ?C?PLDXDATA
0181 E9                MOV     A,R1
0182 2408              ADD     A,#08H
0184 F9                MOV     R1,A
0185 EA                MOV     A,R2
0186 3400              ADDC    A,#00H
0188 FA                MOV     R2,A
0189 120000      E     LCALL   ?C?LLDPTR
018C D003              POP     AR3
018E D002              POP     AR2
0190 D001              POP     AR1
0192 D000              POP     AR0
0194 120000      E     LCALL   ?C?LSUB
0197 C004              PUSH    AR4
0199 C005              PUSH    AR5
019B C006              PUSH    AR6
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 35  

019D C007              PUSH    AR7
019F 900000      R     MOV     DPTR,#context
01A2 120000      E     LCALL   ?C?PLDXDATA
01A5 E9                MOV     A,R1
01A6 2404              ADD     A,#04H
01A8 F9                MOV     R1,A
01A9 EA                MOV     A,R2
01AA 3400              ADDC    A,#00H
01AC FA                MOV     R2,A
01AD 120000      E     LCALL   ?C?LLDPTR
01B0 7B00              MOV     R3,#00H
01B2 7A01              MOV     R2,#01H
01B4 7900              MOV     R1,#00H
01B6 7800              MOV     R0,#00H
01B8 120000      E     LCALL   ?C?LMUL
01BB A804              MOV     R0,AR4
01BD A905              MOV     R1,AR5
01BF AA06              MOV     R2,AR6
01C1 AB07              MOV     R3,AR7
01C3 D007              POP     AR7
01C5 D006              POP     AR6
01C7 D005              POP     AR5
01C9 D004              POP     AR4
01CB 120000      E     LCALL   ?C?ULDIV
01CE C004              PUSH    AR4
01D0 C005              PUSH    AR5
01D2 C006              PUSH    AR6
01D4 C007              PUSH    AR7
01D6 900000      R     MOV     DPTR,#context
01D9 120000      E     LCALL   ?C?PLDXDATA
01DC E9                MOV     A,R1
01DD 2404              ADD     A,#04H
01DF F9                MOV     R1,A
01E0 EA                MOV     A,R2
01E1 3400              ADDC    A,#00H
01E3 FA                MOV     R2,A
01E4 120000      E     LCALL   ?C?LLDPTR
01E7 7B00              MOV     R3,#00H
01E9 7A01              MOV     R2,#01H
01EB 7900              MOV     R1,#00H
01ED 7800              MOV     R0,#00H
01EF 120000      E     LCALL   ?C?LMUL
01F2 A804              MOV     R0,AR4
01F4 A905              MOV     R1,AR5
01F6 AA06              MOV     R2,AR6
01F8 AB07              MOV     R3,AR7
01FA D007              POP     AR7
01FC D006              POP     AR6
01FE D005              POP     AR5
0200 D004              POP     AR4
0202 120000      E     LCALL   ?C?LMUL
0205 900000      R     MOV     DPTR,#context
0208 120000      E     LCALL   ?C?PLDXDATA
020B E9                MOV     A,R1
020C 2416              ADD     A,#016H
020E F9                MOV     R1,A
020F EA                MOV     A,R2
0210 3400              ADDC    A,#00H
0212 FA                MOV     R2,A
0213 120000      E     LCALL   ?C?LLDPTR0
0216 120000      E     LCALL   ?C?LADD
0219 900000      R     MOV     DPTR,#curEepromBaseAddr
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 36  

021C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 210
021F 7F00              MOV     R7,#00H
0221 7E00              MOV     R6,#00H
0223 7D00              MOV     R5,#00H
0225 7C00              MOV     R4,#00H
0227 900000      R     MOV     DPTR,#i
022A 120000      E     LCALL   ?C?LSTXDATA
022D         ?C0008:
022D 900000      R     MOV     DPTR,#context
0230 120000      E     LCALL   ?C?PLDXDATA
0233 E9                MOV     A,R1
0234 2404              ADD     A,#04H
0236 F9                MOV     R1,A
0237 EA                MOV     A,R2
0238 3400              ADDC    A,#00H
023A FA                MOV     R2,A
023B 120000      E     LCALL   ?C?LLDPTR
023E 900000      R     MOV     DPTR,#i
0241 120000      E     LCALL   ?C?LLDXDATA0
0244 C3                CLR     C
0245 120000      E     LCALL   ?C?ULCMP
0248 4003              JC      $ + 5H
024A 020000      R     LJMP    ?C0009
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
024D 7F80              MOV     R7,#080H
024F 7E00              MOV     R6,#00H
0251 7D00              MOV     R5,#00H
0253 7C00              MOV     R4,#00H
0255 900000      R     MOV     DPTR,#i
0258 120000      E     LCALL   ?C?LLDXDATA0
025B 120000      E     LCALL   ?C?LMUL
025E 900000      R     MOV     DPTR,#rdAddr
0261 120000      E     LCALL   ?C?LLDXDATA0
0264 C3                CLR     C
0265 120000      E     LCALL   ?C?ULCMP
0268 5004              JNC     ?C0012
026A 7F00              MOV     R7,#00H
026C 8033              SJMP    ?C0013
026E         ?C0012:
026E 7F80              MOV     R7,#080H
0270 7E00              MOV     R6,#00H
0272 7D00              MOV     R5,#00H
0274 7C00              MOV     R4,#00H
0276 900000      R     MOV     DPTR,#i
0279 120000      E     LCALL   ?C?LLDXDATA0
027C 120000      E     LCALL   ?C?LMUL
027F EF                MOV     A,R7
0280 247F              ADD     A,#07FH
0282 FF                MOV     R7,A
0283 EE                MOV     A,R6
0284 3400              ADDC    A,#00H
0286 FE                MOV     R6,A
0287 ED                MOV     A,R5
0288 3400              ADDC    A,#00H
028A FD                MOV     R5,A
028B EC                MOV     A,R4
028C 3400              ADDC    A,#00H
028E FC                MOV     R4,A
028F 900000      R     MOV     DPTR,#rdAddr
0292 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 37  

0295 D3                SETB    C
0296 120000      E     LCALL   ?C?ULCMP
0299 4004              JC      ?C0014
029B 7F00              MOV     R7,#00H
029D 8002              SJMP    ?C0015
029F         ?C0014:
029F 7F01              MOV     R7,#01H
02A1         ?C0015:
02A1         ?C0013:
02A1 EF                MOV     A,R7
02A2 601A              JZ      ?C0010
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
02A4 900000      R     MOV     DPTR,#i
02A7 120000      E     LCALL   ?C?LLDXDATA
02AA 900000      R     MOV     DPTR,#dataStartEepromRowNum
02AD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 215
02B0 900000      R     MOV     DPTR,#dataStartEepromRowNum
02B3 120000      E     LCALL   ?C?LLDXDATA
02B6 900000      R     MOV     DPTR,#curRdEepromRowNum
02B9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 216
02BC 801A              SJMP    ?C0009
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
02BE         ?C0010:
02BE 900000      R     MOV     DPTR,#i
02C1 120000      E     LCALL   ?C?LLDXDATA
02C4 7B01              MOV     R3,#01H
02C6 7A00              MOV     R2,#00H
02C8 7900              MOV     R1,#00H
02CA 7800              MOV     R0,#00H
02CC 120000      E     LCALL   ?C?LADD
02CF 900000      R     MOV     DPTR,#i
02D2 120000      E     LCALL   ?C?LSTXDATA
02D5 020000      R     LJMP    ?C0008
02D8         ?C0009:
                                           ; SOURCE LINE # 221
02D8 900000      R     MOV     DPTR,#context
02DB 120000      E     LCALL   ?C?PLDXDATA
02DE E9                MOV     A,R1
02DF 2408              ADD     A,#08H
02E1 F9                MOV     R1,A
02E2 EA                MOV     A,R2
02E3 3400              ADDC    A,#00H
02E5 FA                MOV     R2,A
02E6 120000      E     LCALL   ?C?LLDPTR
02E9 900000      R     MOV     DPTR,#curEepromBaseAddr
02EC 120000      E     LCALL   ?C?LLDXDATA0
02EF 120000      E     LCALL   ?C?LSUB
02F2 7B00              MOV     R3,#00H
02F4 7A01              MOV     R2,#01H
02F6 7900              MOV     R1,#00H
02F8 7800              MOV     R0,#00H
02FA 120000      E     LCALL   ?C?ULDIV
02FD 900000      R     MOV     DPTR,#actEepromRowNum
0300 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 224
0303 900000      R     MOV     DPTR,#context
0306 120000      E     LCALL   ?C?PLDXDATA
0309 E9                MOV     A,R1
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 38  

030A 2410              ADD     A,#010H
030C F9                MOV     R1,A
030D EA                MOV     A,R2
030E 3400              ADDC    A,#00H
0310 FA                MOV     R2,A
0311 120000      E     LCALL   ?C?LLDPTR
0314 D3                SETB    C
0315 EF                MOV     A,R7
0316 9401              SUBB    A,#01H
0318 EE                MOV     A,R6
0319 9400              SUBB    A,#00H
031B 405D              JC      ?C0016
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
031D 900000      R     MOV     DPTR,#numRowReads
0320 120000      E     LCALL   ?C?LLDXDATA
0323 EF                MOV     A,R7
0324 24FF              ADD     A,#0FFH
0326 FF                MOV     R7,A
0327 EE                MOV     A,R6
0328 34FF              ADDC    A,#0FFH
032A FE                MOV     R6,A
032B ED                MOV     A,R5
032C 34FF              ADDC    A,#0FFH
032E FD                MOV     R5,A
032F EC                MOV     A,R4
0330 34FF              ADDC    A,#0FFH
0332 FC                MOV     R4,A
0333 900000      R     MOV     DPTR,#dataStartEepromRowNum
0336 120000      E     LCALL   ?C?LLDXDATA0
0339 120000      E     LCALL   ?C?LADD
033C 900000      R     MOV     DPTR,#dataEndEepromRowNum
033F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 229
0342 900000      R     MOV     DPTR,#actEepromRowNum
0345 120000      E     LCALL   ?C?LLDXDATA
0348 900000      R     MOV     DPTR,#dataStartEepromRowNum
034B 120000      E     LCALL   ?C?LLDXDATA0
034E D3                SETB    C
034F 120000      E     LCALL   ?C?ULCMP
0352 4004              JC      ?C0017
0354 7F01              MOV     R7,#01H
0356 8018              SJMP    ?C0018
0358         ?C0017:
0358 900000      R     MOV     DPTR,#actEepromRowNum
035B 120000      E     LCALL   ?C?LLDXDATA
035E 900000      R     MOV     DPTR,#dataEndEepromRowNum
0361 120000      E     LCALL   ?C?LLDXDATA0
0364 D3                SETB    C
0365 120000      E     LCALL   ?C?ULCMP
0368 4004              JC      ?C0019
036A 7F01              MOV     R7,#01H
036C 8002              SJMP    ?C0020
036E         ?C0019:
036E 7F00              MOV     R7,#00H
0370         ?C0020:
0370         ?C0018:
0370 E4                CLR     A
0371 FC                MOV     R4,A
0372 FD                MOV     R5,A
0373 FE                MOV     R6,A
0374 900000      R     MOV     DPTR,#updateAddrFlag
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 39  

0377 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 231
037A         ?C0016:
                                           ; SOURCE LINE # 234
037A 7F00              MOV     R7,#00H
037C 7E00              MOV     R6,#00H
037E 7D00              MOV     R5,#00H
0380 7C00              MOV     R4,#00H
0382 900000      R     MOV     DPTR,#i
0385 120000      E     LCALL   ?C?LSTXDATA
0388         ?C0021:
0388 900000      R     MOV     DPTR,#numRowReads
038B 120000      E     LCALL   ?C?LLDXDATA
038E 900000      R     MOV     DPTR,#i
0391 120000      E     LCALL   ?C?LLDXDATA0
0394 C3                CLR     C
0395 120000      E     LCALL   ?C?ULCMP
0398 4003              JC      $ + 5H
039A 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
039D 7F00              MOV     R7,#00H
039F 7E01              MOV     R6,#01H
03A1 7D00              MOV     R5,#00H
03A3 7C00              MOV     R4,#00H
03A5 900000      R     MOV     DPTR,#curRdEepromRowNum
03A8 120000      E     LCALL   ?C?LLDXDATA0
03AB 120000      E     LCALL   ?C?LMUL
03AE 900000      R     MOV     DPTR,#curEepromBaseAddr
03B1 120000      E     LCALL   ?C?LLDXDATA0
03B4 120000      E     LCALL   ?C?LADD
03B7 900000      R     MOV     DPTR,#startRowAddr
03BA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 237
03BD 900000      R     MOV     DPTR,#rdAddr
03C0 120000      E     LCALL   ?C?LLDXDATA
03C3 EF                MOV     A,R7
03C4 547F              ANL     A,#07FH
03C6 FF                MOV     R7,A
03C7 EE                MOV     A,R6
03C8 5400              ANL     A,#00H
03CA FE                MOV     R6,A
03CB ED                MOV     A,R5
03CC 5400              ANL     A,#00H
03CE FD                MOV     R5,A
03CF EC                MOV     A,R4
03D0 5400              ANL     A,#00H
03D2 FC                MOV     R4,A
03D3 EF                MOV     A,R7
03D4 2480              ADD     A,#080H
03D6 FF                MOV     R7,A
03D7 EE                MOV     A,R6
03D8 3400              ADDC    A,#00H
03DA FE                MOV     R6,A
03DB ED                MOV     A,R5
03DC 3400              ADDC    A,#00H
03DE FD                MOV     R5,A
03DF EC                MOV     A,R4
03E0 3400              ADDC    A,#00H
03E2 FC                MOV     R4,A
03E3 900000      R     MOV     DPTR,#curRowOffset
03E6 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 40  

                                           ; SOURCE LINE # 242
03E9 900000      R     MOV     DPTR,#i
03EC 120000      E     LCALL   ?C?LLDXDATA
03EF EF                MOV     A,R7
03F0 2401              ADD     A,#01H
03F2 FF                MOV     R7,A
03F3 EE                MOV     A,R6
03F4 3400              ADDC    A,#00H
03F6 FE                MOV     R6,A
03F7 ED                MOV     A,R5
03F8 3400              ADDC    A,#00H
03FA FD                MOV     R5,A
03FB EC                MOV     A,R4
03FC 3400              ADDC    A,#00H
03FE FC                MOV     R4,A
03FF 900000      R     MOV     DPTR,#numRowReads
0402 120000      E     LCALL   ?C?LLDXDATA0
0405 D3                SETB    C
0406 120000      E     LCALL   ?C?ULCMP
0409 402C              JC      ?C0024
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
040B 900000      R     MOV     DPTR,#rdAddr
040E 120000      E     LCALL   ?C?LLDXDATA
0411 EF                MOV     A,R7
0412 547F              ANL     A,#07FH
0414 FB                MOV     R3,A
0415 EE                MOV     A,R6
0416 5400              ANL     A,#00H
0418 FA                MOV     R2,A
0419 ED                MOV     A,R5
041A 5400              ANL     A,#00H
041C F9                MOV     R1,A
041D EC                MOV     A,R4
041E 5400              ANL     A,#00H
0420 F8                MOV     R0,A
0421 C3                CLR     C
0422 7480              MOV     A,#080H
0424 9B                SUBB    A,R3
0425 FF                MOV     R7,A
0426 E4                CLR     A
0427 9A                SUBB    A,R2
0428 FE                MOV     R6,A
0429 E4                CLR     A
042A 99                SUBB    A,R1
042B FD                MOV     R5,A
042C E4                CLR     A
042D 98                SUBB    A,R0
042E FC                MOV     R4,A
042F 900000      R     MOV     DPTR,#numBytesToRead
0432 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 245
0435 800C              SJMP    ?C0025
0437         ?C0024:
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
0437 900000      R     MOV     DPTR,#rdSize
043A 120000      E     LCALL   ?C?LLDXDATA
043D 900000      R     MOV     DPTR,#numBytesToRead
0440 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 249
0443         ?C0025:
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 41  

                                           ; SOURCE LINE # 254
0443 900000      R     MOV     DPTR,#updateAddrFlag
0446 120000      E     LCALL   ?C?LLDXDATA
0449 EF                MOV     A,R7
044A 4E                ORL     A,R6
044B 7003              JNZ     $ + 5H
044D 020000      R     LJMP    ?C0026
0450 900000      R     MOV     DPTR,#actEepromRowNum
0453 120000      E     LCALL   ?C?LLDXDATA
0456 900000      R     MOV     DPTR,#curRdEepromRowNum
0459 120000      E     LCALL   ?C?LLDXDATA0
045C D3                SETB    C
045D 120000      E     LCALL   ?C?ULCMP
0460 5003              JNC     $ + 5H
0462 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
0465 900000      R     MOV     DPTR,#startRowAddr
0468 120000      E     LCALL   ?C?LLDXDATA
046B C004              PUSH    AR4
046D C005              PUSH    AR5
046F C006              PUSH    AR6
0471 C007              PUSH    AR7
0473 900000      R     MOV     DPTR,#context
0476 120000      E     LCALL   ?C?PLDXDATA
0479 E9                MOV     A,R1
047A 2404              ADD     A,#04H
047C F9                MOV     R1,A
047D EA                MOV     A,R2
047E 3400              ADDC    A,#00H
0480 FA                MOV     R2,A
0481 120000      E     LCALL   ?C?LLDPTR
0484 7B00              MOV     R3,#00H
0486 7A01              MOV     R2,#01H
0488 7900              MOV     R1,#00H
048A 7800              MOV     R0,#00H
048C 120000      E     LCALL   ?C?LMUL
048F A804              MOV     R0,AR4
0491 A905              MOV     R1,AR5
0493 AA06              MOV     R2,AR6
0495 AB07              MOV     R3,AR7
0497 D007              POP     AR7
0499 D006              POP     AR6
049B D005              POP     AR5
049D D004              POP     AR4
049F 120000      E     LCALL   ?C?LSUB
04A2 900000      R     MOV     DPTR,#startRowAddr
04A5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 258
04A8 900000      R     MOV     DPTR,#context
04AB 120000      E     LCALL   ?C?PLDXDATA
04AE E9                MOV     A,R1
04AF 2416              ADD     A,#016H
04B1 F9                MOV     R1,A
04B2 EA                MOV     A,R2
04B3 3400              ADDC    A,#00H
04B5 FA                MOV     R2,A
04B6 120000      E     LCALL   ?C?LLDPTR
04B9 900000      R     MOV     DPTR,#startRowAddr
04BC 120000      E     LCALL   ?C?LLDXDATA0
04BF C3                CLR     C
04C0 120000      E     LCALL   ?C?ULCMP
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 42  

04C3 5047              JNC     ?C0026
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
04C5 900000      R     MOV     DPTR,#context
04C8 120000      E     LCALL   ?C?PLDXDATA
04CB E9                MOV     A,R1
04CC 2404              ADD     A,#04H
04CE F9                MOV     R1,A
04CF EA                MOV     A,R2
04D0 3400              ADDC    A,#00H
04D2 FA                MOV     R2,A
04D3 120000      E     LCALL   ?C?LLDPTR
04D6 900000      R     MOV     DPTR,#curRdEepromRowNum
04D9 120000      E     LCALL   ?C?LLDXDATA0
04DC 120000      E     LCALL   ?C?LSUB
04DF 7B00              MOV     R3,#00H
04E1 7A01              MOV     R2,#01H
04E3 7900              MOV     R1,#00H
04E5 7800              MOV     R0,#00H
04E7 120000      E     LCALL   ?C?LMUL
04EA C004              PUSH    AR4
04EC C005              PUSH    AR5
04EE C006              PUSH    AR6
04F0 C007              PUSH    AR7
04F2 900000      R     MOV     DPTR,#context
04F5 120000      E     LCALL   ?C?PLDXDATA
04F8 120000      E     LCALL   ?C?LLDPTR
04FB D003              POP     AR3
04FD D002              POP     AR2
04FF D001              POP     AR1
0501 D000              POP     AR0
0503 120000      E     LCALL   ?C?LSUB
0506 900000      R     MOV     DPTR,#startRowAddr
0509 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
050C         ?C0026:
                                           ; SOURCE LINE # 265
050C 900000      R     MOV     DPTR,#context
050F 120000      E     LCALL   ?C?PLDXDATA
0512 E9                MOV     A,R1
0513 2414              ADD     A,#014H
0515 F9                MOV     R1,A
0516 EA                MOV     A,R2
0517 3400              ADDC    A,#00H
0519 FA                MOV     R2,A
051A 120000      E     LCALL   ?C?CLDPTR
051D FF                MOV     R7,A
051E EF                MOV     A,R7
051F 605B              JZ      ?C0028
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 270
0521 900000      R     MOV     DPTR,#startRowAddr
0524 120000      E     LCALL   ?C?LLDXDATA
0527 C004              PUSH    AR4
0529 C005              PUSH    AR5
052B C006              PUSH    AR6
052D C007              PUSH    AR7
052F 900000      R     MOV     DPTR,#eeData
0532 120000      E     LCALL   ?C?LLDXDATA
0535 900000      R     MOV     DPTR,#?_CheckCrcAndCopy?BYTE+04H
0538 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 43  

053B 900000      R     MOV     DPTR,#curRowOffset
053E 120000      E     LCALL   ?C?LLDXDATA
0541 900000      R     MOV     DPTR,#?_CheckCrcAndCopy?BYTE+08H
0544 120000      E     LCALL   ?C?LSTXDATA
0547 900000      R     MOV     DPTR,#numBytesToRead
054A 120000      E     LCALL   ?C?LLDXDATA
054D 900000      R     MOV     DPTR,#?_CheckCrcAndCopy?BYTE+0CH
0550 120000      E     LCALL   ?C?LSTXDATA
0553 900000      R     MOV     DPTR,#context
0556 120000      E     LCALL   ?C?PLDXDATA
0559 900000      R     MOV     DPTR,#?_CheckCrcAndCopy?BYTE+010H
055C 120000      E     LCALL   ?C?PSTXDATA
055F D007              POP     AR7
0561 D006              POP     AR6
0563 D005              POP     AR5
0565 D004              POP     AR4
0567 120000      R     LCALL   _CheckCrcAndCopy
056A 900000      R     MOV     DPTR,#ret
056D EF                MOV     A,R7
056E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
056F 900000      R     MOV     DPTR,#ret
0572 E0                MOVX    A,@DPTR
0573 FF                MOV     R7,A
0574 EF                MOV     A,R7
0575 604E              JZ      ?C0030
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
0577 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 275
057A         ?C0029:
                                           ; SOURCE LINE # 276
057A 8049              SJMP    ?C0030
057C         ?C0028:
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 281
057C 900000      R     MOV     DPTR,#numBytesToRead
057F 120000      E     LCALL   ?C?LLDXDATA
0582 C006              PUSH    AR6
0584 C007              PUSH    AR7
0586 900000      R     MOV     DPTR,#curRowOffset
0589 120000      E     LCALL   ?C?LLDXDATA
058C 900000      R     MOV     DPTR,#startRowAddr
058F 120000      E     LCALL   ?C?LLDXDATA0
0592 120000      E     LCALL   ?C?LADD
0595 A907              MOV     R1,AR7
0597 AA06              MOV     R2,AR6
0599 AB05              MOV     R3,AR5
059B C003              PUSH    AR3
059D C002              PUSH    AR2
059F C001              PUSH    AR1
05A1 900000      R     MOV     DPTR,#eeData
05A4 120000      E     LCALL   ?C?LLDXDATA
05A7 A907              MOV     R1,AR7
05A9 AA06              MOV     R2,AR6
05AB AB05              MOV     R3,AR5
05AD A801              MOV     R0,AR1
05AF AC02              MOV     R4,AR2
05B1 AD03              MOV     R5,AR3
05B3 D001              POP     AR1
05B5 D002              POP     AR2
05B7 D003              POP     AR3
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 44  

05B9 D007              POP     AR7
05BB D006              POP     AR6
05BD 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 285
05C0 900000      R     MOV     DPTR,#ret
05C3 E4                CLR     A
05C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
05C5         ?C0030:
                                           ; SOURCE LINE # 289
05C5 900000      R     MOV     DPTR,#rdAddr
05C8 120000      E     LCALL   ?C?LLDXDATA
05CB 900000      R     MOV     DPTR,#numBytesToRead
05CE 120000      E     LCALL   ?C?LLDXDATA0
05D1 120000      E     LCALL   ?C?LADD
05D4 900000      R     MOV     DPTR,#rdAddr
05D7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 290
05DA 900000      R     MOV     DPTR,#rdSize
05DD 120000      E     LCALL   ?C?LLDXDATA
05E0 900000      R     MOV     DPTR,#numBytesToRead
05E3 120000      E     LCALL   ?C?LLDXDATA0
05E6 120000      E     LCALL   ?C?LSUB
05E9 900000      R     MOV     DPTR,#rdSize
05EC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 291
05EF 900000      R     MOV     DPTR,#eeData
05F2 120000      E     LCALL   ?C?LLDXDATA
05F5 900000      R     MOV     DPTR,#numBytesToRead
05F8 120000      E     LCALL   ?C?LLDXDATA0
05FB 120000      E     LCALL   ?C?LADD
05FE 900000      R     MOV     DPTR,#eeData
0601 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 292
0604 900000      R     MOV     DPTR,#curRdEepromRowNum
0607 120000      E     LCALL   ?C?LLDXDATA
060A 7B01              MOV     R3,#01H
060C 7A00              MOV     R2,#00H
060E 7900              MOV     R1,#00H
0610 7800              MOV     R0,#00H
0612 120000      E     LCALL   ?C?LADD
0615 900000      R     MOV     DPTR,#curRdEepromRowNum
0618 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 293
061B 900000      R     MOV     DPTR,#i
061E 120000      E     LCALL   ?C?LLDXDATA
0621 7B01              MOV     R3,#01H
0623 7A00              MOV     R2,#00H
0625 7900              MOV     R1,#00H
0627 7800              MOV     R0,#00H
0629 120000      E     LCALL   ?C?LADD
062C 900000      R     MOV     DPTR,#i
062F 120000      E     LCALL   ?C?LSTXDATA
0632 020000      R     LJMP    ?C0021
0635         ?C0022:
                                           ; SOURCE LINE # 303
0635 900000      R     MOV     DPTR,#ret
0638 E0                MOVX    A,@DPTR
0639 FF                MOV     R7,A
063A EF                MOV     A,R7
063B 6003              JZ      $ + 5H
063D 020000      R     LJMP    ?C0007
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 45  

0640 900000      R     MOV     DPTR,#seqNum
0643 120000      E     LCALL   ?C?LLDXDATA
0646 EF                MOV     A,R7
0647 4E                ORL     A,R6
0648 7003              JNZ     $ + 5H
064A 020000      R     LJMP    ?C0007
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
064D 900000      R     MOV     DPTR,#context
0650 120000      E     LCALL   ?C?PLDXDATA
0653 E9                MOV     A,R1
0654 2404              ADD     A,#04H
0656 F9                MOV     R1,A
0657 EA                MOV     A,R2
0658 3400              ADDC    A,#00H
065A FA                MOV     R2,A
065B 120000      E     LCALL   ?C?LLDPTR
065E 900000      R     MOV     DPTR,#seqNum
0661 120000      E     LCALL   ?C?LLDXDATA0
0664 C3                CLR     C
0665 120000      E     LCALL   ?C?ULCMP
0668 4013              JC      ?C0032
066A 900000      R     MOV     DPTR,#context
066D 120000      E     LCALL   ?C?PLDXDATA
0670 E9                MOV     A,R1
0671 2404              ADD     A,#04H
0673 F9                MOV     R1,A
0674 EA                MOV     A,R2
0675 3400              ADDC    A,#00H
0677 FA                MOV     R2,A
0678 120000      E     LCALL   ?C?LLDPTR
067B 8006              SJMP    ?C0033
067D         ?C0032:
067D 900000      R     MOV     DPTR,#seqNum
0680 120000      E     LCALL   ?C?LLDXDATA
0683         ?C0033:
0683 900000      R     MOV     DPTR,#numRowReads
0686 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 306
0689 900000      R     MOV     DPTR,#numRowReads
068C 120000      E     LCALL   ?C?LLDXDATA
068F 7BFF              MOV     R3,#0FFH
0691 7AFF              MOV     R2,#0FFH
0693 79FF              MOV     R1,#0FFH
0695 78FF              MOV     R0,#0FFH
0697 120000      E     LCALL   ?C?LADD
069A 900000      R     MOV     DPTR,#numRowReads
069D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 308
06A0 900000      R     MOV     DPTR,#numRowReads
06A3 120000      E     LCALL   ?C?LLDXDATA0
06A6 900000      R     MOV     DPTR,#seqNum
06A9 120000      E     LCALL   ?C?LLDXDATA
06AC 120000      E     LCALL   ?C?LSUB
06AF 900000      R     MOV     DPTR,#i
06B2 120000      E     LCALL   ?C?LSTXDATA
06B5         ?C0034:
06B5 900000      R     MOV     DPTR,#seqNum
06B8 120000      E     LCALL   ?C?LLDXDATA
06BB 900000      R     MOV     DPTR,#i
06BE 120000      E     LCALL   ?C?LLDXDATA0
06C1 D3                SETB    C
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 46  

06C2 120000      E     LCALL   ?C?ULCMP
06C5 4003              JC      $ + 5H
06C7 020000      R     LJMP    ?C0007
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
06CA 900000      R     MOV     DPTR,#i
06CD 120000      E     LCALL   ?C?LLDXDATA
06D0 900000      R     MOV     DPTR,#context
06D3 120000      E     LCALL   ?C?PLDXDATA
06D6 120000      R     LCALL   _GetRowAddrBySeqNum
06D9 900000      R     MOV     DPTR,#startRowAddr
06DC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 312
06DF 900000      R     MOV     DPTR,#startRowAddr
06E2 120000      E     LCALL   ?C?LLDXDATA
06E5 EF                MOV     A,R7
06E6 4E                ORL     A,R6
06E7 7003              JNZ     $ + 5H
06E9 020000      R     LJMP    ?C0036
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 315
06EC 900000      R     MOV     DPTR,#startRowAddr
06EF 120000      E     LCALL   ?C?LLDXDATA
06F2 EF                MOV     A,R7
06F3 2404              ADD     A,#04H
06F5 FF                MOV     R7,A
06F6 EE                MOV     A,R6
06F7 3400              ADDC    A,#00H
06F9 FE                MOV     R6,A
06FA ED                MOV     A,R5
06FB 3400              ADDC    A,#00H
06FD FD                MOV     R5,A
06FE EC                MOV     A,R4
06FF 3400              ADDC    A,#00H
0701 FC                MOV     R4,A
0702 A907              MOV     R1,AR7
0704 AA06              MOV     R2,AR6
0706 AB05              MOV     R3,AR5
0708 120000      E     LCALL   ?C?LLDPTR
070B 900000      R     MOV     DPTR,#startAddr
070E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 316
0711 900000      R     MOV     DPTR,#startRowAddr
0714 120000      E     LCALL   ?C?LLDXDATA
0717 EF                MOV     A,R7
0718 2408              ADD     A,#08H
071A FF                MOV     R7,A
071B EE                MOV     A,R6
071C 3400              ADDC    A,#00H
071E FE                MOV     R6,A
071F ED                MOV     A,R5
0720 3400              ADDC    A,#00H
0722 FD                MOV     R5,A
0723 EC                MOV     A,R4
0724 3400              ADDC    A,#00H
0726 FC                MOV     R4,A
0727 A907              MOV     R1,AR7
0729 AA06              MOV     R2,AR6
072B AB05              MOV     R3,AR5
072D 120000      E     LCALL   ?C?LLDPTR
0730 900000      R     MOV     DPTR,#startAddr
0733 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 47  

0736 120000      E     LCALL   ?C?LADD
0739 900000      R     MOV     DPTR,#endAddr
073C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 319
073F 900000      R     MOV     DPTR,#addr
0742 120000      E     LCALL   ?C?LLDXDATA
0745 900000      R     MOV     DPTR,#startAddr
0748 120000      E     LCALL   ?C?LLDXDATA0
074B D3                SETB    C
074C 120000      E     LCALL   ?C?ULCMP
074F 4023              JC      ?C0039
0751 900000      R     MOV     DPTR,#size
0754 120000      E     LCALL   ?C?LLDXDATA
0757 900000      R     MOV     DPTR,#addr
075A 120000      E     LCALL   ?C?LLDXDATA0
075D 120000      E     LCALL   ?C?LADD
0760 900000      R     MOV     DPTR,#startAddr
0763 120000      E     LCALL   ?C?LLDXDATA0
0766 C3                CLR     C
0767 120000      E     LCALL   ?C?ULCMP
076A 4004              JC      ?C0041
076C 7F00              MOV     R7,#00H
076E 8002              SJMP    ?C0042
0770         ?C0041:
0770 7F01              MOV     R7,#01H
0772         ?C0042:
0772 8018              SJMP    ?C0040
0774         ?C0039:
0774 900000      R     MOV     DPTR,#endAddr
0777 120000      E     LCALL   ?C?LLDXDATA
077A 900000      R     MOV     DPTR,#addr
077D 120000      E     LCALL   ?C?LLDXDATA0
0780 C3                CLR     C
0781 120000      E     LCALL   ?C?ULCMP
0784 4004              JC      ?C0043
0786 7F00              MOV     R7,#00H
0788 8002              SJMP    ?C0044
078A         ?C0043:
078A 7F01              MOV     R7,#01H
078C         ?C0044:
078C         ?C0040:
078C EF                MOV     A,R7
078D 7003              JNZ     $ + 5H
078F 020000      R     LJMP    ?C0036
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0792 900000      R     MOV     DPTR,#addr
0795 120000      E     LCALL   ?C?LLDXDATA
0798 900000      R     MOV     DPTR,#startAddr
079B 120000      E     LCALL   ?C?LLDXDATA0
079E D3                SETB    C
079F 120000      E     LCALL   ?C?ULCMP
07A2 400A              JC      ?C0045
07A4 7F00              MOV     R7,#00H
07A6 7E00              MOV     R6,#00H
07A8 7D00              MOV     R5,#00H
07AA 7C00              MOV     R4,#00H
07AC 800F              SJMP    ?C0046
07AE         ?C0045:
07AE 900000      R     MOV     DPTR,#startAddr
07B1 120000      E     LCALL   ?C?LLDXDATA0
07B4 900000      R     MOV     DPTR,#addr
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 48  

07B7 120000      E     LCALL   ?C?LLDXDATA
07BA 120000      E     LCALL   ?C?LSUB
07BD         ?C0046:
07BD 900000      R     MOV     DPTR,#srcOffset
07C0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 322
07C3 900000      R     MOV     DPTR,#addr
07C6 120000      E     LCALL   ?C?LLDXDATA
07C9 900000      R     MOV     DPTR,#startAddr
07CC 120000      E     LCALL   ?C?LLDXDATA0
07CF D3                SETB    C
07D0 120000      E     LCALL   ?C?ULCMP
07D3 4011              JC      ?C0047
07D5 900000      R     MOV     DPTR,#addr
07D8 120000      E     LCALL   ?C?LLDXDATA0
07DB 900000      R     MOV     DPTR,#startAddr
07DE 120000      E     LCALL   ?C?LLDXDATA
07E1 120000      E     LCALL   ?C?LSUB
07E4 8008              SJMP    ?C0048
07E6         ?C0047:
07E6 7F00              MOV     R7,#00H
07E8 7E00              MOV     R6,#00H
07EA 7D00              MOV     R5,#00H
07EC 7C00              MOV     R4,#00H
07EE         ?C0048:
07EE 900000      R     MOV     DPTR,#dstOffset
07F1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 323
07F4 900000      R     MOV     DPTR,#addr
07F7 120000      E     LCALL   ?C?LLDXDATA
07FA 900000      R     MOV     DPTR,#startAddr
07FD 120000      E     LCALL   ?C?LLDXDATA0
0800 D3                SETB    C
0801 120000      E     LCALL   ?C?ULCMP
0804 4008              JC      ?C0049
0806 900000      R     MOV     DPTR,#startAddr
0809 120000      E     LCALL   ?C?LLDXDATA
080C 8006              SJMP    ?C0050
080E         ?C0049:
080E 900000      R     MOV     DPTR,#addr
0811 120000      E     LCALL   ?C?LLDXDATA
0814         ?C0050:
0814 900000      R     MOV     DPTR,#rdAddr
0817 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 325
081A 900000      R     MOV     DPTR,#srcOffset
081D 120000      E     LCALL   ?C?LLDXDATA
0820 EF                MOV     A,R7
0821 240C              ADD     A,#0CH
0823 FF                MOV     R7,A
0824 EE                MOV     A,R6
0825 3400              ADDC    A,#00H
0827 FE                MOV     R6,A
0828 ED                MOV     A,R5
0829 3400              ADDC    A,#00H
082B FD                MOV     R5,A
082C EC                MOV     A,R4
082D 3400              ADDC    A,#00H
082F FC                MOV     R4,A
0830 900000      R     MOV     DPTR,#srcOffset
0833 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 328
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 49  

0836 900000      R     MOV     DPTR,#size
0839 120000      E     LCALL   ?C?LLDXDATA
083C 900000      R     MOV     DPTR,#addr
083F 120000      E     LCALL   ?C?LLDXDATA0
0842 120000      E     LCALL   ?C?LADD
0845 900000      R     MOV     DPTR,#endAddr
0848 120000      E     LCALL   ?C?LLDXDATA0
084B C3                CLR     C
084C 120000      E     LCALL   ?C?ULCMP
084F 5008              JNC     ?C0051
0851 900000      R     MOV     DPTR,#endAddr
0854 120000      E     LCALL   ?C?LLDXDATA
0857 800F              SJMP    ?C0052
0859         ?C0051:
0859 900000      R     MOV     DPTR,#size
085C 120000      E     LCALL   ?C?LLDXDATA
085F 900000      R     MOV     DPTR,#addr
0862 120000      E     LCALL   ?C?LLDXDATA0
0865 120000      E     LCALL   ?C?LADD
0868         ?C0052:
0868 900000      R     MOV     DPTR,#rdAddr
086B 120000      E     LCALL   ?C?LLDXDATA0
086E 120000      E     LCALL   ?C?LSUB
0871 900000      R     MOV     DPTR,#numBytesToRead
0874 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 331
0877 900000      R     MOV     DPTR,#eepromData
087A 120000      E     LCALL   ?C?PLDXDATA
087D AF01              MOV     R7,AR1
087F AE02              MOV     R6,AR2
0881 AD03              MOV     R5,AR3
0883 7C00              MOV     R4,#00H
0885 900000      R     MOV     DPTR,#dstOffset
0888 120000      E     LCALL   ?C?LLDXDATA0
088B 120000      E     LCALL   ?C?LADD
088E 900000      R     MOV     DPTR,#eeData
0891 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 338
0894 900000      R     MOV     DPTR,#context
0897 120000      E     LCALL   ?C?PLDXDATA
089A E9                MOV     A,R1
089B 2414              ADD     A,#014H
089D F9                MOV     R1,A
089E EA                MOV     A,R2
089F 3400              ADDC    A,#00H
08A1 FA                MOV     R2,A
08A2 120000      E     LCALL   ?C?CLDPTR
08A5 FF                MOV     R7,A
08A6 EF                MOV     A,R7
08A7 605A              JZ      ?C0053
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
08A9 900000      R     MOV     DPTR,#startRowAddr
08AC 120000      E     LCALL   ?C?LLDXDATA
08AF C004              PUSH    AR4
08B1 C005              PUSH    AR5
08B3 C006              PUSH    AR6
08B5 C007              PUSH    AR7
08B7 900000      R     MOV     DPTR,#eeData
08BA 120000      E     LCALL   ?C?LLDXDATA
08BD 900000      R     MOV     DPTR,#?_CheckCrcAndCopy?BYTE+04H
08C0 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 50  

08C3 900000      R     MOV     DPTR,#srcOffset
08C6 120000      E     LCALL   ?C?LLDXDATA
08C9 900000      R     MOV     DPTR,#?_CheckCrcAndCopy?BYTE+08H
08CC 120000      E     LCALL   ?C?LSTXDATA
08CF 900000      R     MOV     DPTR,#numBytesToRead
08D2 120000      E     LCALL   ?C?LLDXDATA
08D5 900000      R     MOV     DPTR,#?_CheckCrcAndCopy?BYTE+0CH
08D8 120000      E     LCALL   ?C?LSTXDATA
08DB 900000      R     MOV     DPTR,#context
08DE 120000      E     LCALL   ?C?PLDXDATA
08E1 900000      R     MOV     DPTR,#?_CheckCrcAndCopy?BYTE+010H
08E4 120000      E     LCALL   ?C?PSTXDATA
08E7 D007              POP     AR7
08E9 D006              POP     AR6
08EB D005              POP     AR5
08ED D004              POP     AR4
08EF 120000      R     LCALL   _CheckCrcAndCopy
08F2 900000      R     MOV     DPTR,#ret
08F5 EF                MOV     A,R7
08F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
08F7 900000      R     MOV     DPTR,#ret
08FA E0                MOVX    A,@DPTR
08FB FF                MOV     R7,A
08FC EF                MOV     A,R7
08FD 6048              JZ      ?C0036
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
08FF 8060              SJMP    ?C0007
                                           ; SOURCE LINE # 345
0901         ?C0054:
                                           ; SOURCE LINE # 346
0901 8044              SJMP    ?C0036
0903         ?C0053:
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0903 900000      R     MOV     DPTR,#numBytesToRead
0906 120000      E     LCALL   ?C?LLDXDATA
0909 C006              PUSH    AR6
090B C007              PUSH    AR7
090D 900000      R     MOV     DPTR,#srcOffset
0910 120000      E     LCALL   ?C?LLDXDATA
0913 900000      R     MOV     DPTR,#startRowAddr
0916 120000      E     LCALL   ?C?LLDXDATA0
0919 120000      E     LCALL   ?C?LADD
091C A907              MOV     R1,AR7
091E AA06              MOV     R2,AR6
0920 AB05              MOV     R3,AR5
0922 C003              PUSH    AR3
0924 C002              PUSH    AR2
0926 C001              PUSH    AR1
0928 900000      R     MOV     DPTR,#eeData
092B 120000      E     LCALL   ?C?LLDXDATA
092E A907              MOV     R1,AR7
0930 AA06              MOV     R2,AR6
0932 AB05              MOV     R3,AR5
0934 A801              MOV     R0,AR1
0936 AC02              MOV     R4,AR2
0938 AD03              MOV     R5,AR3
093A D001              POP     AR1
093C D002              POP     AR2
093E D003              POP     AR3
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 51  

0940 D007              POP     AR7
0942 D006              POP     AR6
0944 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0947         ?C0036:
0947 900000      R     MOV     DPTR,#i
094A 120000      E     LCALL   ?C?LLDXDATA
094D 7B01              MOV     R3,#01H
094F 7A00              MOV     R2,#00H
0951 7900              MOV     R1,#00H
0953 7800              MOV     R0,#00H
0955 120000      E     LCALL   ?C?LADD
0958 900000      R     MOV     DPTR,#i
095B 120000      E     LCALL   ?C?LSTXDATA
095E 020000      R     LJMP    ?C0034
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
0961         ?C0007:
                                           ; SOURCE LINE # 357
0961 900000      R     MOV     DPTR,#ret
0964 E0                MOVX    A,@DPTR
0965 FF                MOV     R7,A
                                           ; SOURCE LINE # 358
0966         ?C0056:
0966 22                RET     
             ; FUNCTION _Cy_Em_EEPROM_Read (END)

             ; FUNCTION _Cy_Em_EEPROM_Write (BEGIN)
                                           ; SOURCE LINE # 411
0000 900000      R     MOV     DPTR,#addr
0003 120000      E     LCALL   ?C?LSTXDATA
0006 900000      R     MOV     DPTR,#eepromData
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
000C 900000      R     MOV     DPTR,#ret
000F 7401              MOV     A,#01H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
0012 7F00              MOV     R7,#00H
0014 7E00              MOV     R6,#00H
0016 7D00              MOV     R5,#00H
0018 7C00              MOV     R4,#00H
001A 900000      R     MOV     DPTR,#startAddr
001D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 422
0020 7F00              MOV     R7,#00H
0022 7E00              MOV     R6,#00H
0024 7D00              MOV     R5,#00H
0026 7C00              MOV     R4,#00H
0028 900000      R     MOV     DPTR,#endAddr
002B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 424
002E 900000      R     MOV     DPTR,#context
0031 120000      E     LCALL   ?C?PLDXDATA
0034 E9                MOV     A,R1
0035 2408              ADD     A,#08H
0037 F9                MOV     R1,A
0038 EA                MOV     A,R2
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 52  

0039 3400              ADDC    A,#00H
003B FA                MOV     R2,A
003C 120000      E     LCALL   ?C?LLDPTR
003F 900000      R     MOV     DPTR,#emEepromRowAddr
0042 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 427
0045 900000      R     MOV     DPTR,#eepromData
0048 120000      E     LCALL   ?C?PLDXDATA
004B AF01              MOV     R7,AR1
004D AE02              MOV     R6,AR2
004F AD03              MOV     R5,AR3
0051 7C00              MOV     R4,#00H
0053 900000      R     MOV     DPTR,#eeData
0056 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 430
0059 900000      R     MOV     DPTR,#size
005C 120000      E     LCALL   ?C?LLDXDATA
005F EF                MOV     A,R7
0060 4E                ORL     A,R6
0061 7003              JNZ     $ + 5H
0063 020000      R     LJMP    ?C0057
0066 900000      R     MOV     DPTR,#context
0069 120000      E     LCALL   ?C?PLDXDATA
006C E9                MOV     A,R1
006D 240C              ADD     A,#0CH
006F F9                MOV     R1,A
0070 EA                MOV     A,R2
0071 3400              ADDC    A,#00H
0073 FA                MOV     R2,A
0074 120000      E     LCALL   ?C?LLDPTR0
0077 C000              PUSH    AR0
0079 C001              PUSH    AR1
007B C002              PUSH    AR2
007D C003              PUSH    AR3
007F 900000      R     MOV     DPTR,#size
0082 120000      E     LCALL   ?C?LLDXDATA
0085 900000      R     MOV     DPTR,#addr
0088 120000      E     LCALL   ?C?LLDXDATA0
008B 120000      E     LCALL   ?C?LADD
008E D003              POP     AR3
0090 D002              POP     AR2
0092 D001              POP     AR1
0094 D000              POP     AR0
0096 C3                CLR     C
0097 120000      E     LCALL   ?C?ULCMP
009A 5003              JNC     $ + 5H
009C 020000      R     LJMP    ?C0057
009F 7B00              MOV     R3,#00H
00A1 7A00              MOV     R2,#00H
00A3 7900              MOV     R1,#00H
00A5 C003              PUSH    AR3
00A7 C002              PUSH    AR2
00A9 C001              PUSH    AR1
00AB 900000      R     MOV     DPTR,#eepromData
00AE 120000      E     LCALL   ?C?PLDXDATA
00B1 D082              POP     DPL
00B3 D083              POP     DPH
00B5 D0E0              POP     ACC
00B7 6B                XRL     A,R3
00B8 7008              JNZ     ?C0157
00BA E9                MOV     A,R1
00BB 6582              XRL     A,DPL
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 53  

00BD 7003              JNZ     ?C0157
00BF EA                MOV     A,R2
00C0 6583              XRL     A,DPH
00C2         ?C0157:
00C2 7003              JNZ     $ + 5H
00C4 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
00C7 900000      R     MOV     DPTR,#size
00CA 120000      E     LCALL   ?C?LLDXDATA
00CD EF                MOV     A,R7
00CE 24FF              ADD     A,#0FFH
00D0 FF                MOV     R7,A
00D1 EE                MOV     A,R6
00D2 34FF              ADDC    A,#0FFH
00D4 FE                MOV     R6,A
00D5 ED                MOV     A,R5
00D6 34FF              ADDC    A,#0FFH
00D8 FD                MOV     R5,A
00D9 EC                MOV     A,R4
00DA 34FF              ADDC    A,#0FFH
00DC FC                MOV     R4,A
00DD 7B70              MOV     R3,#070H
00DF 7A00              MOV     R2,#00H
00E1 7900              MOV     R1,#00H
00E3 7800              MOV     R0,#00H
00E5 120000      E     LCALL   ?C?ULDIV
00E8 EF                MOV     A,R7
00E9 2401              ADD     A,#01H
00EB FF                MOV     R7,A
00EC EE                MOV     A,R6
00ED 3400              ADDC    A,#00H
00EF FE                MOV     R6,A
00F0 ED                MOV     A,R5
00F1 3400              ADDC    A,#00H
00F3 FD                MOV     R5,A
00F4 EC                MOV     A,R4
00F5 3400              ADDC    A,#00H
00F7 FC                MOV     R4,A
00F8 900000      R     MOV     DPTR,#numWrites
00FB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 433
00FE 7F00              MOV     R7,#00H
0100 7E00              MOV     R6,#00H
0102 7D00              MOV     R5,#00H
0104 7C00              MOV     R4,#00H
0106 900000      R     MOV     DPTR,#eeHeaderDataOffset
0109 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 435
010C 7F00              MOV     R7,#00H
010E 7E00              MOV     R6,#00H
0110 7D00              MOV     R5,#00H
0112 7C00              MOV     R4,#00H
0114 900000      R     MOV     DPTR,#wrCnt
0117 120000      E     LCALL   ?C?LSTXDATA
011A         ?C0058:
011A 900000      R     MOV     DPTR,#numWrites
011D 120000      E     LCALL   ?C?LLDXDATA
0120 900000      R     MOV     DPTR,#wrCnt
0123 120000      E     LCALL   ?C?LLDXDATA0
0126 C3                CLR     C
0127 120000      E     LCALL   ?C?ULCMP
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 54  

012A 4003              JC      $ + 5H
012C 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
012F 7F00              MOV     R7,#00H
0131 7E00              MOV     R6,#00H
0133 7D00              MOV     R5,#00H
0135 7C00              MOV     R4,#00H
0137 900000      R     MOV     DPTR,#skipOperation
013A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 439
013D 900000      R     MOV     DPTR,#emEepromRowAddr
0140 120000      E     LCALL   ?C?LLDXDATA
0143 A907              MOV     R1,AR7
0145 AA06              MOV     R2,AR6
0147 AB05              MOV     R3,AR5
0149 120000      E     LCALL   ?C?LLDPTR
014C 900000      R     MOV     DPTR,#seqNum
014F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 446
0152 900000      R     MOV     DPTR,#seqNum
0155 120000      E     LCALL   ?C?LLDXDATA
0158 7B01              MOV     R3,#01H
015A 7A00        R     MOV     R2,#HIGH emEepromRowAddr
015C 7900        R     MOV     R1,#LOW emEepromRowAddr
015E C003              PUSH    AR3
0160 C002              PUSH    AR2
0162 C001              PUSH    AR1
0164 7B01              MOV     R3,#01H
0166 7A00        R     MOV     R2,#HIGH emEepromRowRdAddr
0168 7900        R     MOV     R1,#LOW emEepromRowRdAddr
016A 900000      R     MOV     DPTR,#?_GetNextRowToWrite?BYTE+07H
016D 120000      E     LCALL   ?C?PSTXDATA
0170 900000      R     MOV     DPTR,#context
0173 120000      E     LCALL   ?C?PLDXDATA
0176 900000      R     MOV     DPTR,#?_GetNextRowToWrite?BYTE+0AH
0179 120000      E     LCALL   ?C?PSTXDATA
017C D001              POP     AR1
017E D002              POP     AR2
0180 D003              POP     AR3
0182 120000      R     LCALL   _GetNextRowToWrite
                                           ; SOURCE LINE # 449
0185 7E01              MOV     R6,#01H
0187 7F00              MOV     R7,#00H
0189 7D00              MOV     R5,#00H
018B 7B01              MOV     R3,#01H
018D 7A00        R     MOV     R2,#HIGH writeRamBuffer
018F 7900        R     MOV     R1,#LOW writeRamBuffer
0191 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 452
0194 900000      R     MOV     DPTR,#seqNum
0197 120000      E     LCALL   ?C?LLDXDATA
019A 7B01              MOV     R3,#01H
019C 7A00              MOV     R2,#00H
019E 7900              MOV     R1,#00H
01A0 7800              MOV     R0,#00H
01A2 120000      E     LCALL   ?C?LADD
01A5 900000      R     MOV     DPTR,#seqNum
01A8 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 453
01AB 900000      R     MOV     DPTR,#seqNum
01AE 120000      E     LCALL   ?C?LLDXDATA
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 55  

01B1 900000      R     MOV     DPTR,#writeRamBuffer
01B4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 454
01B7 900000      R     MOV     DPTR,#addr
01BA 120000      E     LCALL   ?C?LLDXDATA
01BD 900000      R     MOV     DPTR,#writeRamBuffer+04H
01C0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 455
01C3 900000      R     MOV     DPTR,#eeData
01C6 120000      E     LCALL   ?C?LLDXDATA
01C9 A907              MOV     R1,AR7
01CB AA06              MOV     R2,AR6
01CD AB05              MOV     R3,AR5
01CF 900000      R     MOV     DPTR,#tmpData
01D2 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 458
01D5 900000      R     MOV     DPTR,#numWrites
01D8 120000      E     LCALL   ?C?LLDXDATA
01DB EF                MOV     A,R7
01DC 24FF              ADD     A,#0FFH
01DE FF                MOV     R7,A
01DF EE                MOV     A,R6
01E0 34FF              ADDC    A,#0FFH
01E2 FE                MOV     R6,A
01E3 ED                MOV     A,R5
01E4 34FF              ADDC    A,#0FFH
01E6 FD                MOV     R5,A
01E7 EC                MOV     A,R4
01E8 34FF              ADDC    A,#0FFH
01EA FC                MOV     R4,A
01EB 900000      R     MOV     DPTR,#wrCnt
01EE 120000      E     LCALL   ?C?LLDXDATA0
01F1 C3                CLR     C
01F2 120000      E     LCALL   ?C?ULCMP
01F5 700E              JNZ     ?C0061
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 461
01F7 900000      R     MOV     DPTR,#size
01FA 120000      E     LCALL   ?C?LLDXDATA
01FD 900000      R     MOV     DPTR,#writeRamBuffer+08H
0200 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 462
0203 8063              SJMP    ?C0062
0205         ?C0061:
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 469
0205 7F70              MOV     R7,#070H
0207 7E00              MOV     R6,#00H
0209 7D00              MOV     R5,#00H
020B 7C00              MOV     R4,#00H
020D 900000      R     MOV     DPTR,#writeRamBuffer+08H
0210 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 470
0213 900000      R     MOV     DPTR,#size
0216 120000      E     LCALL   ?C?LLDXDATA
0219 C3                CLR     C
021A EF                MOV     A,R7
021B 9470              SUBB    A,#070H
021D FF                MOV     R7,A
021E EE                MOV     A,R6
021F 9400              SUBB    A,#00H
0221 FE                MOV     R6,A
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 56  

0222 ED                MOV     A,R5
0223 9400              SUBB    A,#00H
0225 FD                MOV     R5,A
0226 EC                MOV     A,R4
0227 9400              SUBB    A,#00H
0229 FC                MOV     R4,A
022A 900000      R     MOV     DPTR,#size
022D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 471
0230 900000      R     MOV     DPTR,#addr
0233 120000      E     LCALL   ?C?LLDXDATA
0236 EF                MOV     A,R7
0237 2470              ADD     A,#070H
0239 FF                MOV     R7,A
023A EE                MOV     A,R6
023B 3400              ADDC    A,#00H
023D FE                MOV     R6,A
023E ED                MOV     A,R5
023F 3400              ADDC    A,#00H
0241 FD                MOV     R5,A
0242 EC                MOV     A,R4
0243 3400              ADDC    A,#00H
0245 FC                MOV     R4,A
0246 900000      R     MOV     DPTR,#addr
0249 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 472
024C 900000      R     MOV     DPTR,#eeData
024F 120000      E     LCALL   ?C?LLDXDATA
0252 EF                MOV     A,R7
0253 2470              ADD     A,#070H
0255 FF                MOV     R7,A
0256 EE                MOV     A,R6
0257 3400              ADDC    A,#00H
0259 FE                MOV     R6,A
025A ED                MOV     A,R5
025B 3400              ADDC    A,#00H
025D FD                MOV     R5,A
025E EC                MOV     A,R4
025F 3400              ADDC    A,#00H
0261 FC                MOV     R4,A
0262 900000      R     MOV     DPTR,#eeData
0265 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 473
0268         ?C0062:
                                           ; SOURCE LINE # 476
0268 900000      R     MOV     DPTR,#writeRamBuffer+08H
026B 120000      E     LCALL   ?C?LLDXDATA
026E 900000      R     MOV     DPTR,#tmpData
0271 120000      E     LCALL   ?C?PLDXDATA
0274 C003              PUSH    AR3
0276 C002              PUSH    AR2
0278 C001              PUSH    AR1
027A 7B01              MOV     R3,#01H
027C 7A00        R     MOV     R2,#HIGH writeRamBuffer+0CH
027E 7900        R     MOV     R1,#LOW writeRamBuffer+0CH
0280 A801              MOV     R0,AR1
0282 AC02              MOV     R4,AR2
0284 AD03              MOV     R5,AR3
0286 D001              POP     AR1
0288 D002              POP     AR2
028A D003              POP     AR3
028C 120000      E     LCALL   ?C?COPYAMD
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 57  

                                           ; SOURCE LINE # 480
028F 7F00              MOV     R7,#00H
0291 7E00              MOV     R6,#00H
0293 7D00              MOV     R5,#00H
0295 7C00              MOV     R4,#00H
0297 900000      R     MOV     DPTR,#emEepromRowRdAddr
029A 120000      E     LCALL   ?C?LLDXDATA0
029D C3                CLR     C
029E 120000      E     LCALL   ?C?ULCMP
02A1 603B              JZ      ?C0063
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 484
02A3 900000      R     MOV     DPTR,#emEepromRowRdAddr
02A6 120000      E     LCALL   ?C?LLDXDATA
02A9 EF                MOV     A,R7
02AA 2480              ADD     A,#080H
02AC FF                MOV     R7,A
02AD EE                MOV     A,R6
02AE 3400              ADDC    A,#00H
02B0 FE                MOV     R6,A
02B1 ED                MOV     A,R5
02B2 3400              ADDC    A,#00H
02B4 FD                MOV     R5,A
02B5 EC                MOV     A,R4
02B6 3400              ADDC    A,#00H
02B8 FC                MOV     R4,A
02B9 A907              MOV     R1,AR7
02BB AA06              MOV     R2,AR6
02BD AB05              MOV     R3,AR5
02BF C003              PUSH    AR3
02C1 C002              PUSH    AR2
02C3 C001              PUSH    AR1
02C5 7B01              MOV     R3,#01H
02C7 7A00        R     MOV     R2,#HIGH writeRamBuffer+080H
02C9 7900        R     MOV     R1,#LOW writeRamBuffer+080H
02CB A801              MOV     R0,AR1
02CD AC02              MOV     R4,AR2
02CF AD03              MOV     R5,AR3
02D1 D001              POP     AR1
02D3 D002              POP     AR2
02D5 D003              POP     AR3
02D7 7E00              MOV     R6,#00H
02D9 7F80              MOV     R7,#080H
02DB 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 486
02DE         ?C0063:
                                           ; SOURCE LINE # 492
02DE 900000      R     MOV     DPTR,#context
02E1 120000      E     LCALL   ?C?PLDXDATA
02E4 E9                MOV     A,R1
02E5 2404              ADD     A,#04H
02E7 F9                MOV     R1,A
02E8 EA                MOV     A,R2
02E9 3400              ADDC    A,#00H
02EB FA                MOV     R2,A
02EC 120000      E     LCALL   ?C?LLDPTR
02EF 900000      R     MOV     DPTR,#seqNum
02F2 120000      E     LCALL   ?C?LLDXDATA0
02F5 D3                SETB    C
02F6 120000      E     LCALL   ?C?ULCMP
02F9 402C              JC      ?C0064
02FB 900000      R     MOV     DPTR,#context
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 58  

02FE 120000      E     LCALL   ?C?PLDXDATA
0301 E9                MOV     A,R1
0302 2404              ADD     A,#04H
0304 F9                MOV     R1,A
0305 EA                MOV     A,R2
0306 3400              ADDC    A,#00H
0308 FA                MOV     R2,A
0309 120000      E     LCALL   ?C?LLDPTR0
030C 900000      R     MOV     DPTR,#seqNum
030F 120000      E     LCALL   ?C?LLDXDATA
0312 120000      E     LCALL   ?C?LSUB
0315 EF                MOV     A,R7
0316 2401              ADD     A,#01H
0318 FF                MOV     R7,A
0319 EE                MOV     A,R6
031A 3400              ADDC    A,#00H
031C FE                MOV     R6,A
031D ED                MOV     A,R5
031E 3400              ADDC    A,#00H
0320 FD                MOV     R5,A
0321 EC                MOV     A,R4
0322 3400              ADDC    A,#00H
0324 FC                MOV     R4,A
0325 8008              SJMP    ?C0065
0327         ?C0064:
0327 7F01              MOV     R7,#01H
0329 7E00              MOV     R6,#00H
032B 7D00              MOV     R5,#00H
032D 7C00              MOV     R4,#00H
032F         ?C0065:
032F 900000      R     MOV     DPTR,#i
0332 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 494
0335         ?C0066:
0335 900000      R     MOV     DPTR,#seqNum
0338 120000      E     LCALL   ?C?LLDXDATA
033B 900000      R     MOV     DPTR,#i
033E 120000      E     LCALL   ?C?LLDXDATA0
0341 D3                SETB    C
0342 120000      E     LCALL   ?C?ULCMP
0345 4003              JC      $ + 5H
0347 020000      R     LJMP    ?C0067
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
034A 900000      R     MOV     DPTR,#seqNum
034D 120000      E     LCALL   ?C?LLDXDATA
0350 900000      R     MOV     DPTR,#i
0353 120000      E     LCALL   ?C?LLDXDATA0
0356 C3                CLR     C
0357 120000      E     LCALL   ?C?ULCMP
035A 7016              JNZ     ?C0069
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 502
035C 7B01              MOV     R3,#01H
035E 7A00        R     MOV     R2,#HIGH writeRamBuffer
0360 7900        R     MOV     R1,#LOW writeRamBuffer
0362 AF01              MOV     R7,AR1
0364 AE02              MOV     R6,AR2
0366 AD03              MOV     R5,AR3
0368 7C00              MOV     R4,#00H
036A 900000      R     MOV     DPTR,#tmpRowAddr
036D 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 59  

                                           ; SOURCE LINE # 503
0370 8015              SJMP    ?C0070
0372         ?C0069:
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 509
0372 900000      R     MOV     DPTR,#i
0375 120000      E     LCALL   ?C?LLDXDATA
0378 900000      R     MOV     DPTR,#context
037B 120000      E     LCALL   ?C?PLDXDATA
037E 120000      R     LCALL   _GetRowAddrBySeqNum
0381 900000      R     MOV     DPTR,#tmpRowAddr
0384 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 510
0387         ?C0070:
                                           ; SOURCE LINE # 512
0387 900000      R     MOV     DPTR,#context
038A 120000      E     LCALL   ?C?PLDXDATA
038D E9                MOV     A,R1
038E 2416              ADD     A,#016H
0390 F9                MOV     R1,A
0391 EA                MOV     A,R2
0392 3400              ADDC    A,#00H
0394 FA                MOV     R2,A
0395 120000      E     LCALL   ?C?LLDPTR0
0398 900000      R     MOV     DPTR,#emEepromRowAddr
039B 120000      E     LCALL   ?C?LLDXDATA
039E 120000      E     LCALL   ?C?LSUB
03A1 7B00              MOV     R3,#00H
03A3 7A01              MOV     R2,#01H
03A5 7900              MOV     R1,#00H
03A7 7800              MOV     R0,#00H
03A9 120000      E     LCALL   ?C?ULDIV
03AC 900000      R     MOV     DPTR,#context
03AF 120000      E     LCALL   ?C?PLDXDATA
03B2 E9                MOV     A,R1
03B3 2404              ADD     A,#04H
03B5 F9                MOV     R1,A
03B6 EA                MOV     A,R2
03B7 3400              ADDC    A,#00H
03B9 FA                MOV     R2,A
03BA 120000      E     LCALL   ?C?LLDPTR0
03BD 120000      E     LCALL   ?C?ULDIV
03C0 AC00              MOV     R4,AR0
03C2 AD01              MOV     R5,AR1
03C4 AE02              MOV     R6,AR2
03C6 AF03              MOV     R7,AR3
03C8 900000      R     MOV     DPTR,#actEmEepromRowNum
03CB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 515
03CE 7F00              MOV     R7,#00H
03D0 7E00              MOV     R6,#00H
03D2 7D00              MOV     R5,#00H
03D4 7C00              MOV     R4,#00H
03D6 900000      R     MOV     DPTR,#tmpRowAddr
03D9 120000      E     LCALL   ?C?LLDXDATA0
03DC C3                CLR     C
03DD 120000      E     LCALL   ?C?ULCMP
03E0 7003              JNZ     $ + 5H
03E2 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 524
03E5 7B01              MOV     R3,#01H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 60  

03E7 7A00        R     MOV     R2,#HIGH startAddr
03E9 7900        R     MOV     R1,#LOW startAddr
03EB C003              PUSH    AR3
03ED C002              PUSH    AR2
03EF C001              PUSH    AR1
03F1 7B01              MOV     R3,#01H
03F3 7A00        R     MOV     R2,#HIGH endAddr
03F5 7900        R     MOV     R1,#LOW endAddr
03F7 900000      R     MOV     DPTR,#?_GetAddresses?BYTE+03H
03FA 120000      E     LCALL   ?C?PSTXDATA
03FD 7B01              MOV     R3,#01H
03FF 7A00        R     MOV     R2,#HIGH eeHeaderDataOffset
0401 7900        R     MOV     R1,#LOW eeHeaderDataOffset
0403 900000      R     MOV     DPTR,#?_GetAddresses?BYTE+06H
0406 120000      E     LCALL   ?C?PSTXDATA
0409 900000      R     MOV     DPTR,#actEmEepromRowNum
040C 120000      E     LCALL   ?C?LLDXDATA
040F 900000      R     MOV     DPTR,#?_GetAddresses?BYTE+09H
0412 120000      E     LCALL   ?C?LSTXDATA
0415 900000      R     MOV     DPTR,#tmpRowAddr
0418 120000      E     LCALL   ?C?LLDXDATA
041B EF                MOV     A,R7
041C 2404              ADD     A,#04H
041E FF                MOV     R7,A
041F EE                MOV     A,R6
0420 3400              ADDC    A,#00H
0422 FE                MOV     R6,A
0423 ED                MOV     A,R5
0424 3400              ADDC    A,#00H
0426 FD                MOV     R5,A
0427 EC                MOV     A,R4
0428 3400              ADDC    A,#00H
042A FC                MOV     R4,A
042B A907              MOV     R1,AR7
042D AA06              MOV     R2,AR6
042F AB05              MOV     R3,AR5
0431 120000      E     LCALL   ?C?LLDPTR
0434 900000      R     MOV     DPTR,#?_GetAddresses?BYTE+0DH
0437 120000      E     LCALL   ?C?LSTXDATA
043A 900000      R     MOV     DPTR,#tmpRowAddr
043D 120000      E     LCALL   ?C?LLDXDATA
0440 EF                MOV     A,R7
0441 2408              ADD     A,#08H
0443 FF                MOV     R7,A
0444 EE                MOV     A,R6
0445 3400              ADDC    A,#00H
0447 FE                MOV     R6,A
0448 ED                MOV     A,R5
0449 3400              ADDC    A,#00H
044B FD                MOV     R5,A
044C EC                MOV     A,R4
044D 3400              ADDC    A,#00H
044F FC                MOV     R4,A
0450 A907              MOV     R1,AR7
0452 AA06              MOV     R2,AR6
0454 AB05              MOV     R3,AR5
0456 120000      E     LCALL   ?C?LLDPTR
0459 900000      R     MOV     DPTR,#?_GetAddresses?BYTE+011H
045C 120000      E     LCALL   ?C?LSTXDATA
045F D001              POP     AR1
0461 D002              POP     AR2
0463 D003              POP     AR3
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 61  

0465 120000      R     LCALL   _GetAddresses
0468 900000      R     MOV     DPTR,#skipOperation
046B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 525
046E 8017              SJMP    ?C0072
0470         ?C0071:
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 529
0470 900000      R     MOV     DPTR,#skipOperation
0473 120000      E     LCALL   ?C?LLDXDATA
0476 7B01              MOV     R3,#01H
0478 7A00              MOV     R2,#00H
047A 7900              MOV     R1,#00H
047C 7800              MOV     R0,#00H
047E 120000      E     LCALL   ?C?LADD
0481 900000      R     MOV     DPTR,#skipOperation
0484 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 530
0487         ?C0072:
                                           ; SOURCE LINE # 533
0487 900000      R     MOV     DPTR,#skipOperation
048A 120000      E     LCALL   ?C?LLDXDATA
048D EF                MOV     A,R7
048E 4E                ORL     A,R6
048F 6003              JZ      $ + 5H
0491 020000      R     LJMP    ?C0073
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
0494 7B01              MOV     R3,#01H
0496 7A00        R     MOV     R2,#HIGH writeRamBuffer
0498 7900        R     MOV     R1,#LOW writeRamBuffer
049A AF01              MOV     R7,AR1
049C AE02              MOV     R6,AR2
049E AD03              MOV     R5,AR3
04A0 7C00              MOV     R4,#00H
04A2 900000      R     MOV     DPTR,#startAddr
04A5 120000      E     LCALL   ?C?LLDXDATA0
04A8 120000      E     LCALL   ?C?LADD
04AB 900000      R     MOV     DPTR,#dataAddr
04AE 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 540
04B1 900000      R     MOV     DPTR,#tmpRowAddr
04B4 120000      E     LCALL   ?C?LLDXDATA
04B7 EF                MOV     A,R7
04B8 240C              ADD     A,#0CH
04BA FF                MOV     R7,A
04BB EE                MOV     A,R6
04BC 3400              ADDC    A,#00H
04BE FE                MOV     R6,A
04BF ED                MOV     A,R5
04C0 3400              ADDC    A,#00H
04C2 FD                MOV     R5,A
04C3 EC                MOV     A,R4
04C4 3400              ADDC    A,#00H
04C6 FC                MOV     R4,A
04C7 900000      R     MOV     DPTR,#eeHeaderDataOffset
04CA 120000      E     LCALL   ?C?LLDXDATA0
04CD 120000      E     LCALL   ?C?LADD
04D0 900000      R     MOV     DPTR,#tmpRowAddr
04D3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 541
04D6 900000      R     MOV     DPTR,#startAddr
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 62  

04D9 120000      E     LCALL   ?C?LLDXDATA
04DC AB07              MOV     R3,AR7
04DE AA06              MOV     R2,AR6
04E0 900000      R     MOV     DPTR,#endAddr
04E3 120000      E     LCALL   ?C?LLDXDATA
04E6 C3                CLR     C
04E7 EF                MOV     A,R7
04E8 9B                SUBB    A,R3
04E9 FF                MOV     R7,A
04EA EE                MOV     A,R6
04EB 9A                SUBB    A,R2
04EC FE                MOV     R6,A
04ED C006              PUSH    AR6
04EF C007              PUSH    AR7
04F1 900000      R     MOV     DPTR,#tmpRowAddr
04F4 120000      E     LCALL   ?C?LLDXDATA
04F7 A907              MOV     R1,AR7
04F9 AA06              MOV     R2,AR6
04FB AB05              MOV     R3,AR5
04FD C003              PUSH    AR3
04FF C002              PUSH    AR2
0501 C001              PUSH    AR1
0503 900000      R     MOV     DPTR,#dataAddr
0506 120000      E     LCALL   ?C?LLDXDATA
0509 A907              MOV     R1,AR7
050B AA06              MOV     R2,AR6
050D AB05              MOV     R3,AR5
050F A801              MOV     R0,AR1
0511 AC02              MOV     R4,AR2
0513 AD03              MOV     R5,AR3
0515 D001              POP     AR1
0517 D002              POP     AR2
0519 D003              POP     AR3
051B D007              POP     AR7
051D D006              POP     AR6
051F 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 542
0522         ?C0073:
                                           ; SOURCE LINE # 545
0522 900000      R     MOV     DPTR,#context
0525 120000      E     LCALL   ?C?PLDXDATA
0528 E9                MOV     A,R1
0529 2414              ADD     A,#014H
052B F9                MOV     R1,A
052C EA                MOV     A,R2
052D 3400              ADDC    A,#00H
052F FA                MOV     R2,A
0530 120000      E     LCALL   ?C?CLDPTR
0533 FF                MOV     R7,A
0534 EF                MOV     A,R7
0535 601B              JZ      ?C0068
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 548
0537 7B01              MOV     R3,#01H
0539 7A00        R     MOV     R2,#HIGH writeRamBuffer+080H
053B 7900        R     MOV     R1,#LOW writeRamBuffer+080H
053D 7F80              MOV     R7,#080H
053F 7E00              MOV     R6,#00H
0541 7D00              MOV     R5,#00H
0543 7C00              MOV     R4,#00H
0545 120000      R     LCALL   _CalcChecksum
0548 E4                CLR     A
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 63  

0549 FC                MOV     R4,A
054A FD                MOV     R5,A
054B FE                MOV     R6,A
054C 900000      R     MOV     DPTR,#writeRamBuffer+07CH
054F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
0552         ?C0068:
0552 900000      R     MOV     DPTR,#i
0555 120000      E     LCALL   ?C?LLDXDATA
0558 7B01              MOV     R3,#01H
055A 7A00              MOV     R2,#00H
055C 7900              MOV     R1,#00H
055E 7800              MOV     R0,#00H
0560 120000      E     LCALL   ?C?LADD
0563 900000      R     MOV     DPTR,#i
0566 120000      E     LCALL   ?C?LSTXDATA
0569 020000      R     LJMP    ?C0066
056C         ?C0067:
                                           ; SOURCE LINE # 554
056C 900000      R     MOV     DPTR,#emEepromRowAddr
056F 120000      E     LCALL   ?C?LLDXDATA
0572 7B01              MOV     R3,#01H
0574 7A00        R     MOV     R2,#HIGH writeRamBuffer
0576 7900        R     MOV     R1,#LOW writeRamBuffer
0578 C003              PUSH    AR3
057A C002              PUSH    AR2
057C C001              PUSH    AR1
057E 900000      R     MOV     DPTR,#context
0581 120000      E     LCALL   ?C?PLDXDATA
0584 900000      R     MOV     DPTR,#?_WriteRow?BYTE+07H
0587 120000      E     LCALL   ?C?PSTXDATA
058A D001              POP     AR1
058C D002              POP     AR2
058E D003              POP     AR3
0590 120000      R     LCALL   _WriteRow
0593 900000      R     MOV     DPTR,#ret
0596 EF                MOV     A,R7
0597 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 555
0598 900000      R     MOV     DPTR,#emEepromRowAddr
059B 120000      E     LCALL   ?C?LLDXDATA
059E 900000      R     MOV     DPTR,#tmpRowAddr
05A1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 558
05A4 900000      R     MOV     DPTR,#context
05A7 120000      E     LCALL   ?C?PLDXDATA
05AA E9                MOV     A,R1
05AB 2414              ADD     A,#014H
05AD F9                MOV     R1,A
05AE EA                MOV     A,R2
05AF 3400              ADDC    A,#00H
05B1 FA                MOV     R2,A
05B2 120000      E     LCALL   ?C?CLDPTR
05B5 FF                MOV     R7,A
05B6 EF                MOV     A,R7
05B7 6060              JZ      ?C0075
05B9 900000      R     MOV     DPTR,#ret
05BC E0                MOVX    A,@DPTR
05BD FF                MOV     R7,A
05BE EF                MOV     A,R7
05BF 7058              JNZ     ?C0075
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 64  

                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 561
05C1 900000      R     MOV     DPTR,#context
05C4 120000      E     LCALL   ?C?PLDXDATA
05C7 E9                MOV     A,R1
05C8 2416              ADD     A,#016H
05CA F9                MOV     R1,A
05CB EA                MOV     A,R2
05CC 3400              ADDC    A,#00H
05CE FA                MOV     R2,A
05CF 120000      E     LCALL   ?C?LLDPTR0
05D2 900000      R     MOV     DPTR,#emEepromRowAddr
05D5 120000      E     LCALL   ?C?LLDXDATA
05D8 120000      E     LCALL   ?C?LSUB
05DB 900000      R     MOV     DPTR,#context
05DE 120000      E     LCALL   ?C?PLDXDATA
05E1 120000      E     LCALL   ?C?LLDPTR0
05E4 120000      E     LCALL   ?C?LADD
05E7 900000      R     MOV     DPTR,#tmpRowAddr
05EA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 564
05ED 900000      R     MOV     DPTR,#tmpRowAddr
05F0 120000      E     LCALL   ?C?LLDXDATA
05F3 7B01              MOV     R3,#01H
05F5 7A00        R     MOV     R2,#HIGH writeRamBuffer
05F7 7900        R     MOV     R1,#LOW writeRamBuffer
05F9 C003              PUSH    AR3
05FB C002              PUSH    AR2
05FD C001              PUSH    AR1
05FF 900000      R     MOV     DPTR,#context
0602 120000      E     LCALL   ?C?PLDXDATA
0605 900000      R     MOV     DPTR,#?_WriteRow?BYTE+07H
0608 120000      E     LCALL   ?C?PSTXDATA
060B D001              POP     AR1
060D D002              POP     AR2
060F D003              POP     AR3
0611 120000      R     LCALL   _WriteRow
0614 900000      R     MOV     DPTR,#ret
0617 EF                MOV     A,R7
0618 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
0619         ?C0075:
                                           ; SOURCE LINE # 567
0619 900000      R     MOV     DPTR,#ret
061C E0                MOVX    A,@DPTR
061D FF                MOV     R7,A
061E EF                MOV     A,R7
061F 7031              JNZ     ?C0057
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 572
0621 900000      R     MOV     DPTR,#emEepromRowAddr
0624 120000      E     LCALL   ?C?LLDXDATA
0627 900000      R     MOV     DPTR,#context
062A 120000      E     LCALL   ?C?PLDXDATA
062D E9                MOV     A,R1
062E 2408              ADD     A,#08H
0630 F9                MOV     R1,A
0631 EA                MOV     A,R2
0632 3400              ADDC    A,#00H
0634 FA                MOV     R2,A
0635 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 573
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 65  

                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
0638         ?C0060:
0638 900000      R     MOV     DPTR,#wrCnt
063B 120000      E     LCALL   ?C?LLDXDATA
063E 7B01              MOV     R3,#01H
0640 7A00              MOV     R2,#00H
0642 7900              MOV     R1,#00H
0644 7800              MOV     R0,#00H
0646 120000      E     LCALL   ?C?LADD
0649 900000      R     MOV     DPTR,#wrCnt
064C 120000      E     LCALL   ?C?LSTXDATA
064F 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 579
0652         ?C0057:
                                           ; SOURCE LINE # 580
0652 900000      R     MOV     DPTR,#ret
0655 E0                MOVX    A,@DPTR
0656 FF                MOV     R7,A
                                           ; SOURCE LINE # 581
0657         ?C0078:
0657 22                RET     
             ; FUNCTION _Cy_Em_EEPROM_Write (END)

             ; FUNCTION _Cy_Em_EEPROM_Erase (BEGIN)
                                           ; SOURCE LINE # 629
0000 900000      R     MOV     DPTR,#context
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 633
0006 900000      R     MOV     DPTR,#context
0009 120000      E     LCALL   ?C?PLDXDATA
000C E9                MOV     A,R1
000D 2408              ADD     A,#08H
000F F9                MOV     R1,A
0010 EA                MOV     A,R2
0011 3400              ADDC    A,#00H
0013 FA                MOV     R2,A
0014 120000      E     LCALL   ?C?LLDPTR
0017 900000      R     MOV     DPTR,#emEepromRowAddr
001A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 635
001D 900000      R     MOV     DPTR,#ret
0020 7404              MOV     A,#04H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 636
0023 7BFF              MOV     R3,#0FFH
0025 7A00        R     MOV     R2,#HIGH _?ix1000
0027 7900        R     MOV     R1,#LOW _?ix1000
0029 C003              PUSH    AR3
002B C002              PUSH    AR2
002D C001              PUSH    AR1
002F 7B01              MOV     R3,#01H
0031 7A00        R     MOV     R2,#HIGH writeRamBuffer
0033 7900        R     MOV     R1,#LOW writeRamBuffer
0035 A801              MOV     R0,AR1
0037 AC02              MOV     R4,AR2
0039 AD03              MOV     R5,AR3
003B D001              POP     AR1
003D D002              POP     AR2
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 66  

003F D003              POP     AR3
0041 7E01              MOV     R6,#01H
0043 7F00              MOV     R7,#00H
0045 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 643
0048 900000      R     MOV     DPTR,#emEepromRowAddr
004B 120000      E     LCALL   ?C?LLDXDATA
004E A907              MOV     R1,AR7
0050 AA06              MOV     R2,AR6
0052 AB05              MOV     R3,AR5
0054 120000      E     LCALL   ?C?LLDPTR
0057 900000      R     MOV     DPTR,#seqNum
005A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 646
005D 900000      R     MOV     DPTR,#seqNum
0060 120000      E     LCALL   ?C?LLDXDATA
0063 EF                MOV     A,R7
0064 4E                ORL     A,R6
0065 7003              JNZ     $ + 5H
0067 020000      R     LJMP    ?C0079
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 649
006A 900000      R     MOV     DPTR,#context
006D 120000      E     LCALL   ?C?PLDXDATA
0070 E9                MOV     A,R1
0071 2410              ADD     A,#010H
0073 F9                MOV     R1,A
0074 EA                MOV     A,R2
0075 3400              ADDC    A,#00H
0077 FA                MOV     R2,A
0078 120000      E     LCALL   ?C?LLDPTR
007B 900000      R     MOV     DPTR,#context
007E 120000      E     LCALL   ?C?PLDXDATA
0081 E9                MOV     A,R1
0082 2404              ADD     A,#04H
0084 F9                MOV     R1,A
0085 EA                MOV     A,R2
0086 3400              ADDC    A,#00H
0088 FA                MOV     R2,A
0089 120000      E     LCALL   ?C?LLDPTR0
008C 120000      E     LCALL   ?C?LMUL
008F 900000      R     MOV     DPTR,#numWrites
0092 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 656
0095 900000      R     MOV     DPTR,#context
0098 120000      E     LCALL   ?C?PLDXDATA
009B E9                MOV     A,R1
009C 2414              ADD     A,#014H
009E F9                MOV     R1,A
009F EA                MOV     A,R2
00A0 3400              ADDC    A,#00H
00A2 FA                MOV     R2,A
00A3 120000      E     LCALL   ?C?CLDPTR
00A6 FF                MOV     R7,A
00A7 EF                MOV     A,R7
00A8 601B              JZ      ?C0080
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 659
00AA 7B01              MOV     R3,#01H
00AC 7A00        R     MOV     R2,#HIGH writeRamBuffer+080H
00AE 7900        R     MOV     R1,#LOW writeRamBuffer+080H
00B0 7F80              MOV     R7,#080H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 67  

00B2 7E00              MOV     R6,#00H
00B4 7D00              MOV     R5,#00H
00B6 7C00              MOV     R4,#00H
00B8 120000      R     LCALL   _CalcChecksum
00BB E4                CLR     A
00BC FC                MOV     R4,A
00BD FD                MOV     R5,A
00BE FE                MOV     R6,A
00BF 900000      R     MOV     DPTR,#writeRamBuffer+07CH
00C2 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 661
00C5         ?C0080:
                                           ; SOURCE LINE # 663
00C5 7F00              MOV     R7,#00H
00C7 7E00              MOV     R6,#00H
00C9 7D00              MOV     R5,#00H
00CB 7C00              MOV     R4,#00H
00CD 900000      R     MOV     DPTR,#i
00D0 120000      E     LCALL   ?C?LSTXDATA
00D3         ?C0081:
00D3 900000      R     MOV     DPTR,#numWrites
00D6 120000      E     LCALL   ?C?LLDXDATA
00D9 900000      R     MOV     DPTR,#i
00DC 120000      E     LCALL   ?C?LLDXDATA0
00DF C3                CLR     C
00E0 120000      E     LCALL   ?C?ULCMP
00E3 4003              JC      $ + 5H
00E5 020000      R     LJMP    ?C0079
                                           ; SOURCE LINE # 664
                                           ; SOURCE LINE # 685
00E8 900000      R     MOV     DPTR,#emEepromRowAddr
00EB 120000      E     LCALL   ?C?LLDXDATA
00EE A907              MOV     R1,AR7
00F0 AA06              MOV     R2,AR6
00F2 AB05              MOV     R3,AR5
00F4 120000      E     LCALL   ?C?LLDPTR
00F7 900000      R     MOV     DPTR,#seqNum
00FA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 689
00FD 900000      R     MOV     DPTR,#seqNum
0100 120000      E     LCALL   ?C?LLDXDATA
0103 7B01              MOV     R3,#01H
0105 7A00        R     MOV     R2,#HIGH emEepromRowAddr
0107 7900        R     MOV     R1,#LOW emEepromRowAddr
0109 C003              PUSH    AR3
010B C002              PUSH    AR2
010D C001              PUSH    AR1
010F 7B01              MOV     R3,#01H
0111 7A00        R     MOV     R2,#HIGH emEepromRowRdAddr
0113 7900        R     MOV     R1,#LOW emEepromRowRdAddr
0115 900000      R     MOV     DPTR,#?_GetNextRowToWrite?BYTE+07H
0118 120000      E     LCALL   ?C?PSTXDATA
011B 900000      R     MOV     DPTR,#context
011E 120000      E     LCALL   ?C?PLDXDATA
0121 900000      R     MOV     DPTR,#?_GetNextRowToWrite?BYTE+0AH
0124 120000      E     LCALL   ?C?PSTXDATA
0127 D001              POP     AR1
0129 D002              POP     AR2
012B D003              POP     AR3
012D 120000      R     LCALL   _GetNextRowToWrite
                                           ; SOURCE LINE # 690
0130 900000      R     MOV     DPTR,#seqNum
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 68  

0133 120000      E     LCALL   ?C?LLDXDATA
0136 7B01              MOV     R3,#01H
0138 7A00              MOV     R2,#00H
013A 7900              MOV     R1,#00H
013C 7800              MOV     R0,#00H
013E 120000      E     LCALL   ?C?LADD
0141 900000      R     MOV     DPTR,#seqNum
0144 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 691
0147 900000      R     MOV     DPTR,#seqNum
014A 120000      E     LCALL   ?C?LLDXDATA
014D 900000      R     MOV     DPTR,#writeRamBuffer
0150 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 692
0153 900000      R     MOV     DPTR,#emEepromRowAddr
0156 120000      E     LCALL   ?C?LLDXDATA
0159 C004              PUSH    AR4
015B C005              PUSH    AR5
015D C006              PUSH    AR6
015F C007              PUSH    AR7
0161 7B01              MOV     R3,#01H
0163 7A00        R     MOV     R2,#HIGH writeRamBuffer
0165 7900        R     MOV     R1,#LOW writeRamBuffer
0167 AF01              MOV     R7,AR1
0169 AE02              MOV     R6,AR2
016B AD03              MOV     R5,AR3
016D 7C00              MOV     R4,#00H
016F 900000      R     MOV     DPTR,#?_EraseRow?BYTE+04H
0172 120000      E     LCALL   ?C?LSTXDATA
0175 900000      R     MOV     DPTR,#context
0178 120000      E     LCALL   ?C?PLDXDATA
017B 900000      R     MOV     DPTR,#?_EraseRow?BYTE+08H
017E 120000      E     LCALL   ?C?PSTXDATA
0181 D007              POP     AR7
0183 D006              POP     AR6
0185 D005              POP     AR5
0187 D004              POP     AR4
0189 120000      R     LCALL   _EraseRow
018C 900000      R     MOV     DPTR,#ret
018F EF                MOV     A,R7
0190 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 694
0191 900000      R     MOV     DPTR,#i
0194 120000      E     LCALL   ?C?LLDXDATA
0197 7B01              MOV     R3,#01H
0199 7A00              MOV     R2,#00H
019B 7900              MOV     R1,#00H
019D 7800              MOV     R0,#00H
019F 120000      E     LCALL   ?C?LADD
01A2 900000      R     MOV     DPTR,#i
01A5 120000      E     LCALL   ?C?LSTXDATA
01A8 020000      R     LJMP    ?C0081
                                           ; SOURCE LINE # 714
01AB         ?C0079:
                                           ; SOURCE LINE # 715
01AB 900000      R     MOV     DPTR,#ret
01AE E0                MOVX    A,@DPTR
01AF FF                MOV     R7,A
                                           ; SOURCE LINE # 716
01B0         ?C0084:
01B0 22                RET     
             ; FUNCTION _Cy_Em_EEPROM_Erase (END)
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 69  


             ; FUNCTION _Cy_Em_EEPROM_NumWrites (BEGIN)
                                           ; SOURCE LINE # 732
0000 900000      R     MOV     DPTR,#context
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 734
0006 900000      R     MOV     DPTR,#context
0009 120000      E     LCALL   ?C?PLDXDATA
000C E9                MOV     A,R1
000D 2408              ADD     A,#08H
000F F9                MOV     R1,A
0010 EA                MOV     A,R2
0011 3400              ADDC    A,#00H
0013 FA                MOV     R2,A
0014 120000      E     LCALL   ?C?LLDPTR
0017 A907              MOV     R1,AR7
0019 AA06              MOV     R2,AR6
001B AB05              MOV     R3,AR5
001D 120000      E     LCALL   ?C?LLDPTR
                                           ; SOURCE LINE # 735
0020         ?C0085:
0020 22                RET     
             ; FUNCTION _Cy_Em_EEPROM_NumWrites (END)

             ; FUNCTION _FindLastWrittenRow (BEGIN)
                                           ; SOURCE LINE # 758
0000 900000      R     MOV     DPTR,#lastWrRowPtr
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 760
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#seqNum
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 761
0014 7F00              MOV     R7,#00H
0016 7E00              MOV     R6,#00H
0018 7D00              MOV     R5,#00H
001A 7C00              MOV     R4,#00H
001C 900000      R     MOV     DPTR,#prevSeqNum
001F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 763
0022 900000      R     MOV     DPTR,#context
0025 120000      E     LCALL   ?C?PLDXDATA
0028 E9                MOV     A,R1
0029 2416              ADD     A,#016H
002B F9                MOV     R1,A
002C EA                MOV     A,R2
002D 3400              ADDC    A,#00H
002F FA                MOV     R2,A
0030 120000      E     LCALL   ?C?LLDPTR
0033 900000      R     MOV     DPTR,#emEepromAddr
0036 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 765
0039 900000      R     MOV     DPTR,#emEepromAddr
003C 120000      E     LCALL   ?C?LLDXDATA
003F 900000      R     MOV     DPTR,#lastWrRowPtr
0042 120000      E     LCALL   ?C?PLDXDATA
0045 120000      E     LCALL   ?C?LSTPTR
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 70  

                                           ; SOURCE LINE # 767
0048 7F00              MOV     R7,#00H
004A 7E00              MOV     R6,#00H
004C 7D00              MOV     R5,#00H
004E 7C00              MOV     R4,#00H
0050 900000      R     MOV     DPTR,#numRows
0053 120000      E     LCALL   ?C?LSTXDATA
0056         ?C0086:
0056 900000      R     MOV     DPTR,#context
0059 120000      E     LCALL   ?C?PLDXDATA
005C E9                MOV     A,R1
005D 2410              ADD     A,#010H
005F F9                MOV     R1,A
0060 EA                MOV     A,R2
0061 3400              ADDC    A,#00H
0063 FA                MOV     R2,A
0064 120000      E     LCALL   ?C?LLDPTR
0067 900000      R     MOV     DPTR,#context
006A 120000      E     LCALL   ?C?PLDXDATA
006D E9                MOV     A,R1
006E 2404              ADD     A,#04H
0070 F9                MOV     R1,A
0071 EA                MOV     A,R2
0072 3400              ADDC    A,#00H
0074 FA                MOV     R2,A
0075 120000      E     LCALL   ?C?LLDPTR0
0078 120000      E     LCALL   ?C?LMUL
007B 900000      R     MOV     DPTR,#numRows
007E 120000      E     LCALL   ?C?LLDXDATA0
0081 C3                CLR     C
0082 120000      E     LCALL   ?C?ULCMP
0085 4003              JC      $ + 5H
0087 020000      R     LJMP    ?C0090
                                           ; SOURCE LINE # 768
                                           ; SOURCE LINE # 769
008A 900000      R     MOV     DPTR,#emEepromAddr
008D 120000      E     LCALL   ?C?LLDXDATA
0090 A907              MOV     R1,AR7
0092 AA06              MOV     R2,AR6
0094 AB05              MOV     R3,AR5
0096 120000      E     LCALL   ?C?LLDPTR
0099 900000      R     MOV     DPTR,#seqNum
009C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 770
009F 900000      R     MOV     DPTR,#seqNum
00A2 120000      E     LCALL   ?C?LLDXDATA
00A5 EF                MOV     A,R7
00A6 4E                ORL     A,R6
00A7 602D              JZ      ?C0089
00A9 900000      R     MOV     DPTR,#prevSeqNum
00AC 120000      E     LCALL   ?C?LLDXDATA
00AF 900000      R     MOV     DPTR,#seqNum
00B2 120000      E     LCALL   ?C?LLDXDATA0
00B5 D3                SETB    C
00B6 120000      E     LCALL   ?C?ULCMP
00B9 401B              JC      ?C0089
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 775
00BB 900000      R     MOV     DPTR,#seqNum
00BE 120000      E     LCALL   ?C?LLDXDATA
00C1 900000      R     MOV     DPTR,#prevSeqNum
00C4 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 71  

                                           ; SOURCE LINE # 776
00C7 900000      R     MOV     DPTR,#emEepromAddr
00CA 120000      E     LCALL   ?C?LLDXDATA
00CD 900000      R     MOV     DPTR,#lastWrRowPtr
00D0 120000      E     LCALL   ?C?PLDXDATA
00D3 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 777
00D6         ?C0089:
                                           ; SOURCE LINE # 780
00D6 900000      R     MOV     DPTR,#emEepromAddr
00D9 120000      E     LCALL   ?C?LLDXDATA
00DC EF                MOV     A,R7
00DD 2400              ADD     A,#00H
00DF FF                MOV     R7,A
00E0 EE                MOV     A,R6
00E1 3401              ADDC    A,#01H
00E3 FE                MOV     R6,A
00E4 ED                MOV     A,R5
00E5 3400              ADDC    A,#00H
00E7 FD                MOV     R5,A
00E8 EC                MOV     A,R4
00E9 3400              ADDC    A,#00H
00EB FC                MOV     R4,A
00EC 900000      R     MOV     DPTR,#emEepromAddr
00EF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 781
00F2 900000      R     MOV     DPTR,#numRows
00F5 120000      E     LCALL   ?C?LLDXDATA
00F8 7B01              MOV     R3,#01H
00FA 7A00              MOV     R2,#00H
00FC 7900              MOV     R1,#00H
00FE 7800              MOV     R0,#00H
0100 120000      E     LCALL   ?C?LADD
0103 900000      R     MOV     DPTR,#numRows
0106 120000      E     LCALL   ?C?LSTXDATA
0109 020000      R     LJMP    ?C0086
                                           ; SOURCE LINE # 782
010C         ?C0090:
010C 22                RET     
             ; FUNCTION _FindLastWrittenRow (END)

             ; FUNCTION _GetRowAddrBySeqNum (BEGIN)
                                           ; SOURCE LINE # 802
0000 900000      R     MOV     DPTR,#seqNum
0003 120000      E     LCALL   ?C?LSTXDATA
0006 900000      R     MOV     DPTR,#context
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
000C 900000      R     MOV     DPTR,#context
000F 120000      E     LCALL   ?C?PLDXDATA
0012 E9                MOV     A,R1
0013 2416              ADD     A,#016H
0015 F9                MOV     R1,A
0016 EA                MOV     A,R2
0017 3400              ADDC    A,#00H
0019 FA                MOV     R2,A
001A 120000      E     LCALL   ?C?LLDPTR
001D 900000      R     MOV     DPTR,#emEepromAddr
0020 120000      E     LCALL   ?C?LSTXDATA
0023         ?C0091:
                                           ; SOURCE LINE # 806
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 72  

0023 900000      R     MOV     DPTR,#emEepromAddr
0026 120000      E     LCALL   ?C?LLDXDATA
0029 A907              MOV     R1,AR7
002B AA06              MOV     R2,AR6
002D AB05              MOV     R3,AR5
002F 120000      E     LCALL   ?C?LLDPTR
0032 900000      R     MOV     DPTR,#seqNum
0035 120000      E     LCALL   ?C?LLDXDATA0
0038 C3                CLR     C
0039 120000      E     LCALL   ?C?ULCMP
003C 604A              JZ      ?C0092
                                           ; SOURCE LINE # 807
                                           ; SOURCE LINE # 809
003E 900000      R     MOV     DPTR,#emEepromAddr
0041 120000      E     LCALL   ?C?LLDXDATA
0044 EF                MOV     A,R7
0045 2400              ADD     A,#00H
0047 FF                MOV     R7,A
0048 EE                MOV     A,R6
0049 3401              ADDC    A,#01H
004B FE                MOV     R6,A
004C ED                MOV     A,R5
004D 3400              ADDC    A,#00H
004F FD                MOV     R5,A
0050 EC                MOV     A,R4
0051 3400              ADDC    A,#00H
0053 FC                MOV     R4,A
0054 900000      R     MOV     DPTR,#emEepromAddr
0057 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 811
005A 900000      R     MOV     DPTR,#context
005D 120000      E     LCALL   ?C?PLDXDATA
0060 120000      E     LCALL   ?C?LLDPTR
0063 900000      R     MOV     DPTR,#emEepromAddr
0066 120000      E     LCALL   ?C?LLDXDATA0
0069 C3                CLR     C
006A 120000      E     LCALL   ?C?ULCMP
006D 4004              JC      ?C0094
006F 7F00              MOV     R7,#00H
0071 8002              SJMP    ?C0095
0073         ?C0094:
0073 7F01              MOV     R7,#01H
0075         ?C0095:
0075 EF                MOV     A,R7
0076 6401              XRL     A,#01H
0078 60A9              JZ      ?C0091
                                           ; SOURCE LINE # 813
                                           ; SOURCE LINE # 814
007A 7F00              MOV     R7,#00H
007C 7E00              MOV     R6,#00H
007E 7D00              MOV     R5,#00H
0080 7C00              MOV     R4,#00H
0082 900000      R     MOV     DPTR,#emEepromAddr
0085 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 818
0088         ?C0092:
                                           ; SOURCE LINE # 820
0088 900000      R     MOV     DPTR,#emEepromAddr
008B 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 821
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 73  

008E         ?C0096:
008E 22                RET     
             ; FUNCTION _GetRowAddrBySeqNum (END)

             ; FUNCTION _GetNextRowToWrite (BEGIN)
                                           ; SOURCE LINE # 847
0000 900000      R     MOV     DPTR,#seqNum
0003 120000      E     LCALL   ?C?LSTXDATA
0006 900000      R     MOV     DPTR,#rowToWrPtr
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 855
000C 900000      R     MOV     DPTR,#seqNum
000F 120000      E     LCALL   ?C?LLDXDATA
0012 EF                MOV     A,R7
0013 4E                ORL     A,R6
0014 601C              JZ      ?C0097
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 857
0016 900000      R     MOV     DPTR,#rowToWrPtr
0019 120000      E     LCALL   ?C?PLDXDATA
001C 120000      E     LCALL   ?C?LLDPTR
001F EF                MOV     A,R7
0020 2400              ADD     A,#00H
0022 FF                MOV     R7,A
0023 EE                MOV     A,R6
0024 3401              ADDC    A,#01H
0026 FE                MOV     R6,A
0027 ED                MOV     A,R5
0028 3400              ADDC    A,#00H
002A FD                MOV     R5,A
002B EC                MOV     A,R4
002C 3400              ADDC    A,#00H
002E FC                MOV     R4,A
002F 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 858
0032         ?C0097:
                                           ; SOURCE LINE # 863
0032 900000      R     MOV     DPTR,#context
0035 120000      E     LCALL   ?C?PLDXDATA
0038 120000      E     LCALL   ?C?LLDPTR
003B 900000      R     MOV     DPTR,#rowToWrPtr
003E 120000      E     LCALL   ?C?PLDXDATA
0041 120000      E     LCALL   ?C?LLDPTR0
0044 C3                CLR     C
0045 120000      E     LCALL   ?C?ULCMP
0048 4004              JC      ?C0099
004A 7F00              MOV     R7,#00H
004C 8002              SJMP    ?C0100
004E         ?C0099:
004E 7F01              MOV     R7,#01H
0050         ?C0100:
0050 EF                MOV     A,R7
0051 6401              XRL     A,#01H
0053 601A              JZ      ?C0098
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
0055 900000      R     MOV     DPTR,#context
0058 120000      E     LCALL   ?C?PLDXDATA
005B E9                MOV     A,R1
005C 2416              ADD     A,#016H
005E F9                MOV     R1,A
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 74  

005F EA                MOV     A,R2
0060 3400              ADDC    A,#00H
0062 FA                MOV     R2,A
0063 120000      E     LCALL   ?C?LLDPTR
0066 900000      R     MOV     DPTR,#rowToWrPtr
0069 120000      E     LCALL   ?C?PLDXDATA
006C 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 867
006F         ?C0098:
                                           ; SOURCE LINE # 869
006F 7F00              MOV     R7,#00H
0071 7E00              MOV     R6,#00H
0073 7D00              MOV     R5,#00H
0075 7C00              MOV     R4,#00H
0077 900000      R     MOV     DPTR,#rowToRdPtr
007A 120000      E     LCALL   ?C?PLDXDATA
007D 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 875
0080 900000      R     MOV     DPTR,#context
0083 120000      E     LCALL   ?C?PLDXDATA
0086 E9                MOV     A,R1
0087 2404              ADD     A,#04H
0089 F9                MOV     R1,A
008A EA                MOV     A,R2
008B 3400              ADDC    A,#00H
008D FA                MOV     R2,A
008E 120000      E     LCALL   ?C?LLDPTR
0091 900000      R     MOV     DPTR,#seqNum
0094 120000      E     LCALL   ?C?LLDXDATA0
0097 C3                CLR     C
0098 120000      E     LCALL   ?C?ULCMP
009B 5003              JNC     $ + 5H
009D 020000      R     LJMP    ?C0106
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 878
00A0 900000      R     MOV     DPTR,#context
00A3 120000      E     LCALL   ?C?PLDXDATA
00A6 E9                MOV     A,R1
00A7 2410              ADD     A,#010H
00A9 F9                MOV     R1,A
00AA EA                MOV     A,R2
00AB 3400              ADDC    A,#00H
00AD FA                MOV     R2,A
00AE 120000      E     LCALL   ?C?LLDPTR
00B1 D3                SETB    C
00B2 EF                MOV     A,R7
00B3 9401              SUBB    A,#01H
00B5 EE                MOV     A,R6
00B6 9400              SUBB    A,#00H
00B8 5003              JNC     $ + 5H
00BA 020000      R     LJMP    ?C0102
                                           ; SOURCE LINE # 879
                                           ; SOURCE LINE # 883
00BD 900000      R     MOV     DPTR,#context
00C0 120000      E     LCALL   ?C?PLDXDATA
00C3 E9                MOV     A,R1
00C4 2404              ADD     A,#04H
00C6 F9                MOV     R1,A
00C7 EA                MOV     A,R2
00C8 3400              ADDC    A,#00H
00CA FA                MOV     R2,A
00CB 120000      E     LCALL   ?C?LLDPTR
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 75  

00CE 7B00              MOV     R3,#00H
00D0 7A01              MOV     R2,#01H
00D2 7900              MOV     R1,#00H
00D4 7800              MOV     R0,#00H
00D6 120000      E     LCALL   ?C?LMUL
00D9 C004              PUSH    AR4
00DB C005              PUSH    AR5
00DD C006              PUSH    AR6
00DF C007              PUSH    AR7
00E1 900000      R     MOV     DPTR,#rowToWrPtr
00E4 120000      E     LCALL   ?C?PLDXDATA
00E7 120000      E     LCALL   ?C?LLDPTR
00EA D003              POP     AR3
00EC D002              POP     AR2
00EE D001              POP     AR1
00F0 D000              POP     AR0
00F2 120000      E     LCALL   ?C?LSUB
00F5 900000      R     MOV     DPTR,#context
00F8 120000      E     LCALL   ?C?PLDXDATA
00FB E9                MOV     A,R1
00FC 2416              ADD     A,#016H
00FE F9                MOV     R1,A
00FF EA                MOV     A,R2
0100 3400              ADDC    A,#00H
0102 FA                MOV     R2,A
0103 120000      E     LCALL   ?C?LLDPTR0
0106 D3                SETB    C
0107 120000      E     LCALL   ?C?ULCMP
010A 5003              JNC     $ + 5H
010C 020000      R     LJMP    ?C0103
                                           ; SOURCE LINE # 885
                                           ; SOURCE LINE # 886
010F 900000      R     MOV     DPTR,#context
0112 120000      E     LCALL   ?C?PLDXDATA
0115 E9                MOV     A,R1
0116 2410              ADD     A,#010H
0118 F9                MOV     R1,A
0119 EA                MOV     A,R2
011A 3400              ADDC    A,#00H
011C FA                MOV     R2,A
011D 120000      E     LCALL   ?C?LLDPTR
0120 EF                MOV     A,R7
0121 24FF              ADD     A,#0FFH
0123 FF                MOV     R7,A
0124 EE                MOV     A,R6
0125 34FF              ADDC    A,#0FFH
0127 FE                MOV     R6,A
0128 ED                MOV     A,R5
0129 34FF              ADDC    A,#0FFH
012B FD                MOV     R5,A
012C EC                MOV     A,R4
012D 34FF              ADDC    A,#0FFH
012F FC                MOV     R4,A
0130 900000      R     MOV     DPTR,#context
0133 120000      E     LCALL   ?C?PLDXDATA
0136 E9                MOV     A,R1
0137 2404              ADD     A,#04H
0139 F9                MOV     R1,A
013A EA                MOV     A,R2
013B 3400              ADDC    A,#00H
013D FA                MOV     R2,A
013E 120000      E     LCALL   ?C?LLDPTR0
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 76  

0141 120000      E     LCALL   ?C?LMUL
0144 7B00              MOV     R3,#00H
0146 7A01              MOV     R2,#01H
0148 7900              MOV     R1,#00H
014A 7800              MOV     R0,#00H
014C 120000      E     LCALL   ?C?LMUL
014F 900000      R     MOV     DPTR,#context
0152 120000      E     LCALL   ?C?PLDXDATA
0155 E9                MOV     A,R1
0156 2416              ADD     A,#016H
0158 F9                MOV     R1,A
0159 EA                MOV     A,R2
015A 3400              ADDC    A,#00H
015C FA                MOV     R2,A
015D 120000      E     LCALL   ?C?LLDPTR0
0160 120000      E     LCALL   ?C?LADD
0163 C004              PUSH    AR4
0165 C005              PUSH    AR5
0167 C006              PUSH    AR6
0169 C007              PUSH    AR7
016B 900000      R     MOV     DPTR,#context
016E 120000      E     LCALL   ?C?PLDXDATA
0171 E9                MOV     A,R1
0172 2416              ADD     A,#016H
0174 F9                MOV     R1,A
0175 EA                MOV     A,R2
0176 3400              ADDC    A,#00H
0178 FA                MOV     R2,A
0179 120000      E     LCALL   ?C?LLDPTR0
017C C000              PUSH    AR0
017E C001              PUSH    AR1
0180 C002              PUSH    AR2
0182 C003              PUSH    AR3
0184 900000      R     MOV     DPTR,#rowToWrPtr
0187 120000      E     LCALL   ?C?PLDXDATA
018A 120000      E     LCALL   ?C?LLDPTR
018D D003              POP     AR3
018F D002              POP     AR2
0191 D001              POP     AR1
0193 D000              POP     AR0
0195 120000      E     LCALL   ?C?LSUB
0198 A804              MOV     R0,AR4
019A A905              MOV     R1,AR5
019C AA06              MOV     R2,AR6
019E AB07              MOV     R3,AR7
01A0 D007              POP     AR7
01A2 D006              POP     AR6
01A4 D005              POP     AR5
01A6 D004              POP     AR4
01A8 120000      E     LCALL   ?C?LADD
01AB 900000      R     MOV     DPTR,#rowToRdPtr
01AE 120000      E     LCALL   ?C?PLDXDATA
01B1 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 889
01B4 22                RET     
01B5         ?C0103:
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
01B5 900000      R     MOV     DPTR,#context
01B8 120000      E     LCALL   ?C?PLDXDATA
01BB E9                MOV     A,R1
01BC 2404              ADD     A,#04H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 77  

01BE F9                MOV     R1,A
01BF EA                MOV     A,R2
01C0 3400              ADDC    A,#00H
01C2 FA                MOV     R2,A
01C3 120000      E     LCALL   ?C?LLDPTR
01C6 7B00              MOV     R3,#00H
01C8 7A01              MOV     R2,#01H
01CA 7900              MOV     R1,#00H
01CC 7800              MOV     R0,#00H
01CE 120000      E     LCALL   ?C?LMUL
01D1 C004              PUSH    AR4
01D3 C005              PUSH    AR5
01D5 C006              PUSH    AR6
01D7 C007              PUSH    AR7
01D9 900000      R     MOV     DPTR,#rowToWrPtr
01DC 120000      E     LCALL   ?C?PLDXDATA
01DF 120000      E     LCALL   ?C?LLDPTR
01E2 D003              POP     AR3
01E4 D002              POP     AR2
01E6 D001              POP     AR1
01E8 D000              POP     AR0
01EA 120000      E     LCALL   ?C?LSUB
01ED 900000      R     MOV     DPTR,#rowToRdPtr
01F0 120000      E     LCALL   ?C?PLDXDATA
01F3 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
01F6 22                RET     
01F7         ?C0102:
                                           ; SOURCE LINE # 896
                                           ; SOURCE LINE # 900
01F7 900000      R     MOV     DPTR,#rowToWrPtr
01FA 120000      E     LCALL   ?C?PLDXDATA
01FD 120000      E     LCALL   ?C?LLDPTR
0200 900000      R     MOV     DPTR,#rowToRdPtr
0203 120000      E     LCALL   ?C?PLDXDATA
0206 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 901
                                           ; SOURCE LINE # 902
                                           ; SOURCE LINE # 903
0209         ?C0106:
0209 22                RET     
             ; FUNCTION _GetNextRowToWrite (END)

             ; FUNCTION _CalcChecksum (BEGIN)
                                           ; SOURCE LINE # 923
0000 900000      R     MOV     DPTR,#rowData
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#len
0009 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
000C 900000      R     MOV     DPTR,#crc
000F 74FF              MOV     A,#0FFH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 927
0012 900000      R     MOV     DPTR,#cnt
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 78  

001A         ?C0107:
                                           ; SOURCE LINE # 929
001A 900000      R     MOV     DPTR,#cnt
001D E0                MOVX    A,@DPTR
001E FE                MOV     R6,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 E4                CLR     A
0023 FC                MOV     R4,A
0024 FD                MOV     R5,A
0025 900000      R     MOV     DPTR,#len
0028 120000      E     LCALL   ?C?LLDXDATA0
002B C3                CLR     C
002C 120000      E     LCALL   ?C?ULCMP
002F 6070              JZ      ?C0108
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 931
0031 900000      R     MOV     DPTR,#crc
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#rowData
0039 120000      E     LCALL   ?C?PLDXDATA
003C 900000      R     MOV     DPTR,#cnt
003F E0                MOVX    A,@DPTR
0040 FC                MOV     R4,A
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 FD                MOV     R5,A
0044 E9                MOV     A,R1
0045 2D                ADD     A,R5
0046 F9                MOV     R1,A
0047 EA                MOV     A,R2
0048 3C                ADDC    A,R4
0049 FA                MOV     R2,A
004A 120000      E     LCALL   ?C?CLDPTR
004D FE                MOV     R6,A
004E EF                MOV     A,R7
004F 6E                XRL     A,R6
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#crc
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 932
0056 900000      R     MOV     DPTR,#i
0059 E4                CLR     A
005A F0                MOVX    @DPTR,A
005B         ?C0109:
005B 900000      R     MOV     DPTR,#i
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 C3                CLR     C
0062 9408              SUBB    A,#08H
0064 502E              JNC     ?C0110
                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 934
0066 900000      R     MOV     DPTR,#crc
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 30E70F            JNB     ACC.7,?C0112
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 79  

006F 900000      R     MOV     DPTR,#crc
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 25E0              ADD     A,ACC
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 6431              XRL     A,#031H
007B FF                MOV     R7,A
007C 8009              SJMP    ?C0113
007E         ?C0112:
007E 900000      R     MOV     DPTR,#crc
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 EF                MOV     A,R7
0084 25E0              ADD     A,ACC
0086 FF                MOV     R7,A
0087         ?C0113:
0087 900000      R     MOV     DPTR,#crc
008A EF                MOV     A,R7
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 935
008C 900000      R     MOV     DPTR,#i
008F E0                MOVX    A,@DPTR
0090 04                INC     A
0091 F0                MOVX    @DPTR,A
0092 80C7              SJMP    ?C0109
0094         ?C0110:
                                           ; SOURCE LINE # 936
0094 900000      R     MOV     DPTR,#cnt
0097 E4                CLR     A
0098 75F001            MOV     B,#01H
009B 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 937
009E 020000      R     LJMP    ?C0107
00A1         ?C0108:
                                           ; SOURCE LINE # 939
00A1 900000      R     MOV     DPTR,#crc
00A4 E0                MOVX    A,@DPTR
00A5 FF                MOV     R7,A
                                           ; SOURCE LINE # 940
00A6         ?C0114:
00A6 22                RET     
             ; FUNCTION _CalcChecksum (END)

             ; FUNCTION _CheckRanges (BEGIN)
                                           ; SOURCE LINE # 956
0000 900000      R     MOV     DPTR,#config
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 958
0006 900000      R     MOV     DPTR,#ret
0009 7403              MOV     A,#03H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 959
000C 900000      R     MOV     DPTR,#config
000F 120000      E     LCALL   ?C?PLDXDATA
0012 E9                MOV     A,R1
0013 240A              ADD     A,#0AH
0015 F9                MOV     R1,A
0016 EA                MOV     A,R2
0017 3400              ADDC    A,#00H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 80  

0019 FA                MOV     R2,A
001A 120000      E     LCALL   ?C?LLDPTR
001D 900000      R     MOV     DPTR,#startAddr
0020 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 960
0023 900000      R     MOV     DPTR,#config
0026 120000      E     LCALL   ?C?PLDXDATA
0029 120000      E     LCALL   ?C?LLDPTR
002C EF                MOV     A,R7
002D 547F              ANL     A,#07FH
002F FF                MOV     R7,A
0030 EE                MOV     A,R6
0031 5400              ANL     A,#00H
0033 FE                MOV     R6,A
0034 ED                MOV     A,R5
0035 5400              ANL     A,#00H
0037 FD                MOV     R5,A
0038 EC                MOV     A,R4
0039 5400              ANL     A,#00H
003B FC                MOV     R4,A
003C EF                MOV     A,R7
003D 4E                ORL     A,R6
003E 6012              JZ      ?C0115
0040 7F01              MOV     R7,#01H
0042 7E00              MOV     R6,#00H
0044 7D00              MOV     R5,#00H
0046 7C00              MOV     R4,#00H
0048 C004              PUSH    AR4
004A C005              PUSH    AR5
004C C006              PUSH    AR6
004E C007              PUSH    AR7
0050 8010              SJMP    ?C0116
0052         ?C0115:
0052 7F00              MOV     R7,#00H
0054 7E00              MOV     R6,#00H
0056 7D00              MOV     R5,#00H
0058 7C00              MOV     R4,#00H
005A C004              PUSH    AR4
005C C005              PUSH    AR5
005E C006              PUSH    AR6
0060 C007              PUSH    AR7
0062         ?C0116:
0062 900000      R     MOV     DPTR,#config
0065 120000      E     LCALL   ?C?PLDXDATA
0068 120000      E     LCALL   ?C?LLDPTR
006B 7B80              MOV     R3,#080H
006D 7A00              MOV     R2,#00H
006F 7900              MOV     R1,#00H
0071 7800              MOV     R0,#00H
0073 120000      E     LCALL   ?C?ULDIV
0076 A804              MOV     R0,AR4
0078 A905              MOV     R1,AR5
007A AA06              MOV     R2,AR6
007C AB07              MOV     R3,AR7
007E D007              POP     AR7
0080 D006              POP     AR6
0082 D005              POP     AR5
0084 D004              POP     AR4
0086 120000      E     LCALL   ?C?LADD
0089 7B00              MOV     R3,#00H
008B 7A01              MOV     R2,#01H
008D 7900              MOV     R1,#00H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 81  

008F 7800              MOV     R0,#00H
0091 120000      E     LCALL   ?C?LMUL
0094 900000      R     MOV     DPTR,#config
0097 120000      E     LCALL   ?C?PLDXDATA
009A E9                MOV     A,R1
009B 2404              ADD     A,#04H
009D F9                MOV     R1,A
009E EA                MOV     A,R2
009F 3400              ADDC    A,#00H
00A1 FA                MOV     R2,A
00A2 120000      E     LCALL   ?C?LLDPTR0
00A5 120000      E     LCALL   ?C?LMUL
00A8 C004              PUSH    AR4
00AA C005              PUSH    AR5
00AC C006              PUSH    AR6
00AE C007              PUSH    AR7
00B0 900000      R     MOV     DPTR,#config
00B3 120000      E     LCALL   ?C?PLDXDATA
00B6 E9                MOV     A,R1
00B7 2408              ADD     A,#08H
00B9 F9                MOV     R1,A
00BA EA                MOV     A,R2
00BB 3400              ADDC    A,#00H
00BD FA                MOV     R2,A
00BE 120000      E     LCALL   ?C?CLDPTR
00C1 FF                MOV     R7,A
00C2 E4                CLR     A
00C3 FC                MOV     R4,A
00C4 FD                MOV     R5,A
00C5 FE                MOV     R6,A
00C6 EF                MOV     A,R7
00C7 2401              ADD     A,#01H
00C9 FB                MOV     R3,A
00CA EE                MOV     A,R6
00CB 3400              ADDC    A,#00H
00CD FA                MOV     R2,A
00CE ED                MOV     A,R5
00CF 3400              ADDC    A,#00H
00D1 F9                MOV     R1,A
00D2 EC                MOV     A,R4
00D3 3400              ADDC    A,#00H
00D5 F8                MOV     R0,A
00D6 D007              POP     AR7
00D8 D006              POP     AR6
00DA D005              POP     AR5
00DC D004              POP     AR4
00DE 120000      E     LCALL   ?C?LMUL
00E1 900000      R     MOV     DPTR,#startAddr
00E4 120000      E     LCALL   ?C?LLDXDATA0
00E7 120000      E     LCALL   ?C?LADD
00EA 900000      R     MOV     DPTR,#endAddr
00ED 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 964
00F0 7F00              MOV     R7,#00H
00F2 7E00              MOV     R6,#00H
00F4 7DFF              MOV     R5,#0FFH
00F6 7C00              MOV     R4,#00H
00F8 900000      R     MOV     DPTR,#startAddr
00FB 120000      E     LCALL   ?C?LLDXDATA0
00FE D3                SETB    C
00FF 120000      E     LCALL   ?C?ULCMP
0102 4019              JC      ?C0117
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 82  

0104 7FFF              MOV     R7,#0FFH
0106 7EFF              MOV     R6,#0FFH
0108 7DFF              MOV     R5,#0FFH
010A 7C00              MOV     R4,#00H
010C 900000      R     MOV     DPTR,#endAddr
010F 120000      E     LCALL   ?C?LLDXDATA0
0112 D3                SETB    C
0113 120000      E     LCALL   ?C?ULCMP
0116 5005              JNC     ?C0117
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 966
0118 900000      R     MOV     DPTR,#ret
011B E4                CLR     A
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 967
011D         ?C0117:
                                           ; SOURCE LINE # 968
011D 900000      R     MOV     DPTR,#ret
0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
                                           ; SOURCE LINE # 969
0122         ?C0118:
0122 22                RET     
             ; FUNCTION _CheckRanges (END)

             ; FUNCTION _WriteRow (BEGIN)
                                           ; SOURCE LINE # 991
0000 900000      R     MOV     DPTR,#rowAddr
0003 120000      E     LCALL   ?C?LSTXDATA
0006 900000      R     MOV     DPTR,#rowData
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 994
                                           ; SOURCE LINE # 995
000C 900000      R     MOV     DPTR,#ret
000F 7404              MOV     A,#04H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1006
0012 900000      R     MOV     DPTR,#rowAddr
0015 120000      E     LCALL   ?C?LLDXDATA
0018 EF                MOV     A,R7
0019 54FF              ANL     A,#0FFH
001B FF                MOV     R7,A
001C EE                MOV     A,R6
001D 54FF              ANL     A,#0FFH
001F FE                MOV     R6,A
0020 ED                MOV     A,R5
0021 5400              ANL     A,#00H
0023 FD                MOV     R5,A
0024 EC                MOV     A,R4
0025 5400              ANL     A,#00H
0027 FC                MOV     R4,A
0028 900000      R     MOV     DPTR,#rowAddr
002B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1007
002E 900000      R     MOV     DPTR,#context
0031 120000      E     LCALL   ?C?PLDXDATA
0034 900000      R     MOV     DPTR,#context
0037 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1020
003A 7B00              MOV     R3,#00H
003C 7A01              MOV     R2,#01H
003E 7900              MOV     R1,#00H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 83  

0040 7800              MOV     R0,#00H
0042 900000      R     MOV     DPTR,#rowAddr
0045 120000      E     LCALL   ?C?LLDXDATA
0048 120000      E     LCALL   ?C?ULDIV
004B EF                MOV     A,R7
004C 54FF              ANL     A,#0FFH
004E FF                MOV     R7,A
004F EE                MOV     A,R6
0050 5400              ANL     A,#00H
0052 FE                MOV     R6,A
0053 ED                MOV     A,R5
0054 5400              ANL     A,#00H
0056 FD                MOV     R5,A
0057 EC                MOV     A,R4
0058 5400              ANL     A,#00H
005A FC                MOV     R4,A
005B 900000      R     MOV     DPTR,#rowId
005E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1023
0061 120000      E     LCALL   CySetTemp
                                           ; SOURCE LINE # 1026
0064 7B00              MOV     R3,#00H
0066 7A00              MOV     R2,#00H
0068 7901              MOV     R1,#01H
006A 7800              MOV     R0,#00H
006C 900000      R     MOV     DPTR,#rowAddr
006F 120000      E     LCALL   ?C?LLDXDATA
0072 120000      E     LCALL   ?C?ULDIV
0075 900000      R     MOV     DPTR,#arrayId
0078 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1027
007B 900000      R     MOV     DPTR,#arrayId
007E 120000      E     LCALL   ?C?LLDXDATA
0081 C007              PUSH    AR7
0083 900000      R     MOV     DPTR,#rowId
0086 120000      E     LCALL   ?C?LLDXDATA
0089 AD07              MOV     R5,AR7
008B AC06              MOV     R4,AR6
008D 900000      R     MOV     DPTR,#rowData
0090 120000      E     LCALL   ?C?PLDXDATA
0093 D007              POP     AR7
0095 120000      E     LCALL   _CyWriteRowData
0098 900000      R     MOV     DPTR,#rc
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1034
009D 900000      R     MOV     DPTR,#rc
00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
00A2 EF                MOV     A,R7
00A3 7005              JNZ     ?C0119
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
00A5 900000      R     MOV     DPTR,#ret
00A8 E4                CLR     A
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1037
00AA         ?C0119:
                                           ; SOURCE LINE # 1071
00AA 900000      R     MOV     DPTR,#ret
00AD E0                MOVX    A,@DPTR
00AE FF                MOV     R7,A
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 84  

                                           ; SOURCE LINE # 1072
00AF         ?C0120:
00AF 22                RET     
             ; FUNCTION _WriteRow (END)

             ; FUNCTION _EraseRow (BEGIN)
                                           ; SOURCE LINE # 1097
0000 900000      R     MOV     DPTR,#rowAddr
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
0006 900000      R     MOV     DPTR,#rowAddr
0009 120000      E     LCALL   ?C?LLDXDATA
000C 900000      R     MOV     DPTR,#emEepromRowAddr
000F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1102
0012 900000      R     MOV     DPTR,#ret
0015 7404              MOV     A,#04H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1159
0018 900000      R     MOV     DPTR,#emEepromRowAddr
001B 120000      E     LCALL   ?C?LLDXDATA
001E C004              PUSH    AR4
0020 C005              PUSH    AR5
0022 C006              PUSH    AR6
0024 C007              PUSH    AR7
0026 900000      R     MOV     DPTR,#ramBuffAddr
0029 120000      E     LCALL   ?C?LLDXDATA
002C A907              MOV     R1,AR7
002E AA06              MOV     R2,AR6
0030 AB05              MOV     R3,AR5
0032 C003              PUSH    AR3
0034 C002              PUSH    AR2
0036 C001              PUSH    AR1
0038 900000      R     MOV     DPTR,#context
003B 120000      E     LCALL   ?C?PLDXDATA
003E 900000      R     MOV     DPTR,#?_WriteRow?BYTE+07H
0041 120000      E     LCALL   ?C?PSTXDATA
0044 D001              POP     AR1
0046 D002              POP     AR2
0048 D003              POP     AR3
004A D007              POP     AR7
004C D006              POP     AR6
004E D005              POP     AR5
0050 D004              POP     AR4
0052 120000      R     LCALL   _WriteRow
0055 900000      R     MOV     DPTR,#ret
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1161
005A 900000      R     MOV     DPTR,#ret
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 6003              JZ      $ + 5H
0062 020000      R     LJMP    ?C0121
0065 900000      R     MOV     DPTR,#context
0068 120000      E     LCALL   ?C?PLDXDATA
006B E9                MOV     A,R1
006C 2414              ADD     A,#014H
006E F9                MOV     R1,A
006F EA                MOV     A,R2
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 85  

0070 3400              ADDC    A,#00H
0072 FA                MOV     R2,A
0073 120000      E     LCALL   ?C?CLDPTR
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 606E              JZ      ?C0121
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1164
007A 900000      R     MOV     DPTR,#context
007D 120000      E     LCALL   ?C?PLDXDATA
0080 E9                MOV     A,R1
0081 2416              ADD     A,#016H
0083 F9                MOV     R1,A
0084 EA                MOV     A,R2
0085 3400              ADDC    A,#00H
0087 FA                MOV     R2,A
0088 120000      E     LCALL   ?C?LLDPTR0
008B 900000      R     MOV     DPTR,#emEepromRowAddr
008E 120000      E     LCALL   ?C?LLDXDATA
0091 120000      E     LCALL   ?C?LSUB
0094 900000      R     MOV     DPTR,#context
0097 120000      E     LCALL   ?C?PLDXDATA
009A 120000      E     LCALL   ?C?LLDPTR0
009D 120000      E     LCALL   ?C?LADD
00A0 900000      R     MOV     DPTR,#emEepromRowAddr
00A3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1165
00A6 900000      R     MOV     DPTR,#emEepromRowAddr
00A9 120000      E     LCALL   ?C?LLDXDATA
00AC C004              PUSH    AR4
00AE C005              PUSH    AR5
00B0 C006              PUSH    AR6
00B2 C007              PUSH    AR7
00B4 900000      R     MOV     DPTR,#ramBuffAddr
00B7 120000      E     LCALL   ?C?LLDXDATA
00BA A907              MOV     R1,AR7
00BC AA06              MOV     R2,AR6
00BE AB05              MOV     R3,AR5
00C0 C003              PUSH    AR3
00C2 C002              PUSH    AR2
00C4 C001              PUSH    AR1
00C6 900000      R     MOV     DPTR,#context
00C9 120000      E     LCALL   ?C?PLDXDATA
00CC 900000      R     MOV     DPTR,#?_WriteRow?BYTE+07H
00CF 120000      E     LCALL   ?C?PSTXDATA
00D2 D001              POP     AR1
00D4 D002              POP     AR2
00D6 D003              POP     AR3
00D8 D007              POP     AR7
00DA D006              POP     AR6
00DC D005              POP     AR5
00DE D004              POP     AR4
00E0 120000      R     LCALL   _WriteRow
00E3 900000      R     MOV     DPTR,#ret
00E6 EF                MOV     A,R7
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1166
00E8         ?C0121:
                                           ; SOURCE LINE # 1168
00E8 900000      R     MOV     DPTR,#ret
00EB E0                MOVX    A,@DPTR
00EC FF                MOV     R7,A
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 86  

00ED EF                MOV     A,R7
00EE 7017              JNZ     ?C0122
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1170
00F0 900000      R     MOV     DPTR,#rowAddr
00F3 120000      E     LCALL   ?C?LLDXDATA
00F6 900000      R     MOV     DPTR,#context
00F9 120000      E     LCALL   ?C?PLDXDATA
00FC E9                MOV     A,R1
00FD 2408              ADD     A,#08H
00FF F9                MOV     R1,A
0100 EA                MOV     A,R2
0101 3400              ADDC    A,#00H
0103 FA                MOV     R2,A
0104 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 1171
0107         ?C0122:
                                           ; SOURCE LINE # 1174
0107 900000      R     MOV     DPTR,#ret
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
                                           ; SOURCE LINE # 1175
010C         ?C0123:
010C 22                RET     
             ; FUNCTION _EraseRow (END)

             ; FUNCTION _CheckCrcAndCopy (BEGIN)
                                           ; SOURCE LINE # 1213
0000 900000      R     MOV     DPTR,#startAddr
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1223
0006 900000      R     MOV     DPTR,#context
0009 120000      E     LCALL   ?C?PLDXDATA
000C E9                MOV     A,R1
000D 2416              ADD     A,#016H
000F F9                MOV     R1,A
0010 EA                MOV     A,R2
0011 3400              ADDC    A,#00H
0013 FA                MOV     R2,A
0014 120000      E     LCALL   ?C?LLDPTR0
0017 900000      R     MOV     DPTR,#startAddr
001A 120000      E     LCALL   ?C?LLDXDATA
001D 120000      E     LCALL   ?C?LSUB
0020 900000      R     MOV     DPTR,#context
0023 120000      E     LCALL   ?C?PLDXDATA
0026 120000      E     LCALL   ?C?LLDPTR0
0029 120000      E     LCALL   ?C?LADD
002C 900000      R     MOV     DPTR,#rcStartRowAddr
002F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1227
0032 900000      R     MOV     DPTR,#startAddr
0035 120000      E     LCALL   ?C?LLDXDATA
0038 EF                MOV     A,R7
0039 2480              ADD     A,#080H
003B FF                MOV     R7,A
003C EE                MOV     A,R6
003D 3400              ADDC    A,#00H
003F FE                MOV     R6,A
0040 ED                MOV     A,R5
0041 3400              ADDC    A,#00H
0043 FD                MOV     R5,A
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 87  

0044 EC                MOV     A,R4
0045 3400              ADDC    A,#00H
0047 FC                MOV     R4,A
0048 A907              MOV     R1,AR7
004A AA06              MOV     R2,AR6
004C AB05              MOV     R3,AR5
004E 7F80              MOV     R7,#080H
0050 7E00              MOV     R6,#00H
0052 7D00              MOV     R5,#00H
0054 7C00              MOV     R4,#00H
0056 120000      R     LCALL   _CalcChecksum
0059 E4                CLR     A
005A FC                MOV     R4,A
005B FD                MOV     R5,A
005C FE                MOV     R6,A
005D C004              PUSH    AR4
005F C005              PUSH    AR5
0061 C006              PUSH    AR6
0063 C007              PUSH    AR7
0065 900000      R     MOV     DPTR,#startAddr
0068 120000      E     LCALL   ?C?LLDXDATA
006B EF                MOV     A,R7
006C 247C              ADD     A,#07CH
006E FF                MOV     R7,A
006F EE                MOV     A,R6
0070 3400              ADDC    A,#00H
0072 FE                MOV     R6,A
0073 ED                MOV     A,R5
0074 3400              ADDC    A,#00H
0076 FD                MOV     R5,A
0077 EC                MOV     A,R4
0078 3400              ADDC    A,#00H
007A FC                MOV     R4,A
007B A907              MOV     R1,AR7
007D AA06              MOV     R2,AR6
007F AB05              MOV     R3,AR5
0081 120000      E     LCALL   ?C?LLDPTR0
0084 D007              POP     AR7
0086 D006              POP     AR6
0088 D005              POP     AR5
008A D004              POP     AR4
008C C3                CLR     C
008D 120000      E     LCALL   ?C?ULCMP
0090 704C              JNZ     ?C0124
                                           ; SOURCE LINE # 1229
                                           ; SOURCE LINE # 1230
0092 900000      R     MOV     DPTR,#numBytes
0095 120000      E     LCALL   ?C?LLDXDATA
0098 C006              PUSH    AR6
009A C007              PUSH    AR7
009C 900000      R     MOV     DPTR,#rowOffset
009F 120000      E     LCALL   ?C?LLDXDATA
00A2 900000      R     MOV     DPTR,#startAddr
00A5 120000      E     LCALL   ?C?LLDXDATA0
00A8 120000      E     LCALL   ?C?LADD
00AB A907              MOV     R1,AR7
00AD AA06              MOV     R2,AR6
00AF AB05              MOV     R3,AR5
00B1 C003              PUSH    AR3
00B3 C002              PUSH    AR2
00B5 C001              PUSH    AR1
00B7 900000      R     MOV     DPTR,#dstAddr
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 88  

00BA 120000      E     LCALL   ?C?LLDXDATA
00BD A907              MOV     R1,AR7
00BF AA06              MOV     R2,AR6
00C1 AB05              MOV     R3,AR5
00C3 A801              MOV     R0,AR1
00C5 AC02              MOV     R4,AR2
00C7 AD03              MOV     R5,AR3
00C9 D001              POP     AR1
00CB D002              POP     AR2
00CD D003              POP     AR3
00CF D007              POP     AR7
00D1 D006              POP     AR6
00D3 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 1232
00D6 900000      R     MOV     DPTR,#ret
00D9 E4                CLR     A
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1233
00DB 020000      R     LJMP    ?C0125
00DE         ?C0124:
                                           ; SOURCE LINE # 1236
00DE 900000      R     MOV     DPTR,#rcStartRowAddr
00E1 120000      E     LCALL   ?C?LLDXDATA
00E4 EF                MOV     A,R7
00E5 2480              ADD     A,#080H
00E7 FF                MOV     R7,A
00E8 EE                MOV     A,R6
00E9 3400              ADDC    A,#00H
00EB FE                MOV     R6,A
00EC ED                MOV     A,R5
00ED 3400              ADDC    A,#00H
00EF FD                MOV     R5,A
00F0 EC                MOV     A,R4
00F1 3400              ADDC    A,#00H
00F3 FC                MOV     R4,A
00F4 A907              MOV     R1,AR7
00F6 AA06              MOV     R2,AR6
00F8 AB05              MOV     R3,AR5
00FA 7F80              MOV     R7,#080H
00FC 7E00              MOV     R6,#00H
00FE 7D00              MOV     R5,#00H
0100 7C00              MOV     R4,#00H
0102 120000      R     LCALL   _CalcChecksum
0105 E4                CLR     A
0106 FC                MOV     R4,A
0107 FD                MOV     R5,A
0108 FE                MOV     R6,A
0109 C004              PUSH    AR4
010B C005              PUSH    AR5
010D C006              PUSH    AR6
010F C007              PUSH    AR7
0111 900000      R     MOV     DPTR,#rcStartRowAddr
0114 120000      E     LCALL   ?C?LLDXDATA
0117 EF                MOV     A,R7
0118 247C              ADD     A,#07CH
011A FF                MOV     R7,A
011B EE                MOV     A,R6
011C 3400              ADDC    A,#00H
011E FE                MOV     R6,A
011F ED                MOV     A,R5
0120 3400              ADDC    A,#00H
0122 FD                MOV     R5,A
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 89  

0123 EC                MOV     A,R4
0124 3400              ADDC    A,#00H
0126 FC                MOV     R4,A
0127 A907              MOV     R1,AR7
0129 AA06              MOV     R2,AR6
012B AB05              MOV     R3,AR5
012D 120000      E     LCALL   ?C?LLDPTR0
0130 D007              POP     AR7
0132 D006              POP     AR6
0134 D005              POP     AR5
0136 D004              POP     AR4
0138 C3                CLR     C
0139 120000      E     LCALL   ?C?ULCMP
013C 6003              JZ      $ + 5H
013E 020000      R     LJMP    ?C0126
                                           ; SOURCE LINE # 1238
                                           ; SOURCE LINE # 1243
0141 900000      R     MOV     DPTR,#rcStartRowAddr
0144 120000      E     LCALL   ?C?LLDXDATA
0147 A907              MOV     R1,AR7
0149 AA06              MOV     R2,AR6
014B AB05              MOV     R3,AR5
014D C003              PUSH    AR3
014F C002              PUSH    AR2
0151 C001              PUSH    AR1
0153 7B01              MOV     R3,#01H
0155 7A00        R     MOV     R2,#HIGH writeRamBuffer
0157 7900        R     MOV     R1,#LOW writeRamBuffer
0159 A801              MOV     R0,AR1
015B AC02              MOV     R4,AR2
015D AD03              MOV     R5,AR3
015F D001              POP     AR1
0161 D002              POP     AR2
0163 D003              POP     AR3
0165 7E01              MOV     R6,#01H
0167 7F00              MOV     R7,#00H
0169 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 1246
016C 900000      R     MOV     DPTR,#startAddr
016F 120000      E     LCALL   ?C?LLDXDATA
0172 7B01              MOV     R3,#01H
0174 7A00        R     MOV     R2,#HIGH writeRamBuffer
0176 7900        R     MOV     R1,#LOW writeRamBuffer
0178 C003              PUSH    AR3
017A C002              PUSH    AR2
017C C001              PUSH    AR1
017E 900000      R     MOV     DPTR,#context
0181 120000      E     LCALL   ?C?PLDXDATA
0184 900000      R     MOV     DPTR,#?_WriteRow?BYTE+07H
0187 120000      E     LCALL   ?C?PSTXDATA
018A D001              POP     AR1
018C D002              POP     AR2
018E D003              POP     AR3
0190 120000      R     LCALL   _WriteRow
0193 900000      R     MOV     DPTR,#ret
0196 EF                MOV     A,R7
0197 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1248
0198 900000      R     MOV     DPTR,#ret
019B E0                MOVX    A,@DPTR
019C FF                MOV     R7,A
019D EF                MOV     A,R7
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 90  

019E 7052              JNZ     ?C0125
                                           ; SOURCE LINE # 1249
                                           ; SOURCE LINE # 1250
01A0 900000      R     MOV     DPTR,#numBytes
01A3 120000      E     LCALL   ?C?LLDXDATA
01A6 C006              PUSH    AR6
01A8 C007              PUSH    AR7
01AA 7F04              MOV     R7,#04H
01AC 7E00              MOV     R6,#00H
01AE 7D00              MOV     R5,#00H
01B0 7C00              MOV     R4,#00H
01B2 900000      R     MOV     DPTR,#rowOffset
01B5 120000      E     LCALL   ?C?LLDXDATA0
01B8 120000      E     LCALL   ?C?LMUL
01BB 7400        R     MOV     A,#LOW writeRamBuffer
01BD 2F                ADD     A,R7
01BE F9                MOV     R1,A
01BF 7400        R     MOV     A,#HIGH writeRamBuffer
01C1 3E                ADDC    A,R6
01C2 FA                MOV     R2,A
01C3 7B01              MOV     R3,#01H
01C5 C003              PUSH    AR3
01C7 C002              PUSH    AR2
01C9 C001              PUSH    AR1
01CB 900000      R     MOV     DPTR,#dstAddr
01CE 120000      E     LCALL   ?C?LLDXDATA
01D1 A907              MOV     R1,AR7
01D3 AA06              MOV     R2,AR6
01D5 AB05              MOV     R3,AR5
01D7 A801              MOV     R0,AR1
01D9 AC02              MOV     R4,AR2
01DB AD03              MOV     R5,AR3
01DD D001              POP     AR1
01DF D002              POP     AR2
01E1 D003              POP     AR3
01E3 D007              POP     AR7
01E5 D006              POP     AR6
01E7 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 1251
                                           ; SOURCE LINE # 1252
01EA 8006              SJMP    ?C0125
01EC         ?C0126:
                                           ; SOURCE LINE # 1254
                                           ; SOURCE LINE # 1255
01EC 900000      R     MOV     DPTR,#ret
01EF 7402              MOV     A,#02H
01F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1256
01F2         ?C0125:
                                           ; SOURCE LINE # 1258
01F2 900000      R     MOV     DPTR,#ret
01F5 E0                MOVX    A,@DPTR
01F6 FF                MOV     R7,A
                                           ; SOURCE LINE # 1259
01F7         ?C0129:
01F7 22                RET     
             ; FUNCTION _CheckCrcAndCopy (END)

             ; FUNCTION _GetAddresses (BEGIN)
                                           ; SOURCE LINE # 1297
0000 900000      R     MOV     DPTR,#startAddr
0003 120000      E     LCALL   ?C?PSTXDATA
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 91  

                                           ; SOURCE LINE # 1303
                                           ; SOURCE LINE # 1304
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#skip
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1306
0014 7F00              MOV     R7,#00H
0016 7E00              MOV     R6,#00H
0018 7D00              MOV     R5,#00H
001A 7C00              MOV     R4,#00H
001C 900000      R     MOV     DPTR,#offset
001F 120000      E     LCALL   ?C?PLDXDATA
0022 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 1308
0025 7F80              MOV     R7,#080H
0027 7E00              MOV     R6,#00H
0029 7D00              MOV     R5,#00H
002B 7C00              MOV     R4,#00H
002D 900000      R     MOV     DPTR,#rowNum
0030 120000      E     LCALL   ?C?LLDXDATA0
0033 120000      E     LCALL   ?C?LMUL
0036 900000      R     MOV     DPTR,#addr
0039 120000      E     LCALL   ?C?LLDXDATA0
003C C3                CLR     C
003D 120000      E     LCALL   ?C?ULCMP
0040 5004              JNC     ?C0131
0042 7F00              MOV     R7,#00H
0044 8033              SJMP    ?C0132
0046         ?C0131:
0046 7F80              MOV     R7,#080H
0048 7E00              MOV     R6,#00H
004A 7D00              MOV     R5,#00H
004C 7C00              MOV     R4,#00H
004E 900000      R     MOV     DPTR,#rowNum
0051 120000      E     LCALL   ?C?LLDXDATA0
0054 120000      E     LCALL   ?C?LMUL
0057 EF                MOV     A,R7
0058 247F              ADD     A,#07FH
005A FF                MOV     R7,A
005B EE                MOV     A,R6
005C 3400              ADDC    A,#00H
005E FE                MOV     R6,A
005F ED                MOV     A,R5
0060 3400              ADDC    A,#00H
0062 FD                MOV     R5,A
0063 EC                MOV     A,R4
0064 3400              ADDC    A,#00H
0066 FC                MOV     R4,A
0067 900000      R     MOV     DPTR,#addr
006A 120000      E     LCALL   ?C?LLDXDATA0
006D D3                SETB    C
006E 120000      E     LCALL   ?C?ULCMP
0071 4004              JC      ?C0133
0073 7F00              MOV     R7,#00H
0075 8002              SJMP    ?C0134
0077         ?C0133:
0077 7F01              MOV     R7,#01H
0079         ?C0134:
0079         ?C0132:
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 92  

0079 EF                MOV     A,R7
007A 7003              JNZ     $ + 5H
007C 020000      R     LJMP    ?C0130
                                           ; SOURCE LINE # 1309
                                           ; SOURCE LINE # 1310
007F 900000      R     MOV     DPTR,#addr
0082 120000      E     LCALL   ?C?LLDXDATA
0085 EF                MOV     A,R7
0086 547F              ANL     A,#07FH
0088 FF                MOV     R7,A
0089 EE                MOV     A,R6
008A 5400              ANL     A,#00H
008C FE                MOV     R6,A
008D ED                MOV     A,R5
008E 5400              ANL     A,#00H
0090 FD                MOV     R5,A
0091 EC                MOV     A,R4
0092 5400              ANL     A,#00H
0094 FC                MOV     R4,A
0095 EF                MOV     A,R7
0096 2480              ADD     A,#080H
0098 FF                MOV     R7,A
0099 EE                MOV     A,R6
009A 3400              ADDC    A,#00H
009C FE                MOV     R6,A
009D ED                MOV     A,R5
009E 3400              ADDC    A,#00H
00A0 FD                MOV     R5,A
00A1 EC                MOV     A,R4
00A2 3400              ADDC    A,#00H
00A4 FC                MOV     R4,A
00A5 900000      R     MOV     DPTR,#startAddr
00A8 120000      E     LCALL   ?C?PLDXDATA
00AB 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 1312
00AE 7F80              MOV     R7,#080H
00B0 7E00              MOV     R6,#00H
00B2 7D00              MOV     R5,#00H
00B4 7C00              MOV     R4,#00H
00B6 900000      R     MOV     DPTR,#rowNum
00B9 120000      E     LCALL   ?C?LLDXDATA0
00BC 120000      E     LCALL   ?C?LMUL
00BF C004              PUSH    AR4
00C1 C005              PUSH    AR5
00C3 C006              PUSH    AR6
00C5 C007              PUSH    AR7
00C7 900000      R     MOV     DPTR,#len
00CA 120000      E     LCALL   ?C?LLDXDATA
00CD 900000      R     MOV     DPTR,#addr
00D0 120000      E     LCALL   ?C?LLDXDATA0
00D3 120000      E     LCALL   ?C?LADD
00D6 D003              POP     AR3
00D8 D002              POP     AR2
00DA D001              POP     AR1
00DC D000              POP     AR0
00DE D3                SETB    C
00DF 120000      E     LCALL   ?C?ULCMP
00E2 4004              JC      ?C0136
00E4 7F00              MOV     R7,#00H
00E6 804C              SJMP    ?C0137
00E8         ?C0136:
00E8 7F80              MOV     R7,#080H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 93  

00EA 7E00              MOV     R6,#00H
00EC 7D00              MOV     R5,#00H
00EE 7C00              MOV     R4,#00H
00F0 900000      R     MOV     DPTR,#rowNum
00F3 120000      E     LCALL   ?C?LLDXDATA0
00F6 120000      E     LCALL   ?C?LMUL
00F9 EF                MOV     A,R7
00FA 247F              ADD     A,#07FH
00FC FF                MOV     R7,A
00FD EE                MOV     A,R6
00FE 3400              ADDC    A,#00H
0100 FE                MOV     R6,A
0101 ED                MOV     A,R5
0102 3400              ADDC    A,#00H
0104 FD                MOV     R5,A
0105 EC                MOV     A,R4
0106 3400              ADDC    A,#00H
0108 FC                MOV     R4,A
0109 C004              PUSH    AR4
010B C005              PUSH    AR5
010D C006              PUSH    AR6
010F C007              PUSH    AR7
0111 900000      R     MOV     DPTR,#len
0114 120000      E     LCALL   ?C?LLDXDATA
0117 900000      R     MOV     DPTR,#addr
011A 120000      E     LCALL   ?C?LLDXDATA0
011D 120000      E     LCALL   ?C?LADD
0120 D003              POP     AR3
0122 D002              POP     AR2
0124 D001              POP     AR1
0126 D000              POP     AR0
0128 C3                CLR     C
0129 120000      E     LCALL   ?C?ULCMP
012C 5004              JNC     ?C0138
012E 7F00              MOV     R7,#00H
0130 8002              SJMP    ?C0139
0132         ?C0138:
0132 7F01              MOV     R7,#01H
0134         ?C0139:
0134         ?C0137:
0134 EF                MOV     A,R7
0135 601E              JZ      ?C0135
                                           ; SOURCE LINE # 1313
                                           ; SOURCE LINE # 1314
0137 900000      R     MOV     DPTR,#startAddr
013A 120000      E     LCALL   ?C?PLDXDATA
013D 120000      E     LCALL   ?C?LLDPTR
0140 900000      R     MOV     DPTR,#len
0143 120000      E     LCALL   ?C?LLDXDATA0
0146 120000      E     LCALL   ?C?LADD
0149 900000      R     MOV     DPTR,#endAddr
014C 120000      E     LCALL   ?C?PLDXDATA
014F 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 1315
0152 020000      R     LJMP    ?C0141
0155         ?C0135:
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1318
0155 7F00              MOV     R7,#00H
0157 7E01              MOV     R6,#01H
0159 7D00              MOV     R5,#00H
015B 7C00              MOV     R4,#00H
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 94  

015D 900000      R     MOV     DPTR,#endAddr
0160 120000      E     LCALL   ?C?PLDXDATA
0163 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 1319
                                           ; SOURCE LINE # 1320
0166 020000      R     LJMP    ?C0141
0169         ?C0130:
                                           ; SOURCE LINE # 1322
                                           ; SOURCE LINE # 1324
0169 7F80              MOV     R7,#080H
016B 7E00              MOV     R6,#00H
016D 7D00              MOV     R5,#00H
016F 7C00              MOV     R4,#00H
0171 900000      R     MOV     DPTR,#rowNum
0174 120000      E     LCALL   ?C?LLDXDATA0
0177 120000      E     LCALL   ?C?LMUL
017A C004              PUSH    AR4
017C C005              PUSH    AR5
017E C006              PUSH    AR6
0180 C007              PUSH    AR7
0182 900000      R     MOV     DPTR,#len
0185 120000      E     LCALL   ?C?LLDXDATA
0188 900000      R     MOV     DPTR,#addr
018B 120000      E     LCALL   ?C?LLDXDATA0
018E 120000      E     LCALL   ?C?LADD
0191 D003              POP     AR3
0193 D002              POP     AR2
0195 D001              POP     AR1
0197 D000              POP     AR0
0199 D3                SETB    C
019A 120000      E     LCALL   ?C?ULCMP
019D 4004              JC      ?C0143
019F 7F00              MOV     R7,#00H
01A1 804C              SJMP    ?C0144
01A3         ?C0143:
01A3 7F80              MOV     R7,#080H
01A5 7E00              MOV     R6,#00H
01A7 7D00              MOV     R5,#00H
01A9 7C00              MOV     R4,#00H
01AB 900000      R     MOV     DPTR,#rowNum
01AE 120000      E     LCALL   ?C?LLDXDATA0
01B1 120000      E     LCALL   ?C?LMUL
01B4 EF                MOV     A,R7
01B5 247F              ADD     A,#07FH
01B7 FF                MOV     R7,A
01B8 EE                MOV     A,R6
01B9 3400              ADDC    A,#00H
01BB FE                MOV     R6,A
01BC ED                MOV     A,R5
01BD 3400              ADDC    A,#00H
01BF FD                MOV     R5,A
01C0 EC                MOV     A,R4
01C1 3400              ADDC    A,#00H
01C3 FC                MOV     R4,A
01C4 C004              PUSH    AR4
01C6 C005              PUSH    AR5
01C8 C006              PUSH    AR6
01CA C007              PUSH    AR7
01CC 900000      R     MOV     DPTR,#len
01CF 120000      E     LCALL   ?C?LLDXDATA
01D2 900000      R     MOV     DPTR,#addr
01D5 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 95  

01D8 120000      E     LCALL   ?C?LADD
01DB D003              POP     AR3
01DD D002              POP     AR2
01DF D001              POP     AR1
01E1 D000              POP     AR0
01E3 C3                CLR     C
01E4 120000      E     LCALL   ?C?ULCMP
01E7 5004              JNC     ?C0145
01E9 7F00              MOV     R7,#00H
01EB 8002              SJMP    ?C0146
01ED         ?C0145:
01ED 7F01              MOV     R7,#01H
01EF         ?C0146:
01EF         ?C0144:
01EF EF                MOV     A,R7
01F0 7003              JNZ     $ + 5H
01F2 020000      R     LJMP    ?C0142
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1326
01F5 7F80              MOV     R7,#080H
01F7 7E00              MOV     R6,#00H
01F9 7D00              MOV     R5,#00H
01FB 7C00              MOV     R4,#00H
01FD 900000      R     MOV     DPTR,#startAddr
0200 120000      E     LCALL   ?C?PLDXDATA
0203 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 1327
0206 900000      R     MOV     DPTR,#addr
0209 120000      E     LCALL   ?C?LLDXDATA
020C EF                MOV     A,R7
020D 547F              ANL     A,#07FH
020F FF                MOV     R7,A
0210 EE                MOV     A,R6
0211 5400              ANL     A,#00H
0213 FE                MOV     R6,A
0214 ED                MOV     A,R5
0215 5400              ANL     A,#00H
0217 FD                MOV     R5,A
0218 EC                MOV     A,R4
0219 5400              ANL     A,#00H
021B FC                MOV     R4,A
021C C004              PUSH    AR4
021E C005              PUSH    AR5
0220 C006              PUSH    AR6
0222 C007              PUSH    AR7
0224 900000      R     MOV     DPTR,#startAddr
0227 120000      E     LCALL   ?C?PLDXDATA
022A 120000      E     LCALL   ?C?LLDPTR
022D D003              POP     AR3
022F D002              POP     AR2
0231 D001              POP     AR1
0233 D000              POP     AR0
0235 120000      E     LCALL   ?C?LSUB
0238 C004              PUSH    AR4
023A C005              PUSH    AR5
023C C006              PUSH    AR6
023E C007              PUSH    AR7
0240 900000      R     MOV     DPTR,#startAddr
0243 120000      E     LCALL   ?C?PLDXDATA
0246 120000      E     LCALL   ?C?LLDPTR
0249 900000      R     MOV     DPTR,#len
024C 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 96  

024F 120000      E     LCALL   ?C?LADD
0252 D003              POP     AR3
0254 D002              POP     AR2
0256 D001              POP     AR1
0258 D000              POP     AR0
025A 120000      E     LCALL   ?C?LSUB
025D 900000      R     MOV     DPTR,#endAddr
0260 120000      E     LCALL   ?C?PLDXDATA
0263 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 1328
0266 900000      R     MOV     DPTR,#startAddr
0269 120000      E     LCALL   ?C?PLDXDATA
026C 120000      E     LCALL   ?C?LLDPTR0
026F C000              PUSH    AR0
0271 C001              PUSH    AR1
0273 C002              PUSH    AR2
0275 C003              PUSH    AR3
0277 900000      R     MOV     DPTR,#endAddr
027A 120000      E     LCALL   ?C?PLDXDATA
027D 120000      E     LCALL   ?C?LLDPTR
0280 D003              POP     AR3
0282 D002              POP     AR2
0284 D001              POP     AR1
0286 D000              POP     AR0
0288 120000      E     LCALL   ?C?LSUB
028B A804              MOV     R0,AR4
028D A905              MOV     R1,AR5
028F AA06              MOV     R2,AR6
0291 AB07              MOV     R3,AR7
0293 900000      R     MOV     DPTR,#len
0296 120000      E     LCALL   ?C?LLDXDATA
0299 120000      E     LCALL   ?C?LSUB
029C 900000      R     MOV     DPTR,#offset
029F 120000      E     LCALL   ?C?PLDXDATA
02A2 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 1329
02A5 8017              SJMP    ?C0141
02A7         ?C0142:
                                           ; SOURCE LINE # 1331
                                           ; SOURCE LINE # 1332
02A7 900000      R     MOV     DPTR,#skip
02AA 120000      E     LCALL   ?C?LLDXDATA
02AD 7B01              MOV     R3,#01H
02AF 7A00              MOV     R2,#00H
02B1 7900              MOV     R1,#00H
02B3 7800              MOV     R0,#00H
02B5 120000      E     LCALL   ?C?LADD
02B8 900000      R     MOV     DPTR,#skip
02BB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1333
                                           ; SOURCE LINE # 1334
02BE         ?C0141:
                                           ; SOURCE LINE # 1336
02BE 900000      R     MOV     DPTR,#skip
02C1 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1337
02C4         ?C0148:
02C4 22                RET     
             ; FUNCTION _GetAddresses (END)

             ; FUNCTION _FillChecksum (BEGIN)
                                           ; SOURCE LINE # 1368
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 97  

0000 900000      R     MOV     DPTR,#context
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1369
                                           ; SOURCE LINE # 1373
0006 900000      R     MOV     DPTR,#context
0009 120000      E     LCALL   ?C?PLDXDATA
000C E9                MOV     A,R1
000D 2408              ADD     A,#08H
000F F9                MOV     R1,A
0010 EA                MOV     A,R2
0011 3400              ADDC    A,#00H
0013 FA                MOV     R2,A
0014 120000      E     LCALL   ?C?LLDPTR
0017 900000      R     MOV     DPTR,#wrAddr
001A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1376
001D 900000      R     MOV     DPTR,#wrAddr
0020 120000      E     LCALL   ?C?LLDXDATA
0023 A907              MOV     R1,AR7
0025 AA06              MOV     R2,AR6
0027 AB05              MOV     R3,AR5
0029 120000      E     LCALL   ?C?LLDPTR
002C 900000      R     MOV     DPTR,#seqNum
002F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1377
0032 900000      R     MOV     DPTR,#ret
0035 7401              MOV     A,#01H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1379
0038 7F00              MOV     R7,#00H
003A 7E00              MOV     R6,#00H
003C 7D00              MOV     R5,#00H
003E 7C00              MOV     R4,#00H
0040 900000      R     MOV     DPTR,#i
0043 120000      E     LCALL   ?C?LSTXDATA
0046         ?C0149:
0046 900000      R     MOV     DPTR,#context
0049 120000      E     LCALL   ?C?PLDXDATA
004C E9                MOV     A,R1
004D 2410              ADD     A,#010H
004F F9                MOV     R1,A
0050 EA                MOV     A,R2
0051 3400              ADDC    A,#00H
0053 FA                MOV     R2,A
0054 120000      E     LCALL   ?C?LLDPTR
0057 900000      R     MOV     DPTR,#context
005A 120000      E     LCALL   ?C?PLDXDATA
005D E9                MOV     A,R1
005E 2404              ADD     A,#04H
0060 F9                MOV     R1,A
0061 EA                MOV     A,R2
0062 3400              ADDC    A,#00H
0064 FA                MOV     R2,A
0065 120000      E     LCALL   ?C?LLDPTR0
0068 120000      E     LCALL   ?C?LMUL
006B 900000      R     MOV     DPTR,#i
006E 120000      E     LCALL   ?C?LLDXDATA0
0071 C3                CLR     C
0072 120000      E     LCALL   ?C?ULCMP
0075 4003              JC      $ + 5H
0077 020000      R     LJMP    ?C0150
                                           ; SOURCE LINE # 1380
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 98  

                                           ; SOURCE LINE # 1382
007A 900000      R     MOV     DPTR,#wrAddr
007D 120000      E     LCALL   ?C?LLDXDATA
0080 A907              MOV     R1,AR7
0082 AA06              MOV     R2,AR6
0084 AB05              MOV     R3,AR5
0086 C003              PUSH    AR3
0088 C002              PUSH    AR2
008A C001              PUSH    AR1
008C 7B01              MOV     R3,#01H
008E 7A00        R     MOV     R2,#HIGH writeRamBuffer
0090 7900        R     MOV     R1,#LOW writeRamBuffer
0092 A801              MOV     R0,AR1
0094 AC02              MOV     R4,AR2
0096 AD03              MOV     R5,AR3
0098 D001              POP     AR1
009A D002              POP     AR2
009C D003              POP     AR3
009E 7E01              MOV     R6,#01H
00A0 7F00              MOV     R7,#00H
00A2 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 1385
00A5 900000      R     MOV     DPTR,#seqNum
00A8 120000      E     LCALL   ?C?LLDXDATA
00AB 7B01              MOV     R3,#01H
00AD 7A00              MOV     R2,#00H
00AF 7900              MOV     R1,#00H
00B1 7800              MOV     R0,#00H
00B3 120000      E     LCALL   ?C?LADD
00B6 900000      R     MOV     DPTR,#seqNum
00B9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1386
00BC 900000      R     MOV     DPTR,#seqNum
00BF 120000      E     LCALL   ?C?LLDXDATA
00C2 900000      R     MOV     DPTR,#writeRamBuffer
00C5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1390
00C8 7B01              MOV     R3,#01H
00CA 7A00        R     MOV     R2,#HIGH writeRamBuffer+080H
00CC 7900        R     MOV     R1,#LOW writeRamBuffer+080H
00CE 7F80              MOV     R7,#080H
00D0 7E00              MOV     R6,#00H
00D2 7D00              MOV     R5,#00H
00D4 7C00              MOV     R4,#00H
00D6 120000      R     LCALL   _CalcChecksum
00D9 E4                CLR     A
00DA FC                MOV     R4,A
00DB FD                MOV     R5,A
00DC FE                MOV     R6,A
00DD 900000      R     MOV     DPTR,#writeRamBuffer+07CH
00E0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1394
00E3 900000      R     MOV     DPTR,#wrAddr
00E6 120000      E     LCALL   ?C?LLDXDATA
00E9 7B01              MOV     R3,#01H
00EB 7A00        R     MOV     R2,#HIGH writeRamBuffer
00ED 7900        R     MOV     R1,#LOW writeRamBuffer
00EF C003              PUSH    AR3
00F1 C002              PUSH    AR2
00F3 C001              PUSH    AR1
00F5 900000      R     MOV     DPTR,#context
00F8 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 99  

00FB 900000      R     MOV     DPTR,#?_WriteRow?BYTE+07H
00FE 120000      E     LCALL   ?C?PSTXDATA
0101 D001              POP     AR1
0103 D002              POP     AR2
0105 D003              POP     AR3
0107 120000      R     LCALL   _WriteRow
010A 900000      R     MOV     DPTR,#ret
010D EF                MOV     A,R7
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1399
010F 900000      R     MOV     DPTR,#context
0112 120000      E     LCALL   ?C?PLDXDATA
0115 E9                MOV     A,R1
0116 2416              ADD     A,#016H
0118 F9                MOV     R1,A
0119 EA                MOV     A,R2
011A 3400              ADDC    A,#00H
011C FA                MOV     R2,A
011D 120000      E     LCALL   ?C?LLDPTR0
0120 900000      R     MOV     DPTR,#wrAddr
0123 120000      E     LCALL   ?C?LLDXDATA
0126 120000      E     LCALL   ?C?LSUB
0129 900000      R     MOV     DPTR,#context
012C 120000      E     LCALL   ?C?PLDXDATA
012F 120000      E     LCALL   ?C?LLDPTR0
0132 120000      E     LCALL   ?C?LADD
0135 900000      R     MOV     DPTR,#tmpRowAddr
0138 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1402
013B 900000      R     MOV     DPTR,#tmpRowAddr
013E 120000      E     LCALL   ?C?LLDXDATA
0141 7B01              MOV     R3,#01H
0143 7A00        R     MOV     R2,#HIGH writeRamBuffer
0145 7900        R     MOV     R1,#LOW writeRamBuffer
0147 C003              PUSH    AR3
0149 C002              PUSH    AR2
014B C001              PUSH    AR1
014D 900000      R     MOV     DPTR,#context
0150 120000      E     LCALL   ?C?PLDXDATA
0153 900000      R     MOV     DPTR,#?_WriteRow?BYTE+07H
0156 120000      E     LCALL   ?C?PSTXDATA
0159 D001              POP     AR1
015B D002              POP     AR2
015D D003              POP     AR3
015F 120000      R     LCALL   _WriteRow
0162 900000      R     MOV     DPTR,#ret
0165 EF                MOV     A,R7
0166 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1408
0167 900000      R     MOV     DPTR,#seqNum
016A 120000      E     LCALL   ?C?LLDXDATA
016D 7B01              MOV     R3,#01H
016F 7A00        R     MOV     R2,#HIGH wrAddr
0171 7900        R     MOV     R1,#LOW wrAddr
0173 C003              PUSH    AR3
0175 C002              PUSH    AR2
0177 C001              PUSH    AR1
0179 7B01              MOV     R3,#01H
017B 7A00        R     MOV     R2,#HIGH rdAddr
017D 7900        R     MOV     R1,#LOW rdAddr
017F 900000      R     MOV     DPTR,#?_GetNextRowToWrite?BYTE+07H
0182 120000      E     LCALL   ?C?PSTXDATA
C51 COMPILER V9.51   CY_EM_EEPROM                                                          04/12/2019 13:07:37 PAGE 100 

0185 900000      R     MOV     DPTR,#context
0188 120000      E     LCALL   ?C?PLDXDATA
018B 900000      R     MOV     DPTR,#?_GetNextRowToWrite?BYTE+0AH
018E 120000      E     LCALL   ?C?PSTXDATA
0191 D001              POP     AR1
0193 D002              POP     AR2
0195 D003              POP     AR3
0197 120000      R     LCALL   _GetNextRowToWrite
                                           ; SOURCE LINE # 1409
019A 900000      R     MOV     DPTR,#i
019D 120000      E     LCALL   ?C?LLDXDATA
01A0 7B01              MOV     R3,#01H
01A2 7A00              MOV     R2,#00H
01A4 7900              MOV     R1,#00H
01A6 7800              MOV     R0,#00H
01A8 120000      E     LCALL   ?C?LADD
01AB 900000      R     MOV     DPTR,#i
01AE 120000      E     LCALL   ?C?LSTXDATA
01B1 020000      R     LJMP    ?C0149
01B4         ?C0150:
                                           ; SOURCE LINE # 1411
01B4 900000      R     MOV     DPTR,#ret
01B7 E0                MOVX    A,@DPTR
01B8 FF                MOV     R7,A
                                           ; SOURCE LINE # 1412
01B9         ?C0152:
01B9 22                RET     
             ; FUNCTION _FillChecksum (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   8723    ----
   CONSTANT SIZE    =    256    ----
   XDATA SIZE       =   ----    1397
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
