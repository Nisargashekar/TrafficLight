C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LED_UPDATEISR
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\LED_UpdateISR.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\LED_UpdateISR.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DE
                    -BUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/LED_UpdateISR.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\LED_Upda
                    -teISR.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LED_UpdateISR.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          
  19          #include <cydevice_trm.h>
  20          #include <CyLib.h>
  21          #include <LED_UpdateISR.h>
  22          #include "cyapicallbacks.h"
  23          
  24          #if !defined(LED_UpdateISR__REMOVED) /* Check for removal by optimization */
  25          
  26          /*******************************************************************************
  27          *  Place your includes, defines and code here 
  28          ********************************************************************************/
  29          /* `#START LED_UpdateISR_intc` */
  30          extern uint8 Ftimer;
  31          extern uint8 Rtimer;
  32          extern uint8 Dtimer;
  33          extern uint8 Ltimer;
  34          /* `#END` */
  35          
  36          
  37          /*******************************************************************************
  38          * Function Name: LED_UpdateISR_Start
  39          ********************************************************************************
  40          *
  41          * Summary:
  42          *  Set up the interrupt and enable it. This function disables the interrupt, 
  43          *  sets the default interrupt vector, sets the priority from the value in the
  44          *  Design Wide Resources Interrupt Editor, then enables the interrupt to the 
  45          *  interrupt controller.
  46          *
  47          * Parameters:  
  48          *   None
  49          *
  50          * Return:
  51          *   None
  52          *
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 2   

  53          *******************************************************************************/
  54          void LED_UpdateISR_Start(void) 
  55          {
  56   1          /* For all we know the interrupt is active. */
  57   1          LED_UpdateISR_Disable();
  58   1      
  59   1          /* Set the ISR to point to the LED_UpdateISR Interrupt. */
  60   1          LED_UpdateISR_SetVector(&LED_UpdateISR_Interrupt);
  61   1      
  62   1          /* Set the priority. */
  63   1          LED_UpdateISR_SetPriority((uint8)LED_UpdateISR_INTC_PRIOR_NUMBER);
  64   1      
  65   1          /* Enable it. */
  66   1          LED_UpdateISR_Enable();
  67   1      }
  68          
  69          
  70          /*******************************************************************************
  71          * Function Name: LED_UpdateISR_StartEx
  72          ********************************************************************************
  73          *
  74          * Summary:
  75          *  Sets up the interrupt and enables it. This function disables the interrupt,
  76          *  sets the interrupt vector based on the address passed in, sets the priority 
  77          *  from the value in the Design Wide Resources Interrupt Editor, then enables 
  78          *  the interrupt to the interrupt controller.
  79          *  
  80          *  When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
  81          *  used to provide consistent definition across compilers:
  82          *  
  83          *  Function definition example:
  84          *   CY_ISR(MyISR)
  85          *   {
  86          *   }
  87          *   Function prototype example:
  88          *   CY_ISR_PROTO(MyISR);
  89          *
  90          * Parameters:  
  91          *   address: Address of the ISR to set in the interrupt vector table.
  92          *
  93          * Return:
  94          *   None
  95          *
  96          *******************************************************************************/
  97          void LED_UpdateISR_StartEx(cyisraddress address) 
  98          {
  99   1          /* For all we know the interrupt is active. */
 100   1          LED_UpdateISR_Disable();
 101   1      
 102   1          /* Set the ISR to point to the LED_UpdateISR Interrupt. */
 103   1          LED_UpdateISR_SetVector(address);
 104   1      
 105   1          /* Set the priority. */
 106   1          LED_UpdateISR_SetPriority((uint8)LED_UpdateISR_INTC_PRIOR_NUMBER);
 107   1      
 108   1          /* Enable it. */
 109   1          LED_UpdateISR_Enable();
 110   1      }
 111          
 112          
 113          /*******************************************************************************
 114          * Function Name: LED_UpdateISR_Stop
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 3   

 115          ********************************************************************************
 116          *
 117          * Summary:
 118          *   Disables and removes the interrupt.
 119          *
 120          * Parameters:  
 121          *   None
 122          *
 123          * Return:
 124          *   None
 125          *
 126          *******************************************************************************/
 127          void LED_UpdateISR_Stop(void) 
 128          {
 129   1          /* Disable this interrupt. */
 130   1          LED_UpdateISR_Disable();
 131   1      }
 132          
 133          
 134          /*******************************************************************************
 135          * Function Name: LED_UpdateISR_Interrupt
 136          ********************************************************************************
 137          *
 138          * Summary:
 139          *   The default Interrupt Service Routine for LED_UpdateISR.
 140          *
 141          *   Add custom code between the START and END comments to keep the next version
 142          *   of this file from over-writing your code.
 143          *
 144          *   Note You may use either the default ISR by using this API, or you may define
 145          *   your own separate ISR through ISR_StartEx().
 146          *
 147          * Parameters:  
 148          *   None
 149          *
 150          * Return:
 151          *   None
 152          *
 153          *******************************************************************************/
 154          CY_ISR(LED_UpdateISR_Interrupt)
 155          {
 156   1          #ifdef LED_UpdateISR_INTERRUPT_INTERRUPT_CALLBACK
                      LED_UpdateISR_Interrupt_InterruptCallback();
                  #endif /* LED_UpdateISR_INTERRUPT_INTERRUPT_CALLBACK */
 159   1      
 160   1          /*  Place your Interrupt code here. */
 161   1          /* `#START LED_UpdateISR_Interrupt` */
 162   1      
 163   1          /* `#END` */
 164   1      
 165   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 166   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 167   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (LED_UpdateISR__ES2_PATCH ))      
                          LED_UpdateISR_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 170   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 171   1      }
 172          
 173          
 174          /*******************************************************************************
 175          * Function Name: LED_UpdateISR_SetVector
 176          ********************************************************************************
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 4   

 177          *
 178          * Summary:
 179          *   Change the ISR vector for the Interrupt. Note calling LED_UpdateISR_Start
 180          *   will override any effect this method would have had. To set the vector 
 181          *   before the component has been started use LED_UpdateISR_StartEx instead.
 182          * 
 183          *   When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
 184          *   used to provide consistent definition across compilers:
 185          *
 186          *   Function definition example:
 187          *   CY_ISR(MyISR)
 188          *   {
 189          *   }
 190          *
 191          *   Function prototype example:
 192          *     CY_ISR_PROTO(MyISR);
 193          *
 194          * Parameters:
 195          *   address: Address of the ISR to set in the interrupt vector table.
 196          *
 197          * Return:
 198          *   None
 199          *
 200          *******************************************************************************/
 201          void LED_UpdateISR_SetVector(cyisraddress address) 
 202          {
 203   1          CY_SET_REG16(LED_UpdateISR_INTC_VECTOR, (uint16) address);
 204   1      }
 205          
 206          
 207          /*******************************************************************************
 208          * Function Name: LED_UpdateISR_GetVector
 209          ********************************************************************************
 210          *
 211          * Summary:
 212          *   Gets the "address" of the current ISR vector for the Interrupt.
 213          *
 214          * Parameters:
 215          *   None
 216          *
 217          * Return:
 218          *   Address of the ISR in the interrupt vector table.
 219          *
 220          *******************************************************************************/
 221          cyisraddress LED_UpdateISR_GetVector(void) 
 222          {
 223   1          return (cyisraddress) CY_GET_REG16(LED_UpdateISR_INTC_VECTOR);
 224   1      }
 225          
 226          
 227          /*******************************************************************************
 228          * Function Name: LED_UpdateISR_SetPriority
 229          ********************************************************************************
 230          *
 231          * Summary:
 232          *   Sets the Priority of the Interrupt. 
 233          *
 234          *   Note calling LED_UpdateISR_Start or LED_UpdateISR_StartEx will 
 235          *   override any effect this API would have had. This API should only be called
 236          *   after LED_UpdateISR_Start or LED_UpdateISR_StartEx has been called. 
 237          *   To set the initial priority for the component, use the Design-Wide Resources
 238          *   Interrupt Editor.
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 5   

 239          *
 240          *   Note This API has no effect on Non-maskable interrupt NMI).
 241          *
 242          * Parameters:
 243          *   priority: Priority of the interrupt, 0 being the highest priority
 244          *             PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 245          *             PSoC 4: Priority is from 0 to 3.
 246          *
 247          * Return:
 248          *   None
 249          *
 250          *******************************************************************************/
 251          void LED_UpdateISR_SetPriority(uint8 priority) 
 252          {
 253   1          *LED_UpdateISR_INTC_PRIOR = priority << 5;
 254   1      }
 255          
 256          
 257          /*******************************************************************************
 258          * Function Name: LED_UpdateISR_GetPriority
 259          ********************************************************************************
 260          *
 261          * Summary:
 262          *   Gets the Priority of the Interrupt.
 263          *
 264          * Parameters:
 265          *   None
 266          *
 267          * Return:
 268          *   Priority of the interrupt, 0 being the highest priority
 269          *    PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 270          *    PSoC 4: Priority is from 0 to 3.
 271          *
 272          *******************************************************************************/
 273          uint8 LED_UpdateISR_GetPriority(void) 
 274          {
 275   1          uint8 priority;
 276   1      
 277   1      
 278   1          priority = *LED_UpdateISR_INTC_PRIOR >> 5;
 279   1      
 280   1          return priority;
 281   1      }
 282          
 283          
 284          /*******************************************************************************
 285          * Function Name: LED_UpdateISR_Enable
 286          ********************************************************************************
 287          *
 288          * Summary:
 289          *   Enables the interrupt to the interrupt controller. Do not call this function
 290          *   unless ISR_Start() has been called or the functionality of the ISR_Start() 
 291          *   function, which sets the vector and the priority, has been called.
 292          *
 293          * Parameters:
 294          *   None
 295          *
 296          * Return:
 297          *   None
 298          *
 299          *******************************************************************************/
 300          void LED_UpdateISR_Enable(void) 
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 6   

 301          {
 302   1          /* Enable the general interrupt. */
 303   1          *LED_UpdateISR_INTC_SET_EN = LED_UpdateISR__INTC_MASK;
 304   1      }
 305          
 306          
 307          /*******************************************************************************
 308          * Function Name: LED_UpdateISR_GetState
 309          ********************************************************************************
 310          *
 311          * Summary:
 312          *   Gets the state (enabled, disabled) of the Interrupt.
 313          *
 314          * Parameters:
 315          *   None
 316          *
 317          * Return:
 318          *   1 if enabled, 0 if disabled.
 319          *
 320          *******************************************************************************/
 321          uint8 LED_UpdateISR_GetState(void) 
 322          {
 323   1          /* Get the state of the general interrupt. */
 324   1          return ((*LED_UpdateISR_INTC_SET_EN & (uint8)LED_UpdateISR__INTC_MASK) != 0u) ? 1u:0u;
 325   1      }
 326          
 327          
 328          /*******************************************************************************
 329          * Function Name: LED_UpdateISR_Disable
 330          ********************************************************************************
 331          *
 332          * Summary:
 333          *   Disables the Interrupt in the interrupt controller.
 334          *
 335          * Parameters:
 336          *   None
 337          *
 338          * Return:
 339          *   None
 340          *
 341          *******************************************************************************/
 342          void LED_UpdateISR_Disable(void) 
 343          {
 344   1          /* Disable the general interrupt. */
 345   1          *LED_UpdateISR_INTC_CLR_EN = LED_UpdateISR__INTC_MASK;
 346   1      }
 347          
 348          
 349          /*******************************************************************************
 350          * Function Name: LED_UpdateISR_SetPending
 351          ********************************************************************************
 352          *
 353          * Summary:
 354          *   Causes the Interrupt to enter the pending state, a software method of
 355          *   generating the interrupt.
 356          *
 357          * Parameters:
 358          *   None
 359          *
 360          * Return:
 361          *   None
 362          *
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 7   

 363          * Side Effects:
 364          *   If interrupts are enabled and the interrupt is set up properly, the ISR is
 365          *   entered (depending on the priority of this interrupt and other pending 
 366          *   interrupts).
 367          *
 368          *******************************************************************************/
 369          void LED_UpdateISR_SetPending(void) 
 370          {
 371   1          *LED_UpdateISR_INTC_SET_PD = LED_UpdateISR__INTC_MASK;
 372   1      }
 373          
 374          
 375          /*******************************************************************************
 376          * Function Name: LED_UpdateISR_ClearPending
 377          ********************************************************************************
 378          *
 379          * Summary:
 380          *   Clears a pending interrupt in the interrupt controller.
 381          *
 382          *   Note Some interrupt sources are clear-on-read and require the block 
 383          *   interrupt/status register to be read/cleared with the appropriate block API 
 384          *   (GPIO, UART, and so on). Otherwise the ISR will continue to remain in 
 385          *   pending state even though the interrupt itself is cleared using this API.
 386          *
 387          * Parameters:
 388          *   None
 389          *
 390          * Return:
 391          *   None
 392          *
 393          *******************************************************************************/
 394          void LED_UpdateISR_ClearPending(void) 
 395          {
 396   1          *LED_UpdateISR_INTC_CLR_PD = LED_UpdateISR__INTC_MASK;
 397   1      }
 398          
 399          #endif /* End check for removal by optimization */
 400          
 401          
 402          /* [] END OF FILE */
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LED_UpdateISR_Start (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 57
0000 120000      R     LCALL   LED_UpdateISR_Disable
                                           ; SOURCE LINE # 60
0003 7E00        R     MOV     R6,#HIGH LED_UpdateISR_Interrupt
0005 7F00        R     MOV     R7,#LOW LED_UpdateISR_Interrupt
0007 120000      R     LCALL   _LED_UpdateISR_SetVector
                                           ; SOURCE LINE # 63
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _LED_UpdateISR_SetPriority
                                           ; SOURCE LINE # 66
000F 120000      R     LCALL   LED_UpdateISR_Enable
                                           ; SOURCE LINE # 67
0012 22                RET     
             ; FUNCTION LED_UpdateISR_Start (END)

             ; FUNCTION _LED_UpdateISR_StartEx (BEGIN)
                                           ; SOURCE LINE # 97
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 100
0008 120000      R     LCALL   LED_UpdateISR_Disable
                                           ; SOURCE LINE # 103
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _LED_UpdateISR_SetVector
                                           ; SOURCE LINE # 106
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _LED_UpdateISR_SetPriority
                                           ; SOURCE LINE # 109
001B 120000      R     LCALL   LED_UpdateISR_Enable
                                           ; SOURCE LINE # 110
001E 22                RET     
             ; FUNCTION _LED_UpdateISR_StartEx (END)

             ; FUNCTION LED_UpdateISR_Stop (BEGIN)
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 130
0000 120000      R     LCALL   LED_UpdateISR_Disable
                                           ; SOURCE LINE # 131
0003 22                RET     
             ; FUNCTION LED_UpdateISR_Stop (END)

             ; FUNCTION LED_UpdateISR_Interrupt (BEGIN)
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 171
0000 32                RETI    
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 9   

             ; FUNCTION LED_UpdateISR_Interrupt (END)

             ; FUNCTION _LED_UpdateISR_SetVector (BEGIN)
                                           ; SOURCE LINE # 201
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7900              MOV     R1,#00H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 204
001D 22                RET     
             ; FUNCTION _LED_UpdateISR_SetVector (END)

             ; FUNCTION LED_UpdateISR_GetVector (BEGIN)
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7900              MOV     R1,#00H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 224
0009         ?C0006:
0009 22                RET     
             ; FUNCTION LED_UpdateISR_GetVector (END)

             ; FUNCTION _LED_UpdateISR_SetPriority (BEGIN)
                                           ; SOURCE LINE # 251
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904480            MOV     DPTR,#04480H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
0015 22                RET     
             ; FUNCTION _LED_UpdateISR_SetPriority (END)
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 10  


             ; FUNCTION LED_UpdateISR_GetPriority (BEGIN)
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 278
0000 904480            MOV     DPTR,#04480H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 281
0015         ?C0008:
0015 22                RET     
             ; FUNCTION LED_UpdateISR_GetPriority (END)

             ; FUNCTION LED_UpdateISR_Enable (BEGIN)
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 303
0000 9044C0            MOV     DPTR,#044C0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
0006 22                RET     
             ; FUNCTION LED_UpdateISR_Enable (END)

             ; FUNCTION LED_UpdateISR_GetState (BEGIN)
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 324
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E004            JNB     ACC.0,?C0010
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0011
000D         ?C0010:
000D 7F00              MOV     R7,#00H
000F         ?C0011:
                                           ; SOURCE LINE # 325
000F         ?C0012:
000F 22                RET     
             ; FUNCTION LED_UpdateISR_GetState (END)

             ; FUNCTION LED_UpdateISR_Disable (BEGIN)
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 345
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   LED_UPDATEISR                                                         04/13/2019 18:18:43 PAGE 11  

                                           ; SOURCE LINE # 346
0006 22                RET     
             ; FUNCTION LED_UpdateISR_Disable (END)

             ; FUNCTION LED_UpdateISR_SetPending (BEGIN)
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
0000 9044D0            MOV     DPTR,#044D0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0006 22                RET     
             ; FUNCTION LED_UpdateISR_SetPending (END)

             ; FUNCTION LED_UpdateISR_ClearPending (BEGIN)
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
0000 9044D8            MOV     DPTR,#044D8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
0006 22                RET     
             ; FUNCTION LED_UpdateISR_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    183    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
