C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYLIB
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\CyLib.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\CyLib.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBUG) WL(
                    -2) PR(.\DP8051\DP8051_Keil_951\Debug/CyLib.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\CyLib.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file CyLib.c
   3          * \version 5.80
   4          *
   5          * \brief Provides a system API for the clocking, interrupts and watchdog timer.
   6          *
   7          * \note Documentation of the API's in this file is located in the System
   8          * Reference Guide provided with PSoC Creator.
   9          *
  10          ********************************************************************************
  11          * \copyright
  12          * Copyright 2008-2018, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "CyLib.h"
  19          
  20          
  21          /*******************************************************************************
  22          * The CyResetStatus variable is used to obtain value of RESET_SR0 register after
  23          * a device reset. It is set from initialize_psoc() at the early initialization
  24          * stage. In case of IAR EW IDE, initialize_psoc() is executed before the data
  25          * sections are initialized. To avoid zeroing, CyResetStatus should be placed
  26          * to the .noinit section.
  27          *******************************************************************************/
  28          CY_NOINIT uint8 CYXDATA CyResetStatus;
  29          
  30          
  31          /* Variable Vdda */
  32          #if(CYDEV_VARIABLE_VDDA == 1)
              
                  uint8 CyScPumpEnabled = (uint8)(CYDEV_VDDA_MV < 2700);
              
              #endif  /* (CYDEV_VARIABLE_VDDA == 1) */
  37          
  38          
  39          /* Do not use these definitions directly in your application */
  40          uint32 cydelay_freq_hz  = BCLK__BUS_CLK__HZ;
  41          uint32 cydelay_freq_khz = (BCLK__BUS_CLK__HZ + 999u) / 1000u;
  42          uint8  cydelay_freq_mhz = (uint8)((BCLK__BUS_CLK__HZ + 999999u) / 1000000u);
  43          uint32 cydelay_32k_ms   = 32768u * ((BCLK__BUS_CLK__HZ + 999u) / 1000u);
  44          
  45          
  46          /* Function Prototypes */
  47          static uint8 CyUSB_PowerOnCheck(void)  ;
  48          static void CyIMO_SetTrimValue(uint8 freq) ;
  49          static void CyBusClk_Internal_SetDivider(uint16 divider);
  50          
  51          #if(CY_PSOC5)
                  static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
                  static void CySysTickServiceCallbacks(void);
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 2   

                  uint32 CySysTickInitVar = 0u;
              #endif  /* (CY_PSOC5) */
  56          
  57          
  58          #if(CY_PSOC3)
  59              CY_ISR_PROTO(IntDefaultHandler);
  60          #endif /* (CY_PSOC3) */
  61          
  62          
  63          /*******************************************************************************
  64          * Function Name: CyPLL_OUT_Start
  65          ****************************************************************************//**
  66          *
  67          *   Enables the PLL.  Optionally waits for it to become stable.
  68          *   Waits at least 250 us or until it is detected that the PLL is stable.
  69          *
  70          *   \param wait:
  71          *    \param 0: Return immediately after configuration
  72          *    \param 1: Wait for PLL lock or timeout.
  73          *
  74          * \return
  75          *   Status
  76          *    CYRET_SUCCESS - Completed successfully
  77          *    CYRET_TIMEOUT - Timeout occurred without detecting a stable clock.
  78          *     If the input source of the clock is jittery, then the lock indication
  79          *     may not occur.  However, after the timeout has expired the generated PLL
  80          *     clock can still be used.
  81          *
  82          * \sideeffect
  83          *  If wait is enabled: This function uses the Fast Time Wheel to time the wait.
  84          *  Any other use of the Fast Time Wheel will be stopped during the period of
  85          *  this function and then restored. This function also uses the 100 KHz ILO.
  86          *  If not enabled, this function will enable the 100 KHz ILO for the period of
  87          *  this function.
  88          *
  89          *  No changes to the setup of the ILO, Fast Time Wheel, Central Time Wheel or
  90          *  Once Per Second interrupt may be made by interrupt routines during the period
  91          *  of this function execution. The current operation of the ILO, Central Time
  92          *  Wheel and Once Per Second interrupt are maintained during the operation of
  93          *  this function provided the reading of the Power Manager Interrupt Status
  94          *  Register is only done using the CyPmReadStatus() function.
  95          *
  96          *******************************************************************************/
  97          cystatus CyPLL_OUT_Start(uint8 wait) 
  98          {
  99   1          cystatus status = CYRET_SUCCESS;
 100   1      
 101   1          uint8 iloEnableState;
 102   1          uint8 pmTwCfg0State;
 103   1          uint8 pmTwCfg2State;
 104   1      
 105   1      
 106   1          /* Enables PLL circuit  */
 107   1          CY_CLK_PLL_CFG0_REG |= CY_CLK_PLL_ENABLE;
 108   1      
 109   1          if(wait != 0u)
 110   1          {
 111   2              /* Save 100 KHz ILO, FTW interval, enable and interrupt enable */
 112   2              iloEnableState = CY_LIB_SLOWCLK_ILO_CR0_REG & CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ;
 113   2              pmTwCfg0State = CY_LIB_PM_TW_CFG0_REG;
 114   2              pmTwCfg2State = CY_LIB_PM_TW_CFG2_REG;
 115   2      
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 3   

 116   2              CyPmFtwSetInterval(CY_CLK_PLL_FTW_INTERVAL);
 117   2      
 118   2              status = CYRET_TIMEOUT;
 119   2      
 120   2              while(0u == (CY_PM_FTW_INT & CyPmReadStatus(CY_PM_FTW_INT)))
 121   2              {
 122   3                  /* Wait for interrupt status */
 123   3                  if(0u != (CY_CLK_PLL_SR_REG & CY_CLK_PLL_LOCK_STATUS))
 124   3                  {
 125   4                      if(0u != (CY_CLK_PLL_SR_REG & CY_CLK_PLL_LOCK_STATUS))
 126   4                      {
 127   5                          status = CYRET_SUCCESS;
 128   5                          break;
 129   5                      }
 130   4                  }
 131   3              }
 132   2      
 133   2              /* Restore 100 KHz ILO, FTW interval, enable and interrupt enable */
 134   2              if(0u == iloEnableState)
 135   2              {
 136   3                  CyILO_Stop100K();
 137   3              }
 138   2      
 139   2              CY_LIB_PM_TW_CFG0_REG = pmTwCfg0State;
 140   2              CY_LIB_PM_TW_CFG2_REG = pmTwCfg2State;
 141   2          }
 142   1      
 143   1          return(status);
 144   1      }
 145          
 146          
 147          /*******************************************************************************
 148          * Function Name: CyPLL_OUT_Stop
 149          ****************************************************************************//**
 150          *
 151          *  Disables the PLL.
 152          *
 153          *******************************************************************************/
 154          void CyPLL_OUT_Stop(void) 
 155          {
 156   1          CY_CLK_PLL_CFG0_REG &= ((uint8)(~CY_CLK_PLL_ENABLE));
 157   1      }
 158          
 159          
 160          /*******************************************************************************
 161          * Function Name: CyPLL_OUT_SetPQ
 162          ****************************************************************************//**
 163          *
 164          *  Sets the P and Q dividers and the charge pump current.
 165          *  The Frequency Out will be P/Q * Frequency In.
 166          *  The PLL must be disabled before calling this function.
 167          *
 168          *  \param uint8 pDiv:
 169          *   Valid range [8 - 255].
 170          *
 171          *  \param uint8 qDiv:
 172          *   Valid range [1 - 16]. Input Frequency / Q must be in range of 1 to 3 MHz.
 173          
 174          *  \param uint8 current:
 175          *   Valid range [1 - 7]. Charge pump current in uA. Refer to the device TRM and
 176          *   datasheet for more information.
 177          *
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 4   

 178          * \sideeffect
 179          *  If this function execution results in the CPU clock frequency increasing,
 180          *  then the number of clock cycles the cache will wait before it samples data
 181          *  coming back from the Flash must be adjusted by calling
 182          *  CyFlash_SetWaitCycles() with an appropriate parameter. It can be optionally
 183          *  called if the CPU clock frequency is lowered in order to improve the CPU
 184          *  performance. See CyFlash_SetWaitCycles() description for more information.
 185          *
 186          *******************************************************************************/
 187          void CyPLL_OUT_SetPQ(uint8 pDiv, uint8 qDiv, uint8 current) 
 188          {
 189   1          /* Halt CPU in debug mode if PLL is enabled */
 190   1          CYASSERT(0u == (CY_CLK_PLL_CFG0_REG & CY_CLK_PLL_ENABLE));
 191   1      
 192   1          if((pDiv    >= CY_CLK_PLL_MIN_P_VALUE  ) &&
 193   1             (qDiv    <= CY_CLK_PLL_MAX_Q_VALUE  ) && (qDiv    >= CY_CLK_PLL_MIN_Q_VALUE  ) &&
 194   1             (current >= CY_CLK_PLL_MIN_CUR_VALUE) && (current <= CY_CLK_PLL_MAX_CUR_VALUE))
 195   1          {
 196   2              /* Set new values */
 197   2              CY_CLK_PLL_P_REG = pDiv;
 198   2              CY_CLK_PLL_Q_REG = ((uint8)(qDiv - 1u));
 199   2              CY_CLK_PLL_CFG1_REG = (CY_CLK_PLL_CFG1_REG & CY_CLK_PLL_CURRENT_MASK) |
 200   2                                      ((uint8)(((uint8)(current - 1u)) << CY_CLK_PLL_CURRENT_POSITION));
 201   2          }
 202   1          else
 203   1          {
 204   2              /***********************************************************************
 205   2              * Halt CPU in debug mode if:
 206   2              * - P divider is less than required
 207   2              * - Q divider is out of range
 208   2              * - pump current is out of range
 209   2              ***********************************************************************/
 210   2              CYASSERT(0u != 0u);
 211   2          }
 212   1      
 213   1      }
 214          
 215          
 216          /*******************************************************************************
 217          * Function Name: CyPLL_OUT_SetSource
 218          ****************************************************************************//**
 219          *
 220          *  Sets the input clock source to the PLL. The PLL must be disabled before
 221          *  calling this function.
 222          *
 223          *   \param source: One of the three available PLL clock sources
 224          *    \param CY_PLL_SOURCE_IMO  :   IMO
 225          *    \param CY_PLL_SOURCE_XTAL :   MHz Crystal
 226          *    \param CY_PLL_SOURCE_DSI  :   DSI
 227          *
 228          * \sideeffect
 229          *  If this function execution results in the CPU clock frequency increasing,
 230          *  then the number of clock cycles the cache will wait before it samples data
 231          *  coming back from the3 Flash must be adjusted by calling
 232          *  CyFlash_SetWaitCycles() with an appropriate parameter. It can be optionally
 233          *  called if the CPU clock frequency is lowered in order to improve the CPU
 234          *  performance. See CyFlash_SetWaitCycles() description for more information.
 235          *
 236          *******************************************************************************/
 237          void CyPLL_OUT_SetSource(uint8 source) 
 238          {
 239   1          /* Halt CPU in debug mode if PLL is enabled */
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 5   

 240   1          CYASSERT(0u == (CY_CLK_PLL_CFG0_REG & CY_CLK_PLL_ENABLE));
 241   1      
 242   1          switch(source)
 243   1          {
 244   2              case CY_PLL_SOURCE_IMO:
 245   2              case CY_PLL_SOURCE_XTAL:
 246   2              case CY_PLL_SOURCE_DSI:
 247   2                  CY_LIB_CLKDIST_CR_REG = ((CY_LIB_CLKDIST_CR_REG & CY_LIB_CLKDIST_CR_PLL_SCR_MASK) | source);
 248   2              break;
 249   2      
 250   2              default:
 251   2                  CYASSERT(0u != 0u);
 252   2              break;
 253   2          }
 254   1      }
 255          
 256          
 257          /*******************************************************************************
 258          * Function Name: CyIMO_Start
 259          ****************************************************************************//**
 260          *
 261          *  Enables the IMO. Optionally waits at least 6 us for it to settle.
 262          *
 263          *  \param uint8 wait:
 264          *   \param 0: Return immediately after configuration
 265          *   \param 1: Wait for at least 6 us for the IMO to settle.
 266          *
 267          * \sideeffect
 268          *  If wait is enabled: This function uses the Fast Time Wheel to time the wait.
 269          *  Any other use of the Fast Time Wheel will be stopped during the period of
 270          *  this function and then restored. This function also uses the 100 KHz ILO.
 271          *  If not enabled, this function will enable the 100 KHz ILO for the period of
 272          *  this function.
 273          *
 274          *  No changes to the setup of the ILO, Fast Time Wheel, Central Time Wheel or
 275          *  Once Per Second interrupt may be made by interrupt routines during the period
 276          *  of this function execution. The current operation of the ILO, Central Time
 277          *  Wheel and Once Per Second interrupt are maintained during the operation of
 278          *  this function provided the reading of the Power Manager Interrupt Status
 279          *  Register is only done using the CyPmReadStatus() function.
 280          *
 281          *******************************************************************************/
 282          void CyIMO_Start(uint8 wait) 
 283          {
 284   1          uint8 pmFtwCfg2Reg;
 285   1          uint8 pmFtwCfg0Reg;
 286   1          uint8 ilo100KhzEnable;
 287   1      
 288   1      
 289   1          CY_LIB_PM_ACT_CFG0_REG  |= CY_LIB_PM_ACT_CFG0_IMO_EN;
 290   1          CY_LIB_PM_STBY_CFG0_REG |= CY_LIB_PM_STBY_CFG0_IMO_EN;
 291   1      
 292   1          if(0u != wait)
 293   1          {
 294   2              /* Need to turn on 100KHz ILO if it happens to not already be running.*/
 295   2              ilo100KhzEnable = CY_LIB_SLOWCLK_ILO_CR0_REG & CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ;
 296   2              pmFtwCfg0Reg = CY_LIB_PM_TW_CFG0_REG;
 297   2              pmFtwCfg2Reg = CY_LIB_PM_TW_CFG2_REG;
 298   2      
 299   2              CyPmFtwSetInterval(CY_LIB_CLK_IMO_FTW_TIMEOUT);
 300   2      
 301   2              while (0u == (CY_PM_FTW_INT & CyPmReadStatus(CY_PM_FTW_INT)))
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 6   

 302   2              {
 303   3                  /* Wait for interrupt status */
 304   3              }
 305   2      
 306   2              if(0u == ilo100KhzEnable)
 307   2              {
 308   3                  CyILO_Stop100K();
 309   3              }
 310   2      
 311   2              CY_LIB_PM_TW_CFG0_REG = pmFtwCfg0Reg;
 312   2              CY_LIB_PM_TW_CFG2_REG = pmFtwCfg2Reg;
 313   2          }
 314   1      }
 315          
 316          
 317          /*******************************************************************************
 318          * Function Name: CyIMO_Stop
 319          ****************************************************************************//**
 320          *
 321          *   Disables the IMO.
 322          *
 323          *******************************************************************************/
 324          void CyIMO_Stop(void) 
 325          {
 326   1          CY_LIB_PM_ACT_CFG0_REG  &= ((uint8) (~CY_LIB_PM_ACT_CFG0_IMO_EN));
 327   1          CY_LIB_PM_STBY_CFG0_REG &= ((uint8) (~CY_LIB_PM_STBY_CFG0_IMO_EN));
 328   1      }
 329          
 330          
 331          /*******************************************************************************
 332          * Function Name: CyUSB_PowerOnCheck
 333          ****************************************************************************//**
 334          *
 335          *  Returns the USB power status value. A private function to cy_boot.
 336          *
 337          * \return
 338          *   uint8: one if the USB is enabled, 0 if not enabled.
 339          *
 340          *******************************************************************************/
 341          static uint8 CyUSB_PowerOnCheck(void)  
 342          {
 343   1          uint8 poweredOn = 0u;
 344   1      
 345   1          /* Check whether device is in Active or AltActive and if USB is powered on */
 346   1          if((((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ACTIVE ) &&
 347   1             (0u != (CY_LIB_PM_ACT_CFG5_REG & CY_ACT_USB_ENABLED     )))  ||
 348   1             (((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ALT_ACT) &&
 349   1             (0u != (CY_LIB_PM_STBY_CFG5_REG & CY_ALT_ACT_USB_ENABLED))))
 350   1          {
 351   2              poweredOn = 1u;
 352   2          }
 353   1      
 354   1          return (poweredOn);
 355   1      }
 356          
 357          
 358          /*******************************************************************************
 359          * Function Name: CyIMO_SetTrimValue
 360          ****************************************************************************//**
 361          *
 362          *  Sets the IMO factory trim values.
 363          *
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 7   

 364          *  uint8 freq - frequency for which trims must be set
 365          *
 366          *******************************************************************************/
 367          static void CyIMO_SetTrimValue(uint8 freq) 
 368          {
 369   1          uint8 usbPowerOn = CyUSB_PowerOnCheck();
 370   1      
 371   1          /* If USB is powered */
 372   1          if(usbPowerOn == 1u)
 373   1          {
 374   2              /* Unlock USB write */
 375   2              CY_LIB_USB_CR1_REG &= ((uint8)(~CY_LIB_USB_CLK_EN));
 376   2          }
 377   1          switch(freq)
 378   1          {
 379   2          case CY_IMO_FREQ_3MHZ:
 380   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_3MHZ_PTR);
 381   2              break;
 382   2      
 383   2          case CY_IMO_FREQ_6MHZ:
 384   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_6MHZ_PTR);
 385   2              break;
 386   2      
 387   2          case CY_IMO_FREQ_12MHZ:
 388   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_12MHZ_PTR);
 389   2              break;
 390   2      
 391   2          case CY_IMO_FREQ_24MHZ:
 392   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_24MHZ_PTR);
 393   2              break;
 394   2      
 395   2          case CY_IMO_FREQ_48MHZ:
 396   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_TR1_PTR);
 397   2              break;
 398   2      
 399   2          case CY_IMO_FREQ_62MHZ:
 400   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_67MHZ_PTR);
 401   2              break;
 402   2      
 403   2      #if(CY_PSOC5)
                  case CY_IMO_FREQ_74MHZ:
                      CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_80MHZ_PTR);
                      break;
              #endif  /* (CY_PSOC5) */
 408   2      
 409   2          case CY_IMO_FREQ_USB:
 410   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_USB_PTR);
 411   2      
 412   2              /* If USB is powered */
 413   2              if(usbPowerOn == 1u)
 414   2              {
 415   3                  /* Lock USB Oscillator */
 416   3                  CY_LIB_USB_CR1_REG |= CY_LIB_USB_CLK_EN;
 417   3              }
 418   2              break;
 419   2      
 420   2          default:
 421   2                  CYASSERT(0u != 0u);
 422   2              break;
 423   2          }
 424   1      
 425   1      }
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 8   

 426          
 427          
 428          /*******************************************************************************
 429          * Function Name: CyIMO_SetFreq
 430          ****************************************************************************//**
 431          *
 432          *  Sets the frequency of the IMO. Changes may be made while the IMO is running.
 433          *
 434          *  \param freq: Frequency of IMO operation
 435          *       CY_IMO_FREQ_3MHZ  to set  3   MHz
 436          *       CY_IMO_FREQ_6MHZ  to set  6   MHz
 437          *       CY_IMO_FREQ_12MHZ to set 12   MHz
 438          *       CY_IMO_FREQ_24MHZ to set 24   MHz
 439          *       CY_IMO_FREQ_48MHZ to set 48   MHz
 440          *       CY_IMO_FREQ_62MHZ to set 62.6 MHz
 441          *       CY_IMO_FREQ_74MHZ to set 74.7 MHz (not applicable for PSoC 3)
 442          *       CY_IMO_FREQ_USB   to set 24   MHz (Trimmed for USB operation)
 443          *
 444          * \sideeffect
 445          *  If this function execution results in the CPU clock frequency increasing,
 446          *  then the number of clock cycles the cache will wait before it samples data
 447          *  coming back from the Flash must be adjusted by calling
 448          *  CyFlash_SetWaitCycles() with an appropriate parameter. It can be optionally
 449          *  called if the CPU clock frequency is lowered in order to improve the CPU
 450          *  performance. See CyFlash_SetWaitCycles() description for more information.
 451          *
 452          *  When the USB setting is chosen, the USB clock locking circuit is enabled.
 453          *  Otherwise this circuit is disabled. The USB block must be powered before
 454          *  selecting the USB setting.
 455          *
 456          *******************************************************************************/
 457          void CyIMO_SetFreq(uint8 freq) 
 458          {
 459   1          uint8 currentFreq;
 460   1          uint8 nextFreq;
 461   1      
 462   1          /***************************************************************************
 463   1          * If the IMO frequency is changed,the Trim values must also be set
 464   1          * accordingly.This requires reading the current frequency. If the new
 465   1          * frequency is faster, then set a new trim and then change the frequency,
 466   1          * otherwise change the frequency and then set new trim values.
 467   1          ***************************************************************************/
 468   1      
 469   1          currentFreq = CY_LIB_FASTCLK_IMO_CR_REG & ((uint8)(~CY_LIB_FASTCLK_IMO_CR_RANGE_MASK));
 470   1      
 471   1          /* Check if requested frequency is USB. */
 472   1          nextFreq = (freq == CY_IMO_FREQ_USB) ? CY_IMO_FREQ_24MHZ : freq;
 473   1      
 474   1          switch (currentFreq)
 475   1          {
 476   2          case 0u:
 477   2              currentFreq = CY_IMO_FREQ_12MHZ;
 478   2              break;
 479   2      
 480   2          case 1u:
 481   2              currentFreq = CY_IMO_FREQ_6MHZ;
 482   2              break;
 483   2      
 484   2          case 2u:
 485   2              currentFreq = CY_IMO_FREQ_24MHZ;
 486   2              break;
 487   2      
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 9   

 488   2          case 3u:
 489   2              currentFreq = CY_IMO_FREQ_3MHZ;
 490   2              break;
 491   2      
 492   2          case 4u:
 493   2              currentFreq = CY_IMO_FREQ_48MHZ;
 494   2              break;
 495   2      
 496   2          case 5u:
 497   2              currentFreq = CY_IMO_FREQ_62MHZ;
 498   2              break;
 499   2      
 500   2      #if(CY_PSOC5)
                  case 6u:
                      currentFreq = CY_IMO_FREQ_74MHZ;
                      break;
              #endif  /* (CY_PSOC5) */
 505   2      
 506   2          default:
 507   2              CYASSERT(0u != 0u);
 508   2              break;
 509   2          }
 510   1      
 511   1          if (nextFreq >= currentFreq)
 512   1          {
 513   2              /* Set new trim first */
 514   2              CyIMO_SetTrimValue(freq);
 515   2          }
 516   1      
 517   1          /* Set usbclk_on bit when using CY_IMO_FREQ_USB, if not clear it */
 518   1          switch(freq)
 519   1          {
 520   2          case CY_IMO_FREQ_3MHZ:
 521   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 522   2                  CY_LIB_IMO_3MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 523   2              break;
 524   2      
 525   2          case CY_IMO_FREQ_6MHZ:
 526   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 527   2                  CY_LIB_IMO_6MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 528   2              break;
 529   2      
 530   2          case CY_IMO_FREQ_12MHZ:
 531   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 532   2                  CY_LIB_IMO_12MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 533   2              break;
 534   2      
 535   2          case CY_IMO_FREQ_24MHZ:
 536   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 537   2                  CY_LIB_IMO_24MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 538   2              break;
 539   2      
 540   2          case CY_IMO_FREQ_48MHZ:
 541   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 542   2                  CY_LIB_IMO_48MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 543   2              break;
 544   2      
 545   2          case CY_IMO_FREQ_62MHZ:
 546   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 547   2                  CY_LIB_IMO_62MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 548   2              break;
 549   2      
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 10  

 550   2      #if(CY_PSOC5)
                  case CY_IMO_FREQ_74MHZ:
                      CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
                          CY_LIB_IMO_74MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
                      break;
              #endif  /* (CY_PSOC5) */
 556   2      
 557   2          case CY_IMO_FREQ_USB:
 558   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 559   2                  CY_LIB_IMO_24MHZ_VALUE) | CY_LIB_IMO_USBCLK_ON_SET;
 560   2              break;
 561   2      
 562   2          default:
 563   2              CYASSERT(0u != 0u);
 564   2              break;
 565   2          }
 566   1      
 567   1          /* Tu rn onIMO Doubler, if switching to CY_IMO_FREQ_USB */
 568   1          if (freq == CY_IMO_FREQ_USB)
 569   1          {
 570   2              CyIMO_EnableDoubler();
 571   2          }
 572   1          else
 573   1          {
 574   2              CyIMO_DisableDoubler();
 575   2          }
 576   1      
 577   1          if (nextFreq < currentFreq)
 578   1          {
 579   2              /* Set the trim after setting frequency */
 580   2              CyIMO_SetTrimValue(freq);
 581   2          }
 582   1      }
 583          
 584          
 585          /*******************************************************************************
 586          * Function Name: CyIMO_SetSource
 587          ****************************************************************************//**
 588          *
 589          *  Sets the source of the clock output from the IMO block.
 590          *
 591          *  The output from the IMO is by default the IMO itself. Optionally the MHz
 592          *  Crystal or DSI input can be the source of the IMO output instead.
 593          *
 594          *   \param source: CY_IMO_SOURCE_DSI to set the DSI as source.
 595          *           CY_IMO_SOURCE_XTAL to set the MHz as source.
 596          *           CY_IMO_SOURCE_IMO to set the IMO itself.
 597          *
 598          * \sideeffect
 599          *  If this function execution resulted in the CPU clock frequency increasing,
 600          *  then the number of clock cycles the cache will wait before it samples data
 601          *  coming back from the Flash must be adjusted by calling
 602          *  CyFlash_SetWaitCycles() with an appropriate parameter. It can be optionally
 603          *  called if the CPU clock frequency is lowered in order to improve the CPU
 604          *  performance. See CyFlash_SetWaitCycles() description for more information.
 605          *
 606          *******************************************************************************/
 607          void CyIMO_SetSource(uint8 source) 
 608          {
 609   1          switch(source)
 610   1          {
 611   2          case CY_IMO_SOURCE_DSI:
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 11  

 612   2              CY_LIB_CLKDIST_CR_REG     &= ((uint8)(~CY_LIB_CLKDIST_CR_IMO2X));
 613   2              CY_LIB_FASTCLK_IMO_CR_REG |= CY_LIB_FASTCLK_IMO_IMO;
 614   2              break;
 615   2      
 616   2          case CY_IMO_SOURCE_XTAL:
 617   2              CY_LIB_CLKDIST_CR_REG     |= CY_LIB_CLKDIST_CR_IMO2X;
 618   2              CY_LIB_FASTCLK_IMO_CR_REG |= CY_LIB_FASTCLK_IMO_IMO;
 619   2              break;
 620   2      
 621   2          case CY_IMO_SOURCE_IMO:
 622   2              CY_LIB_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_LIB_FASTCLK_IMO_IMO));
 623   2              break;
 624   2      
 625   2          default:
 626   2              /* Incorrect source value */
 627   2              CYASSERT(0u != 0u);
 628   2              break;
 629   2          }
 630   1      }
 631          
 632          
 633          /*******************************************************************************
 634          * Function Name: CyIMO_EnableDoubler
 635          ****************************************************************************//**
 636          *
 637          *  Enables the IMO doubler.  The 2x frequency clock is used to convert a 24 MHz
 638          *  input to a 48 MHz output for use by the USB block.
 639          *
 640          *******************************************************************************/
 641          void CyIMO_EnableDoubler(void) 
 642          {
 643   1          /* Set FASTCLK_IMO_CR_PTR regigster's 4th bit */
 644   1          CY_LIB_FASTCLK_IMO_CR_REG |= CY_LIB_FASTCLK_IMO_DOUBLER;
 645   1      }
 646          
 647          
 648          /*******************************************************************************
 649          * Function Name: CyIMO_DisableDoubler
 650          ****************************************************************************//**
 651          *
 652          *   Disables the IMO doubler.
 653          *
 654          *******************************************************************************/
 655          void CyIMO_DisableDoubler(void) 
 656          {
 657   1          CY_LIB_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_LIB_FASTCLK_IMO_DOUBLER));
 658   1      }
 659          
 660          
 661          /*******************************************************************************
 662          * Function Name: CyMasterClk_SetSource
 663          ****************************************************************************//**
 664          *
 665          *  Sets the source of the master clock.
 666          *
 667          *   \param source: One of the four available Master clock sources.
 668          *     CY_MASTER_SOURCE_IMO
 669          *     CY_MASTER_SOURCE_PLL
 670          *     CY_MASTER_SOURCE_XTAL
 671          *     CY_MASTER_SOURCE_DSI
 672          *
 673          * \sideeffect
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 12  

 674          *  The current source and the new source must both be running and stable before
 675          *  calling this function.
 676          *
 677          *  If this function execution resulted in the CPU clock frequency increasing,
 678          *  then the number of clock cycles the cache will wait before it samples data
 679          *  coming back from the Flash must be adjusted by calling
 680          *  CyFlash_SetWaitCycles() with an appropriate parameter. It can be optionally
 681          *  called if the CPU clock frequency is lowered in order to improve the CPU
 682          *  performance. See CyFlash_SetWaitCycles() description for more information.
 683          *
 684          *******************************************************************************/
 685          void CyMasterClk_SetSource(uint8 source) 
 686          {
 687   1          CY_LIB_CLKDIST_MSTR1_REG = (CY_LIB_CLKDIST_MSTR1_REG & MASTER_CLK_SRC_CLEAR) |
 688   1                                      (source & ((uint8)(~MASTER_CLK_SRC_CLEAR)));
 689   1      }
 690          
 691          
 692          /*******************************************************************************
 693          * Function Name: CyMasterClk_SetDivider
 694          ****************************************************************************//**
 695          *
 696          *  Sets the divider value used to generate Master Clock.
 697          *
 698          *  \param uint8 divider:
 699          *   The valid range is [0-255]. The clock will be divided by this value + 1.
 700          *   For example to divide this parameter by two should be set to 1.
 701          *
 702          * \sideeffect
 703          *  If this function execution resulted in the CPU clock frequency increasing,
 704          *  then the number of clock cycles the cache will wait before it samples data
 705          *  coming back from the Flash must be adjusted by calling
 706          *  CyFlash_SetWaitCycles() with an appropriate parameter. It can be optionally
 707          *  called if the CPU clock frequency is lowered in order to improve the CPU
 708          *  performance. See CyFlash_SetWaitCycles() description for more information.
 709          *
 710          *  When changing the Master or Bus clock divider value from div-by-n to div-by-1
 711          *  the first clock cycle output after the div-by-1 can be up to 4 ns shorter
 712          *  than the final/expected div-by-1 period.
 713          *
 714          *******************************************************************************/
 715          void CyMasterClk_SetDivider(uint8 divider) 
 716          {
 717   1          CY_LIB_CLKDIST_MSTR0_REG = divider;
 718   1      }
 719          
 720          
 721          /*******************************************************************************
 722          * Function Name: CyBusClk_Internal_SetDivider
 723          ****************************************************************************//**
 724          *
 725          *  The function used by CyBusClk_SetDivider(). For internal use only.
 726          *
 727          *   \param divider: Valid range [0-65535].
 728          *   The clock will be divided by this value + 1.
 729          *   For example, to divide this parameter by two should be set to 1.
 730          *
 731          *******************************************************************************/
 732          static void CyBusClk_Internal_SetDivider(uint16 divider)
 733          {
 734   1          /* Mask bits to enable shadow loads  */
 735   1          CY_LIB_CLKDIST_AMASK_REG &= CY_LIB_CLKDIST_AMASK_MASK;
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 13  

 736   1          CY_LIB_CLKDIST_DMASK_REG  = CY_LIB_CLKDIST_DMASK_MASK;
 737   1      
 738   1          /* Enable mask bits to enable shadow loads */
 739   1          CY_LIB_CLKDIST_BCFG2_REG |= CY_LIB_CLKDIST_BCFG2_MASK;
 740   1      
 741   1          /* Update Shadow Divider Value Register with new divider */
 742   1          CY_LIB_CLKDIST_WRK_LSB_REG = LO8(divider);
 743   1          CY_LIB_CLKDIST_WRK_MSB_REG = HI8(divider);
 744   1      
 745   1      
 746   1          /***************************************************************************
 747   1          * Copy shadow value defined in Shadow Divider Value Register
 748   1          * (CY_LIB_CLKDIST_WRK_LSB_REG and CY_LIB_CLKDIST_WRK_MSB_REG) to all
 749   1          * dividers selected in Analog and Digital Clock Mask Registers
 750   1          * (CY_LIB_CLKDIST_AMASK_REG and CY_LIB_CLKDIST_DMASK_REG).
 751   1          ***************************************************************************/
 752   1          CY_LIB_CLKDIST_LD_REG |= CY_LIB_CLKDIST_LD_LOAD;
 753   1      }
 754          
 755          
 756          /*******************************************************************************
 757          * Function Name: CyBusClk_SetDivider
 758          ****************************************************************************//**
 759          *
 760          *  Sets the divider value used to generate the Bus Clock.
 761          *
 762          *  \param divider: Valid range [0-65535]. The clock will be divided by this value + 1.
 763          *  For example, to divide this parameter by two should be set to 1.
 764          *
 765          * \sideeffect
 766          *  If this function execution resulted in the CPU clock frequency increasing,
 767          *  then the number of clock cycles the cache will wait before it samples data
 768          *  coming back from the Flash must be adjusted by calling
 769          *  CyFlash_SetWaitCycles() with an appropriate parameter. It can be optionally
 770          *  called if the CPU clock frequency is lowered in order to improve the CPU
 771          *  performance. See CyFlash_SetWaitCycles() description for more information.
 772          *
 773          *******************************************************************************/
 774          void CyBusClk_SetDivider(uint16 divider) 
 775          {
 776   1          uint8  masterClkDiv;
 777   1          uint16 busClkDiv;
 778   1          uint8 interruptState;
 779   1      
 780   1          interruptState = CyEnterCriticalSection();
 781   1      
 782   1          /* Work around to set bus clock divider value */
 783   1          busClkDiv = (uint16)((uint16)CY_LIB_CLKDIST_BCFG_MSB_REG << 8u);
 784   1          busClkDiv |= CY_LIB_CLKDIST_BCFG_LSB_REG;
 785   1      
 786   1          if ((divider == 0u) || (busClkDiv == 0u))
 787   1          {
 788   2              /* Save away master clock divider value */
 789   2              masterClkDiv = CY_LIB_CLKDIST_MSTR0_REG;
 790   2      
 791   2              if (masterClkDiv < CY_LIB_CLKDIST_MASTERCLK_DIV)
 792   2              {
 793   3                  /* Set master clock divider to 7 */
 794   3                  CyMasterClk_SetDivider(CY_LIB_CLKDIST_MASTERCLK_DIV);
 795   3              }
 796   2      
 797   2              if (divider == 0u)
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 14  

 798   2              {
 799   3                  /* Set SSS bit and divider register desired value */
 800   3                  CY_LIB_CLKDIST_BCFG2_REG |= CY_LIB_CLKDIST_BCFG2_SSS;
 801   3                  CyBusClk_Internal_SetDivider(divider);
 802   3              }
 803   2              else
 804   2              {
 805   3                  CyBusClk_Internal_SetDivider(divider);
 806   3                  CY_LIB_CLKDIST_BCFG2_REG &= ((uint8)(~CY_LIB_CLKDIST_BCFG2_SSS));
 807   3              }
 808   2      
 809   2              /* Restore master clock */
 810   2              CyMasterClk_SetDivider(masterClkDiv);
 811   2          }
 812   1          else
 813   1          {
 814   2              CyBusClk_Internal_SetDivider(divider);
 815   2          }
 816   1      
 817   1          CyExitCriticalSection(interruptState);
 818   1      }
 819          
 820          
 821          #if(CY_PSOC3)
 822          
 823              /*******************************************************************************
 824              * Function Name: CyCpuClk_SetDivider
 825              ****************************************************************************//**
 826              *
 827              *  Sets the divider value used to generate the CPU Clock. Only applicable for
 828              *  PSoC 3 parts.
 829              *
 830              *  \param divider: Valid range [0-15]. The clock will be divided by this value + 1.
 831              *  For example, to divide this parameter by two should be set to 1.
 832              *
 833              * \sideeffect
 834              *  If this function execution resulted in the CPU clock frequency increasing,
 835              *  then the number of clock cycles the cache will wait before it samples data
 836              *  coming back from the Flash must be adjusted by calling
 837              *  CyFlash_SetWaitCycles() with an appropriate parameter. It can be optionally
 838              *  called if the CPU clock frequency is lowered in order to improve the CPU
 839              *  performance. See CyFlash_SetWaitCycles() description for more information.
 840              *
 841              *******************************************************************************/
 842              void CyCpuClk_SetDivider(uint8 divider) 
 843              {
 844   1                  CY_LIB_CLKDIST_MSTR1_REG = (CY_LIB_CLKDIST_MSTR1_REG & CY_LIB_CLKDIST_MSTR1_DIV_MASK) |
 845   1                                      ((uint8)(divider << CY_LIB_CLKDIST_DIV_POSITION));
 846   1          }
 847          
 848          #endif /* (CY_PSOC3) */
 849          
 850          
 851          /*******************************************************************************
 852          * Function Name: CyUsbClk_SetSource
 853          ****************************************************************************//**
 854          *
 855          *  Sets the source of the USB clock.
 856          *
 857          *  \param source: One of the four available USB clock sources
 858          *    CY_LIB_USB_CLK_IMO2X     - IMO 2x
 859          *    CY_LIB_USB_CLK_IMO       - IMO
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 15  

 860          *    CY_LIB_USB_CLK_PLL       - PLL
 861          *    CY_LIB_USB_CLK_DSI       - DSI
 862          *
 863          *******************************************************************************/
 864          void CyUsbClk_SetSource(uint8 source) 
 865          {
 866   1          CY_LIB_CLKDIST_UCFG_REG = (CY_LIB_CLKDIST_UCFG_REG & ((uint8)(~CY_LIB_CLKDIST_UCFG_SRC_SEL_MASK))) |
 867   1                              (CY_LIB_CLKDIST_UCFG_SRC_SEL_MASK & source);
 868   1      }
 869          
 870          
 871          /*******************************************************************************
 872          * Function Name: CyILO_Start1K
 873          ****************************************************************************//**
 874          *
 875          *  Enables the ILO 1 KHz oscillator.
 876          *
 877          *  Note The ILO 1 KHz oscillator is always enabled by default, regardless of the
 878          *  selection in the Clock Editor. Therefore, this API is only needed if the
 879          *  oscillator was turned off manually.
 880          *
 881          *******************************************************************************/
 882          void CyILO_Start1K(void) 
 883          {
 884   1          /* Set bit 1 of ILO RS */
 885   1          CY_LIB_SLOWCLK_ILO_CR0_REG |= CY_LIB_SLOWCLK_ILO_CR0_EN_1KHZ;
 886   1      }
 887          
 888          
 889          /*******************************************************************************
 890          * Function Name: CyILO_Stop1K
 891          ****************************************************************************//**
 892          *
 893          *  Disables the ILO 1 KHz oscillator.
 894          *
 895          *  Note The ILO 1 KHz oscillator must be enabled if the Sleep or Hibernate low
 896          *  power mode APIs are expected to be used. For more information, refer to the
 897          *  Power Management section of this document.
 898          *
 899          * \sideeffect
 900          *  PSoC5: Stopping the ILO 1 kHz could break the active WDT functionality.
 901          *
 902          *******************************************************************************/
 903          void CyILO_Stop1K(void) 
 904          {
 905   1          /* Clear bit 1 of ILO RS */
 906   1          CY_LIB_SLOWCLK_ILO_CR0_REG &= ((uint8)(~CY_LIB_SLOWCLK_ILO_CR0_EN_1KHZ));
 907   1      }
 908          
 909          
 910          /*******************************************************************************
 911          * Function Name: CyILO_Start100K
 912          ****************************************************************************//**
 913          *
 914          *  Enables the ILO 100 KHz oscillator.
 915          *
 916          *******************************************************************************/
 917          void CyILO_Start100K(void) 
 918          {
 919   1          CY_LIB_SLOWCLK_ILO_CR0_REG |= CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ;
 920   1      }
 921          
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 16  

 922          
 923          /*******************************************************************************
 924          * Function Name: CyILO_Stop100K
 925          ****************************************************************************//**
 926          *
 927          *  Disables the ILO 100 KHz oscillator.
 928          *
 929          *******************************************************************************/
 930          void CyILO_Stop100K(void) 
 931          {
 932   1          CY_LIB_SLOWCLK_ILO_CR0_REG &= ((uint8)(~CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ));
 933   1      }
 934          
 935          
 936          /*******************************************************************************
 937          * Function Name: CyILO_Enable33K
 938          ****************************************************************************//**
 939          *
 940          *  Enables the ILO 33 KHz divider.
 941          *
 942          *  Note that the 33 KHz clock is generated from the 100 KHz oscillator,
 943          *  so it must also be running in order to generate the 33 KHz output.
 944          *
 945          *******************************************************************************/
 946          void CyILO_Enable33K(void) 
 947          {
 948   1          /* Set bit 5 of ILO RS */
 949   1          CY_LIB_SLOWCLK_ILO_CR0_REG |= CY_LIB_SLOWCLK_ILO_CR0_EN_33KHZ;
 950   1      }
 951          
 952          
 953          /*******************************************************************************
 954          * Function Name: CyILO_Disable33K
 955          ****************************************************************************//**
 956          *
 957          *  Disables the ILO 33 KHz divider.
 958          *
 959          *  Note that the 33 KHz clock is generated from the 100 KHz oscillator, but this
 960          *  API does not disable the 100 KHz clock.
 961          *
 962          *******************************************************************************/
 963          void CyILO_Disable33K(void) 
 964          {
 965   1          CY_LIB_SLOWCLK_ILO_CR0_REG &= ((uint8)(~CY_LIB_SLOWCLK_ILO_CR0_EN_33KHZ));
 966   1      }
 967          
 968          
 969          /*******************************************************************************
 970          * Function Name: CyILO_SetSource
 971          ****************************************************************************//**
 972          *
 973          *  Sets the source of the clock output from the ILO block.
 974          *
 975          *  \param source: One of the three available ILO output sources
 976          *       Value        Define                Source
 977          *       0            CY_ILO_SOURCE_100K    ILO 100 KHz
 978          *       1            CY_ILO_SOURCE_33K     ILO 33 KHz
 979          *       2            CY_ILO_SOURCE_1K      ILO 1 KHz
 980          *
 981          *******************************************************************************/
 982          void CyILO_SetSource(uint8 source) 
 983          {
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 17  

 984   1          CY_LIB_CLKDIST_CR_REG = (CY_LIB_CLKDIST_CR_REG & CY_ILO_SOURCE_BITS_CLEAR) |
 985   1                          (((uint8) (source << 2u)) & ((uint8)(~CY_ILO_SOURCE_BITS_CLEAR)));
 986   1      }
 987          
 988          
 989          /*******************************************************************************
 990          * Function Name: CyILO_SetPowerMode
 991          ****************************************************************************//**
 992          *
 993          * Sets the power mode used by the ILO during power down. Allows for lower power
 994          * down power usage resulting in a slower startup time.
 995          *
 996          * \param mode
 997          * CY_ILO_FAST_START - Faster start-up, internal bias left on when powered down
 998          * CY_ILO_SLOW_START - Slower start-up, internal bias off when powered down
 999          *
1000          * \return Prevous power mode state.
1001          *
1002          *******************************************************************************/
1003          uint8 CyILO_SetPowerMode(uint8 mode) 
1004          {
1005   1          uint8 state;
1006   1      
1007   1          /* Get current state. */
1008   1          state = CY_LIB_SLOWCLK_ILO_CR0_REG;
1009   1      
1010   1          /* Set the oscillator power mode. */
1011   1          if(mode != CY_ILO_FAST_START)
1012   1          {
1013   2              CY_LIB_SLOWCLK_ILO_CR0_REG = (state | CY_ILO_CONTROL_PD_MODE);
1014   2          }
1015   1          else
1016   1          {
1017   2              CY_LIB_SLOWCLK_ILO_CR0_REG = (state & ((uint8)(~CY_ILO_CONTROL_PD_MODE)));
1018   2          }
1019   1      
1020   1          /* Return old mode. */
1021   1          return ((state & CY_ILO_CONTROL_PD_MODE) >> CY_ILO_CONTROL_PD_POSITION);
1022   1      }
1023          
1024          
1025          /*******************************************************************************
1026          * Function Name: CyXTAL_32KHZ_Start
1027          ****************************************************************************//**
1028          *
1029          *  Enables the 32 KHz Crystal Oscillator.
1030          *
1031          *******************************************************************************/
1032          void CyXTAL_32KHZ_Start(void) 
1033          {
1034   1          volatile uint16 i;
1035   1      
1036   1          CY_CLK_XTAL32_TST_REG = CY_CLK_XTAL32_TST_DEFAULT;
1037   1          CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_STARTUP;
1038   1          CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1039   1                                      CY_CLK_XTAL32_CFG_LP_DEFAULT;
1040   1      
1041   1          #if(CY_PSOC3)
1042   1              CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_PDBEN;
1043   1          #endif  /* (CY_PSOC3) */
1044   1      
1045   1          /* Enable operation of 32K Crystal Oscillator */
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 18  

1046   1          CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_EN;
1047   1      
1048   1          for (i = 1000u; i > 0u; i--)
1049   1          {
1050   2              if(0u != (CyXTAL_32KHZ_ReadStatus() & CY_XTAL32K_ANA_STAT))
1051   2              {
1052   3                  /* Ready - switch to high power mode */
1053   3                  (void) CyXTAL_32KHZ_SetPowerMode(0u);
1054   3      
1055   3                  break;
1056   3              }
1057   2              CyDelayUs(1u);
1058   2          }
1059   1      }
1060          
1061          
1062          /*******************************************************************************
1063          * Function Name: CyXTAL_32KHZ_Stop
1064          ****************************************************************************//**
1065          *
1066          *  Disables the 32KHz Crystal Oscillator.
1067          *
1068          *******************************************************************************/
1069          void CyXTAL_32KHZ_Stop(void) 
1070          {
1071   1          CY_CLK_XTAL32_TST_REG  = CY_CLK_XTAL32_TST_DEFAULT;
1072   1          CY_CLK_XTAL32_TR_REG   = CY_CLK_XTAL32_TR_POWERDOWN;
1073   1          CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1074   1                                   CY_CLK_XTAL32_CFG_LP_DEFAULT;
1075   1          CY_CLK_XTAL32_CR_REG &= ((uint8)(~(CY_CLK_XTAL32_CR_EN | CY_CLK_XTAL32_CR_LPM)));
1076   1      
1077   1          #if(CY_PSOC3)
1078   1              CY_CLK_XTAL32_CR_REG &= ((uint8)(~CY_CLK_XTAL32_CR_PDBEN));
1079   1          #endif  /* (CY_PSOC3) */
1080   1      }
1081          
1082          
1083          /*******************************************************************************
1084          * Function Name: CyXTAL_32KHZ_ReadStatus
1085          ****************************************************************************//**
1086          *
1087          *  Returns status of the 32 KHz oscillator.
1088          *
1089          * \return
1090          *  Value     Define                    Source
1091          *  20        CY_XTAL32K_ANA_STAT       Analog measurement
1092          *                                       1: Stable
1093          *                                       0: Not stable
1094          *
1095          *******************************************************************************/
1096          uint8 CyXTAL_32KHZ_ReadStatus(void) 
1097          {
1098   1          return(CY_CLK_XTAL32_CR_REG & CY_XTAL32K_ANA_STAT);
1099   1      }
1100          
1101          
1102          /*******************************************************************************
1103          * Function Name: CyXTAL_32KHZ_SetPowerMode
1104          ****************************************************************************//**
1105          *
1106          *  Sets the power mode for the 32 KHz oscillator used during the sleep mode.
1107          *  Allows for lower power during sleep when there are fewer sources of noise.
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 19  

1108          *  During the active mode the oscillator is always run in the high power mode.
1109          *
1110          *  uint8 mode
1111          *       \param 0: High power mode
1112          *       \param 1: Low power mode during sleep
1113          *
1114          * \return
1115          *  Previous power mode.
1116          *
1117          *******************************************************************************/
1118          uint8 CyXTAL_32KHZ_SetPowerMode(uint8 mode) 
1119          {
1120   1          uint8 state = (0u != (CY_CLK_XTAL32_CR_REG & CY_CLK_XTAL32_CR_LPM)) ? 1u : 0u;
1121   1      
1122   1          CY_CLK_XTAL32_TST_REG = CY_CLK_XTAL32_TST_DEFAULT;
1123   1      
1124   1          if(1u == mode)
1125   1          {
1126   2              /* Low power mode during Sleep */
1127   2              CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_LOW_POWER;
1128   2              CyDelayUs(10u);
1129   2              CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1130   2                                      CY_CLK_XTAL32_CFG_LP_LOWPOWER;
1131   2              CyDelayUs(20u);
1132   2              CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_LPM;
1133   2          }
1134   1          else
1135   1          {
1136   2              /* High power mode */
1137   2              CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_HIGH_POWER;
1138   2              CyDelayUs(10u);
1139   2              CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1140   2                                      CY_CLK_XTAL32_CFG_LP_DEFAULT;
1141   2              CY_CLK_XTAL32_CR_REG &= ((uint8)(~CY_CLK_XTAL32_CR_LPM));
1142   2          }
1143   1      
1144   1          return(state);
1145   1      }
1146          
1147          
1148          /*******************************************************************************
1149          * Function Name: CyXTAL_Start
1150          ****************************************************************************//**
1151          *
1152          *  Enables the megahertz crystal.
1153          *
1154          *  PSoC 3:
1155          *  Waits until the XERR bit is low (no error) for a millisecond or until the
1156          *  number of milliseconds specified by the wait parameter has expired.
1157          *
1158          *   \param wait: Valid range [0-255].
1159          *   This is the timeout value in milliseconds.
1160          *   The appropriate value is crystal specific.
1161          *
1162          * \return
1163          *   CYRET_SUCCESS - Completed successfully
1164          *   CYRET_TIMEOUT - Timeout occurred without detecting a low value on XERR.
1165          *
1166          * Side Effects and Restrictions:
1167          *  If wait is enabled (non-zero wait). Uses the Fast Timewheel to time the wait.
1168          *  Any other use of the Fast Timewheel (FTW) will be stopped during the period
1169          *  of this function and then restored.
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 20  

1170          *
1171          *  Uses the 100KHz ILO.  If not enabled, this function will enable the 100KHz
1172          *  ILO for the period of this function. No changes to the setup of the ILO,
1173          *  Fast Timewheel, Central Timewheel or Once Per Second interrupt may be made
1174          *  by interrupt routines during the period of this function.
1175          *
1176          *  The current operation of the ILO, Central Timewheel and Once Per Second
1177          *  interrupt are maintained during the operation of this function provided the
1178          *  reading of the Power Manager Interrupt Status Register is only done using the
1179          *  CyPmReadStatus() function.
1180          *
1181          *******************************************************************************/
1182          cystatus CyXTAL_Start(uint8 wait) 
1183          {
1184   1          cystatus status = CYRET_SUCCESS;
1185   1          volatile uint8  timeout = wait;
1186   1          volatile uint8 count;
1187   1          uint8 iloEnableState;
1188   1          uint8 pmTwCfg0Tmp;
1189   1          uint8 pmTwCfg2Tmp;
1190   1      
1191   1      
1192   1          /* Enables MHz crystal oscillator circuit  */
1193   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_ENABLE;
1194   1      
1195   1      
1196   1          if(wait > 0u)
1197   1          {
1198   2              /* Save 100 KHz ILO, FTW interval, enable and interrupt enable */
1199   2              iloEnableState = CY_LIB_SLOWCLK_ILO_CR0_REG;
1200   2              pmTwCfg0Tmp = CY_LIB_PM_TW_CFG0_REG;
1201   2              pmTwCfg2Tmp = CY_LIB_PM_TW_CFG2_REG;
1202   2      
1203   2              /* Set 250 us interval */
1204   2              CyPmFtwSetInterval(CY_CLK_XMHZ_FTW_INTERVAL);
1205   2              status = CYRET_TIMEOUT;
1206   2      
1207   2      
1208   2              for( ; timeout > 0u; timeout--)
1209   2              {
1210   3                  /* Read XERR bit to clear it */
1211   3                  (void) CY_CLK_XMHZ_CSR_REG;
1212   3      
1213   3                  /* Wait for 1 millisecond - 4 x 250 us */
1214   3                  for(count = 4u; count > 0u; count--)
1215   3                  {
1216   4                      while(0u == (CY_PM_FTW_INT & CyPmReadStatus(CY_PM_FTW_INT)))
1217   4                      {
1218   5                          /* Wait for FTW interrupt event */
1219   5                      }
1220   4                  }
1221   3      
1222   3      
1223   3                  /*******************************************************************
1224   3                  * High output indicates an oscillator failure.
1225   3                  * Only can be used after a start-up interval (1 ms) is completed.
1226   3                  *******************************************************************/
1227   3                  if(0u == (CY_CLK_XMHZ_CSR_REG & CY_CLK_XMHZ_CSR_XERR))
1228   3                  {
1229   4                      status = CYRET_SUCCESS;
1230   4                      break;
1231   4                  }
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 21  

1232   3              }
1233   2      
1234   2      
1235   2              /* Restore 100 KHz ILO, FTW interval, enable and interrupt enable */
1236   2              if(0u == (iloEnableState & CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ))
1237   2              {
1238   3                  CyILO_Stop100K();
1239   3              }
1240   2              CY_LIB_PM_TW_CFG0_REG = pmTwCfg0Tmp;
1241   2              CY_LIB_PM_TW_CFG2_REG = pmTwCfg2Tmp;
1242   2          }
1243   1      
1244   1          return(status);
1245   1      }
1246          
1247          
1248          /*******************************************************************************
1249          * Function Name: CyXTAL_Stop
1250          ****************************************************************************//**
1251          *
1252          *  Disables the megahertz crystal oscillator.
1253          *
1254          *******************************************************************************/
1255          void CyXTAL_Stop(void) 
1256          {
1257   1          /* Disable oscillator. */
1258   1          FASTCLK_XMHZ_CSR &= ((uint8)(~XMHZ_CONTROL_ENABLE));
1259   1      }
1260          
1261          
1262          /*******************************************************************************
1263          * Function Name: CyXTAL_EnableErrStatus
1264          ****************************************************************************//**
1265          *
1266          *  Enables the generation of the XERR status bit for the megahertz crystal.
1267          *  This function is not available for PSoC5.
1268          *
1269          *******************************************************************************/
1270          void CyXTAL_EnableErrStatus(void) 
1271          {
1272   1          /* If oscillator has insufficient amplitude, XERR bit will be high. */
1273   1          CY_CLK_XMHZ_CSR_REG &= ((uint8)(~CY_CLK_XMHZ_CSR_XFB));
1274   1      }
1275          
1276          
1277          /*******************************************************************************
1278          * Function Name: CyXTAL_DisableErrStatus
1279          ****************************************************************************//**
1280          *
1281          *  Disables the generation of the XERR status bit for the megahertz crystal.
1282          *  This function is not available for PSoC5.
1283          *
1284          *******************************************************************************/
1285          void CyXTAL_DisableErrStatus(void) 
1286          {
1287   1          /* If oscillator has insufficient amplitude, XERR bit will be high. */
1288   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_XFB;
1289   1      }
1290          
1291          
1292          /*******************************************************************************
1293          * Function Name: CyXTAL_ReadStatus
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 22  

1294          ****************************************************************************//**
1295          *
1296          *  Reads the XERR status bit for the megahertz crystal. This status bit is a
1297          *  sticky, clear on read. This function is not available for PSoC5.
1298          *
1299          * \return
1300          *   Status
1301          *    0: No error
1302          *    1: Error
1303          *
1304          *******************************************************************************/
1305          uint8 CyXTAL_ReadStatus(void) 
1306          {
1307   1          /***************************************************************************
1308   1          * High output indicates an oscillator failure. Only use this after a start-up
1309   1          * interval is completed. This can be used for the status and failure recovery.
1310   1          ***************************************************************************/
1311   1          return((0u != (CY_CLK_XMHZ_CSR_REG & CY_CLK_XMHZ_CSR_XERR)) ? 1u : 0u);
1312   1      }
1313          
1314          
1315          /*******************************************************************************
1316          * Function Name: CyXTAL_EnableFaultRecovery
1317          ****************************************************************************//**
1318          *
1319          *  Enables the fault recovery circuit which will switch to the IMO in the case
1320          *  of a fault in the megahertz crystal circuit. The crystal must be up and
1321          *  running with the XERR bit at 0, before calling this function to prevent
1322          *  an immediate fault switchover. This function is not available for PSoC5.
1323          *
1324          *******************************************************************************/
1325          void CyXTAL_EnableFaultRecovery(void) 
1326          {
1327   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_XPROT;
1328   1      }
1329          
1330          
1331          /*******************************************************************************
1332          * Function Name: CyXTAL_DisableFaultRecovery
1333          ****************************************************************************//**
1334          *
1335          *  Disables the fault recovery circuit which will switch to the IMO in the case
1336          *  of a fault in the megahertz crystal circuit. This function is not available
1337          *  for PSoC5.
1338          *
1339          *******************************************************************************/
1340          void CyXTAL_DisableFaultRecovery(void) 
1341          {
1342   1          CY_CLK_XMHZ_CSR_REG &= ((uint8)(~CY_CLK_XMHZ_CSR_XPROT));
1343   1      }
1344          
1345          
1346          /*******************************************************************************
1347          * Function Name: CyXTAL_SetStartup
1348          ****************************************************************************//**
1349          *
1350          *  Sets the startup settings for the crystal. The logic model outputs a
1351          *  frequency (setting + 4) MHz when enabled.
1352          *
1353          *  This is artificial as the actual frequency is determined by an attached
1354          *  external crystal.
1355          *
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 23  

1356          *  \param setting: Valid range [0-31].
1357          *   The value is dependent on the frequency and quality of the crystal being
1358          *   used. Refer to the device TRM and datasheet for more information.
1359          *
1360          *******************************************************************************/
1361          void CyXTAL_SetStartup(uint8 setting) 
1362          {
1363   1          CY_CLK_XMHZ_CFG0_REG = (CY_CLK_XMHZ_CFG0_REG & ((uint8)(~CY_CLK_XMHZ_CFG0_XCFG_MASK))) |
1364   1                                 (setting & CY_CLK_XMHZ_CFG0_XCFG_MASK);
1365   1      }
1366          
1367          
1368          
1369          /*******************************************************************************
1370          * Function Name: CyXTAL_SetFbVoltage
1371          ****************************************************************************//**
1372          *
1373          *  Sets the feedback reference voltage to use for the crystal circuit.
1374          *  This function is only available for PSoC3 and PSoC 5LP.
1375          *
1376          *  \param setting: Valid range [0-15].
1377          *  Refer to the device TRM and datasheet for more information.
1378          *
1379          *******************************************************************************/
1380          void CyXTAL_SetFbVoltage(uint8 setting) 
1381          {
1382   1          CY_CLK_XMHZ_CFG1_REG = ((CY_CLK_XMHZ_CFG1_REG & ((uint8)(~CY_CLK_XMHZ_CFG1_VREF_FB_MASK))) |
1383   1                                  (setting & CY_CLK_XMHZ_CFG1_VREF_FB_MASK));
1384   1      }
1385          
1386          
1387          /*******************************************************************************
1388          * Function Name: CyXTAL_SetWdVoltage
1389          ****************************************************************************//**
1390          *
1391          *  Sets the reference voltage used by the watchdog to detect a failure in the
1392          *  crystal circuit. This function is only available for PSoC3 and PSoC 5LP.
1393          *
1394          *  \param setting: Valid range [0-7].
1395          *  Refer to the device TRM and datasheet for more information.
1396          *
1397          *******************************************************************************/
1398          void CyXTAL_SetWdVoltage(uint8 setting) 
1399          {
1400   1          CY_CLK_XMHZ_CFG1_REG = ((CY_CLK_XMHZ_CFG1_REG & ((uint8)(~CY_CLK_XMHZ_CFG1_VREF_WD_MASK))) |
1401   1                                  (((uint8)(setting << 4u)) & CY_CLK_XMHZ_CFG1_VREF_WD_MASK));
1402   1      }
1403          
1404          
1405          /*******************************************************************************
1406          * Function Name: CyHalt
1407          ****************************************************************************//**
1408          *
1409          *  Halts the CPU.
1410          *
1411          *  \param uint8 reason: Value to be used during debugging.
1412          *
1413          *******************************************************************************/
1414          void CyHalt(uint8 reason) CYREENTRANT
1415          {
1416   1          if(0u != reason)
1417   1          {
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 24  

1418   2              /* To remove unreferenced local variable warning */
1419   2          }
1420   1      
1421   1          #if defined (__ARMCC_VERSION)
                      __breakpoint(0x0);
                  #elif defined(__GNUC__) || defined (__ICCARM__)
                      __asm("    bkpt    1");
                  #elif defined(__C51__)
1426   1              CYDEV_HALT_CPU;
1427   1          #endif  /* (__ARMCC_VERSION) */
1428   1      }
1429          
1430          
1431          /*******************************************************************************
1432          * Function Name: CySoftwareReset
1433          ****************************************************************************//**
1434          *
1435          *  Forces a device software reset.
1436          *
1437          *******************************************************************************/
1438          void CySoftwareReset(void) 
1439          {
1440   1          CY_LIB_RESET_CR2_REG |= CY_LIB_RESET_CR2_RESET;
1441   1      }
1442          
1443          
1444          /*******************************************************************************
1445          * Function Name: CyDelay
1446          ****************************************************************************//**
1447          *
1448          *  Blocks for milliseconds.
1449          *
1450          *  Note:
1451          *  CyDelay has been implemented with the instruction cache assumed enabled. When
1452          *  the instruction cache is disabled on PSoC5, CyDelay will be two times larger.
1453          *  For example, with instruction cache disabled CyDelay(100) would result in
1454          *  about 200 ms delay instead of 100 ms.
1455          *
1456          *  \param milliseconds: number of milliseconds to delay.
1457          *
1458          *******************************************************************************/
1459          void CyDelay(uint32 milliseconds) CYREENTRANT
1460          {
1461   1          while (milliseconds > 32768u)
1462   1          {
1463   2              /***********************************************************************
1464   2              * This loop prevents overflow.At 100MHz, milliseconds * delay_freq_khz
1465   2              * overflows at about 42 seconds.
1466   2              ***********************************************************************/
1467   2              CyDelayCycles(cydelay_32k_ms);
1468   2              milliseconds = ((uint32)(milliseconds - 32768u));
1469   2          }
1470   1      
1471   1          CyDelayCycles(milliseconds * cydelay_freq_khz);
1472   1      }
1473          
1474          
1475          #if(!CY_PSOC3)
              
                  /* For PSoC3 devices function is defined in CyBootAsmKeil.a51 file */
              
                  /*******************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 25  

                  * Function Name: CyDelayUs
                  ****************************************************************************//**
                  *
                  *  Blocks for microseconds.
                  *
                  *  Note:
                  *   CyDelay has been implemented with the instruction cache assumed enabled.
                  *   When instruction cache is disabled on PSoC5, CyDelayUs will be two times
                  *   larger. Ex: With instruction cache disabled CyDelayUs(100) would result
                  *   in about 200us delay instead of 100us.
                  *
                  *  \param uint16 microseconds: number of microseconds to delay.
                  *
                  * \sideeffect
                  *  CyDelayUS has been implemented with the instruction cache assumed enabled.
                  *  When the instruction cache is disabled on PSoC 5, CyDelayUs will be two times
                  *  larger. For example, with the instruction cache disabled CyDelayUs(100) would
                  *  result in about 200 us delay instead of 100 us.
                  *
                  *  If the bus clock frequency is a small non-integer number, the actual delay
                  *  can be up to twice as long as the nominal value. The actual delay cannot be
                  *  shorter than the nominal one.
                  *******************************************************************************/
                  void CyDelayUs(uint16 microseconds) CYREENTRANT
                  {
                      CyDelayCycles((uint32)microseconds * cydelay_freq_mhz);
                  }
              
              #endif  /* (!CY_PSOC3) */
1509          
1510          
1511          /*******************************************************************************
1512          * Function Name: CyDelayFreq
1513          ****************************************************************************//**
1514          *
1515          *  Sets the clock frequency for CyDelay.
1516          *
1517          *  \param freq: The frequency of the bus clock in Hertz.
1518          *
1519          *******************************************************************************/
1520          void CyDelayFreq(uint32 freq) CYREENTRANT
1521          {
1522   1          if (freq != 0u)
1523   1          {
1524   2              cydelay_freq_hz = freq;
1525   2          }
1526   1          else
1527   1          {
1528   2              cydelay_freq_hz = BCLK__BUS_CLK__HZ;
1529   2          }
1530   1      
1531   1          cydelay_freq_mhz = (uint8)((cydelay_freq_hz + 999999u) / 1000000u);
1532   1          cydelay_freq_khz = (cydelay_freq_hz + 999u) / 1000u;
1533   1          cydelay_32k_ms   = 32768u * cydelay_freq_khz;
1534   1      }
1535          
1536          
1537          /*******************************************************************************
1538          * Function Name: CyWdtStart
1539          ****************************************************************************//**
1540          *
1541          *  Enables the watchdog timer.
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 26  

1542          *
1543          *  The timer is configured for the specified count interval, the central
1544          *  timewheel is cleared, the setting for the low power mode is configured and
1545          *  the watchdog timer is enabled.
1546          *
1547          *  Once enabled the watchdog cannot be disabled. The watchdog counts each time
1548          *  the Central Time Wheel (CTW) reaches the period specified. The watchdog must
1549          *  be cleared using the CyWdtClear() function before three ticks of the watchdog
1550          *  timer occur. The CTW is free running, so this will occur after between 2 and
1551          *  3 timer periods elapse.
1552          *
1553          *  PSoC5: The watchdog timer should not be used during sleep modes. Since the
1554          *  WDT cannot be disabled after it is enabled, the WDT timeout period can be
1555          *  set to be greater than the sleep wakeup period, then feed the dog on each
1556          *  wakeup from Sleep.
1557          *
1558          *  \param ticks: One of the four available timer periods. Once WDT enabled, the
1559             interval cannot be changed.
1560          *         CYWDT_2_TICKS     -     4 - 6     ms
1561          *         CYWDT_16_TICKS    -    32 - 48    ms
1562          *         CYWDT_128_TICKS   -   256 - 384   ms
1563          *         CYWDT_1024_TICKS  - 2.048 - 3.072 s
1564          *
1565          *  \param lpMode: Low power mode configuration. This parameter is ignored for PSoC 5.
1566          *          The WDT always acts as if CYWDT_LPMODE_NOCHANGE is passed.
1567          *
1568          *          CYWDT_LPMODE_NOCHANGE - No Change
1569          *          CYWDT_LPMODE_MAXINTER - Switch to longest timer mode during low power
1570          *                                 mode
1571          *          CYWDT_LPMODE_DISABLED - Disable WDT during low power mode
1572          *
1573          * \sideeffect
1574          *  PSoC5: The ILO 1 KHz must be enabled for proper WDT operation. Stopping the
1575          *  ILO 1 kHz could break the active WDT functionality.
1576          *
1577          *******************************************************************************/
1578          void CyWdtStart(uint8 ticks, uint8 lpMode) 
1579          {
1580   1          /* Set WDT interval */
1581   1          CY_WDT_CFG_REG = (CY_WDT_CFG_REG & ((uint8)(~CY_WDT_CFG_INTERVAL_MASK))) | (ticks & CY_WDT_CFG_INTERVA
             -L_MASK);
1582   1      
1583   1          /* Reset CTW to ensure that first watchdog period is full */
1584   1          CY_WDT_CFG_REG |= CY_WDT_CFG_CTW_RESET;
1585   1          CY_WDT_CFG_REG &= ((uint8)(~CY_WDT_CFG_CTW_RESET));
1586   1      
1587   1          /* Setting low power mode */
1588   1          CY_WDT_CFG_REG = (((uint8)(lpMode << CY_WDT_CFG_LPMODE_SHIFT)) & CY_WDT_CFG_LPMODE_MASK) |
1589   1                             (CY_WDT_CFG_REG & ((uint8)(~CY_WDT_CFG_LPMODE_MASK)));
1590   1      
1591   1          /* Enables watchdog reset */
1592   1          CY_WDT_CFG_REG |= CY_WDT_CFG_WDR_EN;
1593   1      }
1594          
1595          
1596          /*******************************************************************************
1597          * Function Name: CyWdtClear
1598          ****************************************************************************//**
1599          *
1600          *  Clears (feeds) the watchdog timer.
1601          *
1602          *******************************************************************************/
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 27  

1603          void CyWdtClear(void) 
1604          {
1605   1          CY_WDT_CR_REG = CY_WDT_CR_FEED;
1606   1      }
1607          
1608          
1609          
1610          /*******************************************************************************
1611          * Function Name: CyVdLvDigitEnable
1612          ****************************************************************************//**
1613          *
1614          *  Sets the voltage trip level, enables the output of the digital low-voltage
1615          *  monitor, and optionally configures voltage monitor to reset device upon the
1616          *  low-voltage event instead of generating an interrupt.
1617          *
1618          *  Note The associated interrupt enable/disable state is not changed by the
1619          *  function. The Interrupt component API should be used to register the
1620          *  interrupt service routine and to enable/disable associated interrupt.
1621          *
1622          *  \param reset: Enables device reset on digital low-voltage event:
1623          *   Zero - Interrupt on digital low-voltage event
1624          *   Non-zero - Reset on digital low-voltage event
1625          *
1626          *  \param threshold: Sets the trip point of the digital low-voltage monitoring circuit
1627          *   in steps of approximately 250 mV in range from 1.70 V (0x00) to 5.45 V
1628          *   (0x0F). For example, the trip point is set to 1.80 V when the threshold
1629          *   parameter value is 0x04. Refer to the device TRM for the exact trip voltage
1630          *   values.
1631          *
1632          * Side Effects and Restrictions:
1633          *  The voltage resets are momentary. When a voltage reset (analog/digital
1634          *  low-voltage and analog high-voltage) occurs, the RESET_CR1 and RESET_CR3
1635          *  registers are restored to their default values. This means that the voltage
1636          *  monitor circuit is no longer enabled and the device exits reset. If the
1637          *  supply is below the trip level and firmware enables the voltage reset
1638          *  functionality, the device will reset again. This will continue as long as the
1639          *  supply is below the trip level or as long as the user enables the reset
1640          *  functionality of the voltage monitor functionality.
1641          *
1642          *  When any voltage reset occurs, the RESET_SR0 and RESET_SR2 status registers
1643          *  are cleared. This means that analog low-voltage, digital low-voltage and
1644          *  analog high-voltage status bits are not persistent across any voltage reset.
1645          *
1646          *******************************************************************************/
1647          void CyVdLvDigitEnable(uint8 reset, uint8 threshold) 
1648          {
1649   1          uint32 intRegTmp;
1650   1          uint8 interruptState;
1651   1      
1652   1          interruptState = CyEnterCriticalSection();
1653   1      
1654   1          /* Store interrupt enable state */
1655   1          intRegTmp = CY_INT_ENABLE_REG & CY_VD_INT_MASK;
1656   1      
1657   1          /* Disable VD interrupt (write 1) to protect against glitches */
1658   1          CY_INT_CLEAR_REG = CY_VD_INT_MASK;
1659   1      
1660   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESD_EN));
1661   1      
1662   1          CY_VD_LVI_TRIP_REG = (threshold & CY_VD_LVI_TRIP_LVID_MASK) |
1663   1                                  (CY_VD_LVI_TRIP_REG & ((uint8)(~CY_VD_LVI_TRIP_LVID_MASK)));
1664   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_LVID_EN;
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 28  

1665   1      
1666   1          /* Timeout to eliminate glitches on LVI/HVI when enabling (ID # 127412) */
1667   1          CyDelayUs(1u);
1668   1      
1669   1          (void) CyVdStickyStatus(CY_VD_LVID);
1670   1      
1671   1          if(0u != reset)
1672   1          {
1673   2              CY_VD_PRES_CONTROL_REG |= CY_VD_PRESD_EN;
1674   2          }
1675   1          else
1676   1          {
1677   2              CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESD_EN));
1678   2          }
1679   1      
1680   1          /* Clear pending interrupt */
1681   1          CY_INT_CLR_PEND_REG = CY_VD_INT_MASK;
1682   1      
1683   1          /* Restore interrupt enable state */
1684   1          CY_INT_ENABLE_REG = intRegTmp;
1685   1      
1686   1          CyExitCriticalSection(interruptState);
1687   1      }
1688          
1689          
1690          /*******************************************************************************
1691          * Function Name: CyVdLvAnalogEnable
1692          ****************************************************************************//**
1693          *
1694          *  Sets the voltage trip level, enables the output of the analog low-voltage
1695          *  monitor, and optionally configures voltage monitor to reset device upon the
1696          *  low-voltage event instead of generating an interrupt.
1697          *
1698          *  Note The associated interrupt enable/disable state is not changed by the
1699          *  function. The Interrupt component API should be used to register the
1700          *  interrupt service routine and to enable/disable associated interrupt.
1701          *
1702          *  \param reset: Enables device reset on analog low-voltage event:
1703          *  Zero - Interrupt on analog low-voltage event
1704          *  Non-zero - Reset on analog low-voltage event
1705          *
1706          *  \param threshold: Sets the trip point of the analog low-voltage monitoring circuit
1707          *  in steps of approximately 250 mV in range from 1.70 V (0x00) to 5.45 V
1708          *  (0x0F). For example, the trip point is set to 1.80 V when value of the
1709          *  threshold parameter is 0x04. Please refer to the device TRM for the exact
1710          *  trip voltage values.
1711          *
1712          * Side Effects and Restrictions:
1713          *  The voltage resets are momentary. When a voltage reset (analog/digital
1714          *  low-voltage and analog high-voltage) occurs, the RESET_CR1 and RESET_CR3
1715          *  registers are restored to their default values. This means that the voltage
1716          *  monitor circuit is no longer enabled and the device exits reset. If the
1717          *  supply is below the trip level and firmware enables the voltage reset
1718          *  functionality, the device will reset again. This will continue as long as
1719          *  the supply is below the trip level or as long as the user enables the reset
1720          *  functionality of the voltage monitor functionality.
1721          *
1722          *  When any voltage reset occurs, the RESET_SR0 and RESET_SR2 status registers
1723          *  are cleared. This means that analog low-voltage, digital low-voltage and
1724          *  analog high-voltage status bits are not persistent across any voltage reset.
1725          *
1726          *******************************************************************************/
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 29  

1727          void CyVdLvAnalogEnable(uint8 reset, uint8 threshold) 
1728          {
1729   1          uint32 intRegTmp;
1730   1          uint8 interruptState;
1731   1      
1732   1          interruptState = CyEnterCriticalSection();
1733   1      
1734   1          /* Store interrupt enable state */
1735   1          intRegTmp = CY_INT_ENABLE_REG & CY_VD_INT_MASK;
1736   1      
1737   1          /* Disable VD interrupt (write 1) to protect against glitches */
1738   1          CY_INT_CLEAR_REG = CY_VD_INT_MASK;
1739   1      
1740   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
1741   1      
1742   1          CY_VD_LVI_TRIP_REG = ((uint8)(threshold << 4u)) | (CY_VD_LVI_TRIP_REG & 0x0Fu);
1743   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_LVIA_EN;
1744   1      
1745   1          /* Timeout to eliminate glitches on LVI/HVI when enabling (ID # 127412) */
1746   1          CyDelayUs(1u);
1747   1      
1748   1          (void) CyVdStickyStatus(CY_VD_LVIA);
1749   1      
1750   1          if(0u != reset)
1751   1          {
1752   2              CY_VD_PRES_CONTROL_REG |= CY_VD_PRESA_EN;
1753   2          }
1754   1          else
1755   1          {
1756   2              CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
1757   2          }
1758   1      
1759   1          /* Clear pending interrupt */
1760   1          CY_INT_CLR_PEND_REG = CY_VD_INT_MASK;
1761   1      
1762   1          /* Restore interrupt enable state */
1763   1          CY_INT_ENABLE_REG = intRegTmp;
1764   1      
1765   1          CyExitCriticalSection(interruptState);
1766   1      }
1767          
1768          
1769          /*******************************************************************************
1770          * Function Name: CyVdLvDigitDisable
1771          ****************************************************************************//**
1772          *
1773          *  Disables the digital low-voltage monitor, turns off device reset upon the
1774          *  digital low-voltage event, and clears the associated persistent status bit.
1775          *
1776          *  Note The associated interrupt enable/disable state is not changed by the
1777          *  function. The pending interrupt status is not cleared. The Interrupt
1778          *  component API should be used to manipulate with the associated interrupts.
1779          *
1780          *******************************************************************************/
1781          void CyVdLvDigitDisable(void) 
1782          {
1783   1          CY_VD_LVI_HVI_CONTROL_REG &= ((uint8)(~CY_VD_LVID_EN));
1784   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESD_EN));
1785   1          (void) CyVdStickyStatus(CY_VD_LVID);
1786   1      
1787   1          while(0u != (CyVdStickyStatus(CY_VD_LVID) & CY_VD_LVID))
1788   1          {
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 30  

1789   2      
1790   2          }
1791   1      }
1792          
1793          
1794          /*******************************************************************************
1795          * Function Name: CyVdLvAnalogDisable
1796          ****************************************************************************//**
1797          *
1798          *  Disables the analog low-voltage monitor, turns off device reset upon the
1799          *  analog low-voltage event, and clears the associated persistent status bit.
1800          *
1801          *  Note The associated interrupt enable/disable state is not changed by the
1802          *  function. The pending interrupt status is not cleared. The Interrupt
1803          *  component API should be used to manipulate with the associated interrupts.
1804          *
1805          *******************************************************************************/
1806          void CyVdLvAnalogDisable(void) 
1807          {
1808   1          CY_VD_LVI_HVI_CONTROL_REG &= ((uint8)(~CY_VD_LVIA_EN));
1809   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
1810   1          while(0u != (CyVdStickyStatus(CY_VD_LVIA) & CY_VD_LVIA))
1811   1          {
1812   2      
1813   2          }
1814   1      }
1815          
1816          
1817          /*******************************************************************************
1818          * Function Name: CyVdHvAnalogEnable
1819          ****************************************************************************//**
1820          *
1821          *  Enables the output of the analog high-voltage monitor and sets 5.75 V
1822          *  threshold detection for Vdda.
1823          *
1824          *  Note The associated interrupt enable/disable state is not changed by the
1825          *  function. The Interrupt component API should be used to register the
1826          *  interrupt service routine and to enable/disable associated interrupt.
1827          *
1828          *******************************************************************************/
1829          void CyVdHvAnalogEnable(void) 
1830          {
1831   1          uint32 intRegTmp;
1832   1          uint8 interruptState;
1833   1      
1834   1          interruptState = CyEnterCriticalSection();
1835   1      
1836   1          /* Store interrupt enable state */
1837   1          intRegTmp = CY_INT_ENABLE_REG & CY_VD_INT_MASK;
1838   1      
1839   1          /* Disable VD interrupt (write 1) to protect against glitches */
1840   1          CY_INT_CLEAR_REG = CY_VD_INT_MASK;
1841   1      
1842   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
1843   1      
1844   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_HVIA_EN;
1845   1      
1846   1          /* Timeout to eliminate glitches on the LVI/HVI when enabling (ID # 127412)  */
1847   1          CyDelayUs(1u);
1848   1      
1849   1          (void) CyVdStickyStatus(CY_VD_HVIA);
1850   1      
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 31  

1851   1          /* Clear pending interrupt */
1852   1          CY_INT_CLR_PEND_REG = CY_VD_INT_MASK;
1853   1      
1854   1          /* Restore interrupt enable state */
1855   1          CY_INT_ENABLE_REG = intRegTmp;
1856   1      
1857   1          CyExitCriticalSection(interruptState);
1858   1      }
1859          
1860          
1861          /*******************************************************************************
1862          * Function Name: CyVdHvAnalogDisable
1863          ****************************************************************************//**
1864          *
1865          *  Disables the analog high-voltage monitor and clears the associated persistent
1866          *  status bit.
1867          *
1868          *  Note The associated interrupt enable/disable state is not changed by the
1869          *  function. The pending interrupt status is not cleared. The Interrupt
1870          *  component API should be used to manipulate with the associated interrupts.
1871          *
1872          *******************************************************************************/
1873          void CyVdHvAnalogDisable(void) 
1874          {
1875   1          CY_VD_LVI_HVI_CONTROL_REG &= ((uint8)(~CY_VD_HVIA_EN));
1876   1          while(0u != (CyVdStickyStatus(CY_VD_HVIA) & CY_VD_HVIA))
1877   1          {
1878   2      
1879   2          }
1880   1      }
1881          
1882          
1883          /*******************************************************************************
1884          * Function Name: CyVdStickyStatus
1885          ****************************************************************************//**
1886          *
1887          *  Reads and clears the voltage detection status bits in the RESET_SR0 register.
1888          *  The bits are set to 1 by the voltage monitor circuit when the supply is
1889          *  outside the detector trip point. They stay set to 1 until they are read or
1890          *  a POR / LVI / PRES reset occurs. This function uses a shadow register, so
1891          *  only the bits passed in the parameter will be cleared in the shadow register.
1892          *
1893          *  \param mask: Bits in the RESET_SR0 shadow register to clear and return.
1894          *   Define                  Definition
1895          *   CY_VD_LVID            Persistent status of digital LVI.
1896          *   CY_VD_LVIA            Persistent status of analog LVI.
1897          *   CY_VD_HVIA            Persistent status of analog HVI.
1898          *
1899          * \return
1900          *  Status. Same enumerated bit values as used for the mask parameter. A zero is
1901          *  returned for bits not used in the mask parameter.
1902          *
1903          * Side Effects and Restrictions:
1904          *  When an LVI reset occurs, the RESET_SR0 status registers are cleared. This
1905          *  means that the voltage detection status bits are not persistent across an LVI
1906          *  reset and cannot be used to determine a reset source.
1907          *
1908          *******************************************************************************/
1909          uint8 CyVdStickyStatus(uint8 mask) 
1910          {
1911   1          static uint8 interruptStatus;
1912   1          uint8 interruptState;
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 32  

1913   1          uint8 tmpStatus;
1914   1      
1915   1          interruptState = CyEnterCriticalSection();
1916   1      
1917   1          interruptStatus |= CY_VD_PERSISTENT_STATUS_REG;
1918   1          tmpStatus = interruptStatus & (uint8)(CY_VD_LVID | CY_VD_LVIA | CY_VD_HVIA);
1919   1          interruptStatus &= ((uint8)(~mask));
1920   1      
1921   1          CyExitCriticalSection(interruptState);
1922   1      
1923   1          return(tmpStatus);
1924   1      }
1925          
1926          
1927          /*******************************************************************************
1928          * Function Name: CyVdRealTimeStatus
1929          ****************************************************************************//**
1930          *
1931          *  Reads the real-time voltage detection status bits in the RESET_SR2 register.
1932          *  The bits are set to 1 by the voltage monitor circuit when the supply is
1933          *  outside the detector’s trip point, and set to 0 when the supply is inside the
1934          *  trip point.
1935          *
1936          * \return
1937          *  Status of the LVID, LVIA, and HVIA bits in the RESET_SR2 register.
1938          *   Define                  Definition
1939          *   CY_VD_LVID            Real-time status of digital LVI.
1940          *   CY_VD_LVIA            Real-time status of analog LVI.
1941          *   CY_VD_HVIA            Real-time status of analog HVI.
1942          *
1943          * Side Effects and Restrictions:
1944          *  When an LVI reset occurs, the RESET_SR2 status registers are cleared. This
1945          *  means that the voltage detection status bits are not persistent across an LVI
1946          *  reset and cannot be used to determine a reset source.
1947          *
1948          *******************************************************************************/
1949          uint8 CyVdRealTimeStatus(void) 
1950          {
1951   1          uint8 interruptState;
1952   1          uint8 vdFlagsState;
1953   1      
1954   1          interruptState = CyEnterCriticalSection();
1955   1          vdFlagsState = CY_VD_RT_STATUS_REG & (CY_VD_LVID | CY_VD_LVIA | CY_VD_HVIA);
1956   1          CyExitCriticalSection(interruptState);
1957   1      
1958   1          return(vdFlagsState);
1959   1      }
1960          
1961          
1962          /*******************************************************************************
1963          * Function Name: CyDisableInts
1964          ****************************************************************************//**
1965          *
1966          *  Disables the interrupt enable for each interrupt.
1967          *
1968          * \return
1969          *  32 bit mask of previously enabled interrupts.
1970          *
1971          *******************************************************************************/
1972          uint32 CyDisableInts(void) 
1973          {
1974   1          uint32 intState;
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 33  

1975   1          uint8 interruptState;
1976   1      
1977   1          interruptState = CyEnterCriticalSection();
1978   1      
1979   1          #if(CY_PSOC3)
1980   1      
1981   1              /* Get the current interrupt state. */
1982   1              intState  = ((uint32) CY_GET_REG8(CY_INT_CLR_EN0_PTR));
1983   1              intState |= ((uint32) (((uint32) CY_GET_REG8(CY_INT_CLR_EN1_PTR)) << 8u));
1984   1              intState |= ((uint32) (((uint32) CY_GET_REG8(CY_INT_CLR_EN2_PTR)) << 16u));
1985   1              intState |= ((uint32) (((uint32) CY_GET_REG8(CY_INT_CLR_EN3_PTR)) << 24u));
1986   1      
1987   1      
1988   1              /* Disable all of the interrupts. */
1989   1              CY_SET_REG8(CY_INT_CLR_EN0_PTR, 0xFFu);
1990   1              CY_SET_REG8(CY_INT_CLR_EN1_PTR, 0xFFu);
1991   1              CY_SET_REG8(CY_INT_CLR_EN2_PTR, 0xFFu);
1992   1              CY_SET_REG8(CY_INT_CLR_EN3_PTR, 0xFFu);
1993   1      
1994   1          #else
              
                      /* Get the current interrupt state. */
                      intState = CY_GET_REG32(CY_INT_CLEAR_PTR);
              
                      /* Disable all of the interrupts. */
                      CY_SET_REG32(CY_INT_CLEAR_PTR, 0xFFFFFFFFu);
              
                  #endif /* (CY_PSOC3) */
2003   1      
2004   1          CyExitCriticalSection(interruptState);
2005   1      
2006   1          return (intState);
2007   1      }
2008          
2009          
2010          /*******************************************************************************
2011          * Function Name: CyEnableInts
2012          ****************************************************************************//**
2013          *
2014          *  Enables interrupts to a given state.
2015          *
2016          *  \param uint32 mask: 32 bit mask of interrupts to enable.
2017          *
2018          *******************************************************************************/
2019          void CyEnableInts(uint32 mask) 
2020          {
2021   1      
2022   1          uint8 interruptState;
2023   1      
2024   1          interruptState = CyEnterCriticalSection();
2025   1      
2026   1          #if(CY_PSOC3)
2027   1      
2028   1              /* Set interrupts as enabled. */
2029   1              CY_SET_REG8(CY_INT_SET_EN3_PTR, ((uint8) (mask >> 24u)));
2030   1              CY_SET_REG8(CY_INT_SET_EN2_PTR, ((uint8) (mask >> 16u)));
2031   1              CY_SET_REG8(CY_INT_SET_EN1_PTR, ((uint8) (mask >> 8u )));
2032   1              CY_SET_REG8(CY_INT_SET_EN0_PTR, ((uint8) (mask )));
2033   1      
2034   1          #else
              
                      CY_SET_REG32(CY_INT_ENABLE_PTR, mask);
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 34  

              
                  #endif /* (CY_PSOC3) */
2039   1      
2040   1          CyExitCriticalSection(interruptState);
2041   1      
2042   1      }
2043          
2044          #if(CY_PSOC5)
              
                  /*******************************************************************************
                  * Function Name: CyFlushCache
                  ****************************************************************************//**
                  *  Call this API after a flash row erase/write operation to invalidate or flush
                  *  any of that particular flash region content already present in the cache.
                  *  After a cache flush operation, any access to that flash region after the
                  *  erase/write operation would reload the cache with the modified data from the
                  *  flash region. If the flash region update involves multiple flash row write
                  *  operations, then the flushing of the cache can be done once at the end of
                  *  the operation as long as the flash data would not be accessed in the middle
                  *  of the multiple row update process. Else, flush the cache after every flash
                  *  row write.
                  *
                  *******************************************************************************/
                  void CyFlushCache(void)
                  {
                      uint8 interruptState;
              
                      /* Save current global interrupt enable and disable it */
                      interruptState = CyEnterCriticalSection();
              
                      /* Fill instruction prefectch unit to insure data integrity */
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
              
                      /* All entries in cache are invalidated on next clock cycle. */
                      CY_CACHE_CONTROL_REG |= CY_CACHE_CONTROL_FLUSH;
              
                      /* Once this is executed it's guaranteed the cache has been flushed */
                      (void) CY_CACHE_CONTROL_REG;
              
                      /* Flush the pipeline */
                      CY_SYS_ISB;
              
                      /* Restore global interrupt enable state */
                      CyExitCriticalSection(interruptState);
                  }
              
              
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 35  

                  /*******************************************************************************
                  * Function Name: CyIntSetSysVector
                  ****************************************************************************//**
                  *  Sets the interrupt vector of the specified system interrupt number. System
                  *  interrupts are present only for the ARM platform. These interrupts are for
                  *  SysTick, PendSV and others.
                  *
                  *  \param number: System interrupt number:
                  *    CY_INT_NMI_IRQN                - Non Maskable Interrupt
                  *    CY_INT_HARD_FAULT_IRQN         - Hard Fault Interrupt
                  *    CY_INT_MEM_MANAGE_IRQN         - Memory Management Interrupt
                  *    CY_INT_BUS_FAULT_IRQN          - Bus Fault Interrupt
                  *    CY_INT_USAGE_FAULT_IRQN        - Usage Fault Interrupt
                  *    CY_INT_SVCALL_IRQN             - SV Call Interrupt
                  *    CY_INT_DEBUG_MONITOR_IRQN      - Debug Monitor Interrupt
                  *    CY_INT_PEND_SV_IRQN            - Pend SV Interrupt
                  *    CY_INT_SYSTICK_IRQN            - System Tick Interrupt
                  *
                  *  \param address: Pointer to an interrupt service routine.
                  *
                  * \return
                  *   The old ISR vector at this location.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
                  {
                      cyisraddress oldIsr;
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
              
                      CYASSERT(number <= CY_INT_SYS_NUMBER_MAX);
              
                      /* Save old Interrupt service routine. */
                      oldIsr = ramVectorTable[number & CY_INT_SYS_NUMBER_MASK];
              
                      /* Set new Interrupt service routine. */
                      ramVectorTable[number & CY_INT_SYS_NUMBER_MASK] = address;
              
                      return (oldIsr);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetSysVector
                  ****************************************************************************//**
                  *
                  *  Gets the interrupt vector of the specified system interrupt number. System
                  *  interrupts are present only for the ARM platform. These interrupts are for
                  *  SysTick, PendSV and others.
                  *
                  *  \param number: System interrupt number:
                  *    CY_INT_NMI_IRQN                - Non Maskable Interrupt
                  *    CY_INT_HARD_FAULT_IRQN         - Hard Fault Interrupt
                  *    CY_INT_MEMORY_MANAGEMENT_IRQN  - Memory Management Interrupt
                  *    CY_INT_BUS_FAULT_IRQN          - Bus Fault Interrupt
                  *    CY_INT_USAGE_FAULT_IRQN        - Usage Fault Interrupt
                  *    CY_INT_SVCALL_IRQN             - SV Call Interrupt
                  *    CY_INT_DEBUG_MONITOR_IRQN      - Debug Monitor Interrupt
                  *    CY_INT_PEND_SV_IRQN            - Pend SV Interrupt
                  *    CY_INT_SYSTICK_IRQN            - System Tick Interrupt
                  *
                  * \return
                  *   Address of the ISR in the interrupt vector table.
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 36  

                  *
                  *******************************************************************************/
                  cyisraddress CyIntGetSysVector(uint8 number)
                  {
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
                      CYASSERT(number <= CY_INT_SYS_NUMBER_MAX);
              
                      return ramVectorTable[number & CY_INT_SYS_NUMBER_MASK];
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetVector
                  ****************************************************************************//**
                  *
                  *  Sets the interrupt vector of the specified interrupt number.
                  *
                  *  \param number: Valid range [0-31].  Interrupt number
                  *  \param address: Pointer to an interrupt service routine
                  *
                  * \return
                  *   Previous interrupt vector value.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
                  {
                      cyisraddress oldIsr;
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Save old Interrupt service routine. */
                      oldIsr = ramVectorTable[CY_INT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)];
              
                      /* Set new Interrupt service routine. */
                      ramVectorTable[CY_INT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)] = address;
              
                      return (oldIsr);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetVector
                  ****************************************************************************//**
                  *
                  *  Gets the interrupt vector of the specified interrupt number.
                  *
                  *  \param number: Valid range [0-31].  Interrupt number
                  *
                  * \return
                  *  The address of the ISR in the interrupt vector table.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntGetVector(uint8 number)
                  {
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      return (ramVectorTable[CY_INT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)]);
                  }
              
              
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 37  

                  /*******************************************************************************
                  * Function Name: CyIntSetPriority
                  ****************************************************************************//**
                  *
                  *  Sets the Priority of the Interrupt.
                  *
                  *  \param priority: Priority of the interrupt. 0 - 7, 0 being the highest.
                  *  \param number: The number of the interrupt, 0 - 31.
                  *
                  *******************************************************************************/
                  void CyIntSetPriority(uint8 number, uint8 priority)
                  {
                      CYASSERT(priority <= CY_INT_PRIORITY_MAX);
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
                      CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] = (priority & CY_INT_PRIORITY_MASK)<< 5;
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetPriority
                  ****************************************************************************//**
                  *
                  *  Gets the Priority of the Interrupt.
                  *
                  *  \param number: The number of the interrupt, 0 - 31.
                  *
                  * \return
                  *  Priority of the interrupt. 0 - 7, 0 being the highest.
                  *
                  *******************************************************************************/
                  uint8 CyIntGetPriority(uint8 number)
                  {
                      uint8 priority;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      priority = CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] >> 5;
              
                      return (priority);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetState
                  ****************************************************************************//**
                  *
                  *   Gets the enable state of the specified interrupt number.
                  *
                  *   \param number: Valid range [0-31].  Interrupt number.
                  *
                  * \return
                  *   Enable status: 1 if enabled, 0 if disabled
                  *
                  *******************************************************************************/
                  uint8 CyIntGetState(uint8 number)
                  {
                      reg32 * stateReg;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Get pointer to Interrupt enable register. */
                      stateReg = CY_INT_ENABLE_PTR;
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 38  

              
                      /* Get state of interrupt. */
                      return (0u != (*stateReg & (((uint32) 1u) << (0x1Fu & number)))) ? ((uint8)(1u)) : ((uint8)(0u));
                  }
              
              
              #else   /* PSoC3 */
2292          
2293              /*******************************************************************************
2294              * Function Name: IntDefaultHandler
2295              ****************************************************************************//**
2296              *
2297              *  This function is called for all interrupts, other than a reset that gets
2298              *  called before the system is setup.
2299              *
2300              * Theory:
2301              *  Any value other than zero is acceptable.
2302              *
2303              *******************************************************************************/
2304              CY_ISR(IntDefaultHandler)
2305              {
2306   1              #ifdef CY_BOOT_INT_DEFAULT_HANDLER_EXCEPTION_ENTRY_CALLBACK
                          CyBoot_IntDefaultHandler_Exception_EntryCallback();
                      #endif /* CY_BOOT_INT_DEFAULT_HANDLER_EXCEPTION_ENTRY_CALLBACK */
2309   1      
2310   1              while(1)
2311   1              {
2312   2                  /***********************************************************************
2313   2                  * We must not get here. If we do, a serious problem occurs, so go
2314   2                  * into an infinite loop.
2315   2                  ***********************************************************************/
2316   2              }
2317   1          }
2318          
2319          
2320              /*******************************************************************************
2321              * Function Name: IntDefaultHandler
2322              ****************************************************************************//**
2323              *
2324              *  This function is called during startup to initialize interrupt address vector
2325              *  registers with the address of the IntDefaultHandler().
2326              *
2327              *******************************************************************************/
2328              void CyIntInitVectors(void) 
2329              {
2330   1              uint8 i;
2331   1      
2332   1              for (i = 0; i <= CY_INT_NUMBER_MAX; i++)
2333   1              {
2334   2                  CY_SET_REG16(&CY_INT_VECT_TABLE[i], (uint16) &IntDefaultHandler);
2335   2              }
2336   1          }
2337          
2338          
2339              /*******************************************************************************
2340              * Function Name: CyIntSetVector
2341              ****************************************************************************//**
2342              *
2343              *  Sets the interrupt vector of the specified interrupt number.
2344              *
2345              *  \param number:  Valid range [0-31].  Interrupt number
2346              *  \param address: Pointer to an interrupt service routine
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 39  

2347              *
2348              * \return
2349              *  Previous interrupt vector value.
2350              *
2351              *******************************************************************************/
2352              cyisraddress CyIntSetVector(uint8 number, cyisraddress address) 
2353              {
2354   1              cyisraddress oldIsr;
2355   1      
2356   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2357   1      
2358   1              /* Save old Interrupt service routine. */
2359   1              oldIsr = (cyisraddress) \
2360   1                          CY_GET_REG16(&CY_INT_VECT_TABLE[number & CY_INT_NUMBER_MASK]);
2361   1      
2362   1              /* Set new Interrupt service routine. */
2363   1              CY_SET_REG16(&CY_INT_VECT_TABLE[number], (uint16) address);
2364   1      
2365   1              return (oldIsr);
2366   1          }
2367          
2368          
2369              /*******************************************************************************
2370              * Function Name: CyIntGetVector
2371              ****************************************************************************//**
2372              *
2373              *  Gets the interrupt vector of the specified interrupt number.
2374              *
2375              *  \param number: Valid range [0-31].  Interrupt number
2376              *
2377              * \return
2378              *  Address of the ISR in the interrupt vector table.
2379              *
2380              *******************************************************************************/
2381              cyisraddress CyIntGetVector(uint8 number) 
2382              {
2383   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2384   1      
2385   1              return ((cyisraddress) \
2386   1                      CY_GET_REG16(&CY_INT_VECT_TABLE[number & CY_INT_NUMBER_MASK]));
2387   1          }
2388          
2389          
2390              /*******************************************************************************
2391              * Function Name: CyIntSetPriority
2392              ****************************************************************************//**
2393              *
2394              *  Sets the Priority of the Interrupt.
2395              *
2396              *  \param priority: Priority of the interrupt. 0 - 7, 0 being the highest.
2397              *  \param number:   The number of the interrupt, 0 - 31.
2398              *
2399              *******************************************************************************/
2400              void CyIntSetPriority(uint8 number, uint8 priority) 
2401              {
2402   1              CYASSERT(priority <= CY_INT_PRIORITY_MAX);
2403   1      
2404   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2405   1      
2406   1              CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] =
2407   1                          (priority & CY_INT_PRIORITY_MASK) << 5;
2408   1          }
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 40  

2409          
2410          
2411              /*******************************************************************************
2412              * Function Name: CyIntGetPriority
2413              ****************************************************************************//**
2414              *
2415              *  Gets the Priority of the Interrupt.
2416              *
2417              *  \param number: The number of the interrupt, 0 - 31.
2418              *
2419              * \return
2420              *  Priority of the interrupt. 0 - 7, 0 being the highest.
2421              *
2422              *******************************************************************************/
2423              uint8 CyIntGetPriority(uint8 number) 
2424              {
2425   1              uint8 priority;
2426   1      
2427   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2428   1      
2429   1              priority = CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] >> 5;
2430   1      
2431   1              return (priority);
2432   1          }
2433          
2434          
2435              /*******************************************************************************
2436              * Function Name: CyIntGetState
2437              ****************************************************************************//**
2438              *
2439              *   Gets the enable state of the specified interrupt number.
2440              *
2441              *   \param number: Valid range [0-31].  Interrupt number.
2442              *
2443              * \return
2444              *   Enable status: 1 if enabled, 0 if disabled
2445              *
2446              *******************************************************************************/
2447              uint8 CyIntGetState(uint8 number) 
2448              {
2449   1              reg8 * stateReg;
2450   1      
2451   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2452   1      
2453   1              /* Get pointer to Interrupt enable register. */
2454   1              stateReg = CY_INT_ENABLE_PTR + ((number & CY_INT_NUMBER_MASK) >> 3u);
2455   1      
2456   1              /* Get state of interrupt. */
2457   1              return ((0u != (*stateReg & ((uint8)(1u << (0x07u & number))))) ? ((uint8)(1u)) : ((uint8)(0u)));
2458   1          }
2459          
2460          #endif  /* (CY_PSOC5) */
2461          
2462          
2463          #if(CYDEV_VARIABLE_VDDA == 1)
              
                  /*******************************************************************************
                  * Function Name: CySetScPumps
                  ****************************************************************************//**
                  *
                  *  If 1 is passed as a parameter:
                  *   - if any of the SC blocks are used - enable pumps for the SC blocks and
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 41  

                  *     start boost clock.
                  *   - For each enabled SC block set a boost clock index and enable the boost
                  *     clock.
                  *
                  *  If non-1 value is passed as a parameter:
                  *   - If all SC blocks are not used - disable pumps for the SC blocks and
                  *     stop the boost clock.
                  *   - For each enabled SC block clear the boost clock index and disable the
                  *     boost clock.
                  *
                  *  The global variable CyScPumpEnabled is updated to be equal to passed the
                  *  parameter.
                  *
                  *   \param uint8 enable: Enable/disable SC pumps and the boost clock for the enabled
                  *                 \param SC block:
                  *                 1 - Enable
                  *                 0 - Disable
                  *
                  *******************************************************************************/
                  void CySetScPumps(uint8 enable) 
                  {
                      if(1u == enable)
                      {
                          /* The SC pumps should be enabled */
                          CyScPumpEnabled = 1u;
                          /* Enable pumps if any of SC blocks are used */
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAPS_MASK))
                          {
                              CY_LIB_SC_MISC_REG |= CY_LIB_SC_MISC_PUMP_FORCE;
                              CyScBoostClk_Start();
                          }
                          /* Set positive pump for each enabled SC block: set clock index and enable it */
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP0_EN))
                          {
                              CY_LIB_SC0_BST_REG = (CY_LIB_SC0_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC0_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP1_EN))
                          {
                              CY_LIB_SC1_BST_REG = (CY_LIB_SC1_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC1_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP2_EN))
                          {
                              CY_LIB_SC2_BST_REG = (CY_LIB_SC2_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC2_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP3_EN))
                          {
                              CY_LIB_SC3_BST_REG = (CY_LIB_SC3_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC3_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                      }
                      else
                      {
                          /* The SC pumps should be disabled */
                          CyScPumpEnabled = 0u;
                          /* Disable pumps for all SC blocks and stop boost clock */
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 42  

                          CY_LIB_SC_MISC_REG &= ((uint8)(~CY_LIB_SC_MISC_PUMP_FORCE));
                          CyScBoostClk_Stop();
                          /* Disable boost clock and clear clock index for each SC block */
                          CY_LIB_SC0_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC0_BST_REG = CY_LIB_SC0_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                          CY_LIB_SC1_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC1_BST_REG = CY_LIB_SC1_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                          CY_LIB_SC2_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC2_BST_REG = CY_LIB_SC2_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                          CY_LIB_SC3_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC3_BST_REG = CY_LIB_SC3_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                      }
                  }
              
              #endif  /* (CYDEV_VARIABLE_VDDA == 1) */
2544          
2545          
2546          #if(CY_PSOC5)
                  /*******************************************************************************
                  * Function Name: CySysTickStart
                  ****************************************************************************//**
                  *
                  *  Configures the SysTick timer to generate interrupt every 1 ms by call to the
                  *  CySysTickInit() function and starts it by calling CySysTickEnable() function.
                  *  Refer to the corresponding function description for the details.
              
                  * \sideeffect
                  *  Clears SysTick count flag if it was set
                  *
                  *******************************************************************************/
                  void CySysTickStart(void)
                  {
                      if (0u == CySysTickInitVar)
                      {
                          CySysTickInit();
                          CySysTickInitVar = 1u;
                      }
              
                      CySysTickEnable();
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickInit
                  ****************************************************************************//**
                  *
                  *  Initializes the callback addresses with pointers to NULL, associates the
                  *  SysTick system vector with the function that is responsible for calling
                  *  registered callback functions, configures SysTick timer to generate interrupt
                  * every 1 ms.
                  *
                  * \sideeffect
                  *  Clears SysTick count flag if it was set.
                  *
                  *  The 1 ms interrupt interval is configured based on the frequency determined
                  *  by PSoC Creator at build time. If System clock frequency is changed in
                  *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
                  *
                  *******************************************************************************/
                  void CySysTickInit(void)
                  {
                      uint32 i;
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 43  

              
                      for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
                      {
                          CySysTickCallbacks[i] = (void *) 0;
                      }
              
                      (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
                      CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
                      CySysTickSetReload(cydelay_freq_hz/1000u);
                      CySysTickClear();
                      CyIntEnable(CY_INT_SYSTICK_IRQN);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickEnable
                  ****************************************************************************//**
                  *
                  *  Enables the SysTick timer and its interrupt.
                  *
                  * \sideeffect
                  *  Clears SysTick count flag if it was set
                  *
                  *******************************************************************************/
                  void CySysTickEnable(void)
                  {
                      CySysTickEnableInterrupt();
                      CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickStop
                  ****************************************************************************//**
                  *
                  *  Stops the system timer (SysTick).
                  *
                  * \sideeffect
                  *  Clears SysTick count flag if it was set
                  *
                  *******************************************************************************/
                  void CySysTickStop(void)
                  {
                      CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickEnableInterrupt
                  ****************************************************************************//**
                  *
                  *  Enables the SysTick interrupt.
                  *
                  * \sideeffect
                  *  Clears SysTick count flag if it was set
                  *
                  *******************************************************************************/
                  void CySysTickEnableInterrupt(void)
                  {
                      CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
                  }
              
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 44  

              
                  /*******************************************************************************
                  * Function Name: CySysTickDisableInterrupt
                  ****************************************************************************//**
                  *
                  *  Disables the SysTick interrupt.
                  *
                  * \sideeffect
                  *  Clears SysTick count flag if it was set
                  *
                  *******************************************************************************/
                  void CySysTickDisableInterrupt(void)
                  {
                      CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickSetReload
                  ****************************************************************************//**
                  *
                  *  Sets value the counter is set to on startup and after it reaches zero. This
                  *  function do not change or reset current sysTick counter value, so it should
                  *  be cleared using CySysTickClear() API.
                  *
                  *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value.
                  *
                  *******************************************************************************/
                  void CySysTickSetReload(uint32 value)
                  {
                      CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickGetReload
                  ****************************************************************************//**
                  *
                  *  Sets value the counter is set to on startup and after it reaches zero.
                  *
                  * \return
                  *  Counter reset value
                  *
                  *******************************************************************************/
                  uint32 CySysTickGetReload(void)
                  {
                      return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickGetValue
                  ****************************************************************************//**
                  *
                  *  Gets current SysTick counter value.
                  *
                  * \return
                  *  Current SysTick counter value
                  *
                  *******************************************************************************/
                  uint32 CySysTickGetValue(void)
                  {
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 45  

                      return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickSetClockSource
                  ****************************************************************************//**
                  *
                  *  Sets the clock source for the SysTick counter.
                  *
                  *  \param clockSource: Clock source for SysTick counter
                  *         Define                     Clock Source
                  *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
                  *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
                  *                                      clock (ILO 100 KHz for PSoC 5LP, and
                  *                                      LFCLK for PSoC 4).
                  *
                  * \sideeffect
                  *  Clears SysTick count flag if it was set. If clock source is not ready this
                  *  function call will have no effect. After changing clock source to the low
                  *  frequency clock the counter and reload register values will remain unchanged
                  *  so time to the interrupt will be significantly bigger and vice versa.
                  *
                  *******************************************************************************/
                  void CySysTickSetClockSource(uint32 clockSource)
                  {
                      if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
                      {
                          CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_SOURCE_S
             -HIFT);
                      }
                      else
                      {
                          CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_
             -CLK_SOURCE_SHIFT)));
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickGetCountFlag
                  ****************************************************************************//**
                  *
                  *  The count flag is set once SysTick counter reaches zero.
                  *   The flag cleared on read.
                  *
                  * \return
                  *  Returns non-zero value if flag is set, otherwise zero is returned.
                  *
                  *
                  * \sideeffect
                  *  Clears SysTick count flag if it was set.
                  *
                  *******************************************************************************/
                  uint32 CySysTickGetCountFlag(void)
                  {
                      return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickClear
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 46  

                  ****************************************************************************//**
                  *
                  *  Clears the SysTick counter for well-defined startup.
                  *
                  *******************************************************************************/
                  void CySysTickClear(void)
                  {
                      CY_SYS_SYST_CVR_REG = 0u;
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickSetCallback
                  ****************************************************************************//**
                  *
                  *  This function allows up to five user-defined interrupt service routine
                  *  functions to be associated with the SysTick interrupt. These are specified
                  *  through the use of pointers to the function.
                  *
                  *  To set a custom callback function without the overhead of the system provided
                  *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
                  *  where <address> is address of the custom defined interrupt service routine.
                  *  Note: a custom callback function overrides the system defined callback
                  *  functions.
                  *
                  *  \param number: The number of the callback function addresses to be set. The valid
                  *          range is from 0 to 4.
                  *
                  *  void(*CallbackFunction(void): A pointer to the function that will be
                  *                                associated with the SysTick ISR for the
                  *                                specified number.
                  *
                  * \return
                  *  Returns the address of the previous callback function.
                  *  The NULL is returned if the specified address in not set.
                  *
                  * \sideeffect
                  *  The registered callback functions will be executed in the interrupt.
                  *
                  *******************************************************************************/
                  cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
                  {
                      cySysTickCallback retVal;
              
                      retVal = CySysTickCallbacks[number];
                      CySysTickCallbacks[number] = function;
                      return (retVal);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickGetCallback
                  ****************************************************************************//**
                  *
                  *  The function get the specified callback pointer.
                  *
                  *  \param number: The number of callback function address to get. The valid
                  *          range is from 0 to 4.
                  *
                  * \return
                  *  Returns the address of the specified callback function.
                  *  The NULL is returned if the specified address in not initialized.
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 47  

                  *
                  *******************************************************************************/
                  cySysTickCallback CySysTickGetCallback(uint32 number)
                  {
                      return ((cySysTickCallback) CySysTickCallbacks[number]);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CySysTickServiceCallbacks
                  ****************************************************************************//**
                  *
                  *  System Tick timer interrupt routine
                  *
                  *******************************************************************************/
                  static void CySysTickServiceCallbacks(void)
                  {
                      uint32 i;
              
                      /* Verify that tick timer flag was set */
                      if (1u == CySysTickGetCountFlag())
                      {
                          for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
                          {
                              if (CySysTickCallbacks[i] != (void *) 0)
                              {
                                  (void)(CySysTickCallbacks[i])();
                              }
                          }
                      }
                  }
              #endif /* (CY_PSOC5) */
2869          
2870          
2871          /*******************************************************************************
2872          * Function Name: CyGetUniqueId
2873          ****************************************************************************//**
2874          *
2875          *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
2876          *  guaranteed for 10 years due to the die lot number having a cycle life of 10
2877          *  years and even after 10 years, the probability of getting two identical
2878          *  numbers is very small.
2879          *
2880          *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
2881          *  the 64-bit unique ID of the device by loading them into the integer array
2882          *  pointed to by uniqueId.
2883          *
2884          *******************************************************************************/
2885          void CyGetUniqueId(uint32* uniqueId)
2886          {
2887   1      #if(CY_PSOC4)
                  uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
                  uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
                  uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
                  uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
              
                  uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
                  uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
                  uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
                  uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
              #else
2898   1          uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   ));
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 48  

2899   1          uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )) <<  8
             -u);
2900   1          uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )) << 16
             -u);
2901   1          uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )) << 24
             -u);
2902   1      
2903   1          uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     ));
2904   1          uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )) <<  8
             -u);
2905   1          uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )) << 16
             -u);
2906   1          uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )) << 24
             -u);
2907   1      #endif  /* (CY_PSOC4) */
2908   1      }
2909          
2910          /* [] END OF FILE */
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 49  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyPLL_OUT_Start (BEGIN)
                                           ; SOURCE LINE # 97
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
000A 904220            MOV     DPTR,#04220H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 4401              ORL     A,#01H
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0015 900000      R     MOV     DPTR,#wait
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 607A              JZ      ?C0001
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 112
001D 904300            MOV     DPTR,#04300H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 5404              ANL     A,#04H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#iloEnableState
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
002B 904380            MOV     DPTR,#04380H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#pmTwCfg0State
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0035 904382            MOV     DPTR,#04382H
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 900000      R     MOV     DPTR,#pmTwCfg2State
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
003F 7F18              MOV     R7,#018H
0041 120000      E     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 118
0044 900000      R     MOV     DPTR,#status
0047 7410              MOV     A,#010H
0049 F0                MOVX    @DPTR,A
004A         ?C0002:
                                           ; SOURCE LINE # 120
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 50  

004A 7F01              MOV     R7,#01H
004C 120000      E     LCALL   _CyPmReadStatus
004F 7E00              MOV     R6,#00H
0051 EF                MOV     A,R7
0052 20E023            JB      ACC.0,?C0003
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 123
0055 904225            MOV     DPTR,#04225H
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B 5401              ANL     A,#01H
005D FF                MOV     R7,A
005E 7E00              MOV     R6,#00H
0060 EF                MOV     A,R7
0061 4E                ORL     A,R6
0062 60E6              JZ      ?C0002
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0064 904225            MOV     DPTR,#04225H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A 5401              ANL     A,#01H
006C FF                MOV     R7,A
006D 7E00              MOV     R6,#00H
006F EF                MOV     A,R7
0070 4E                ORL     A,R6
0071 60D7              JZ      ?C0002
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
0073 900000      R     MOV     DPTR,#status
0076 E4                CLR     A
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
0078         ?C0003:
                                           ; SOURCE LINE # 134
0078 900000      R     MOV     DPTR,#iloEnableState
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 7003              JNZ     ?C0006
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
0080 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 137
0083         ?C0006:
                                           ; SOURCE LINE # 139
0083 900000      R     MOV     DPTR,#pmTwCfg0State
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 904380            MOV     DPTR,#04380H
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
008D 900000      R     MOV     DPTR,#pmTwCfg2State
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 904382            MOV     DPTR,#04382H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 51  

0095 EF                MOV     A,R7
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0097         ?C0001:
                                           ; SOURCE LINE # 143
0097 900000      R     MOV     DPTR,#status
009A E0                MOVX    A,@DPTR
009B FF                MOV     R7,A
                                           ; SOURCE LINE # 144
009C         ?C0007:
009C 22                RET     
             ; FUNCTION _CyPLL_OUT_Start (END)

             ; FUNCTION CyPLL_OUT_Stop (BEGIN)
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0000 904220            MOV     DPTR,#04220H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
000B 22                RET     
             ; FUNCTION CyPLL_OUT_Stop (END)

             ; FUNCTION _CyPLL_OUT_SetPQ (BEGIN)
                                           ; SOURCE LINE # 187
0000 900000      R     MOV     DPTR,#pDiv
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#qDiv
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#current
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 190
000F 904220            MOV     DPTR,#04220H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5401              ANL     A,#01H
0017 FF                MOV     R7,A
0018 7E00              MOV     R6,#00H
001A EF                MOV     A,R7
001B 4E                ORL     A,R6
001C 7003              JNZ     ?C0010
001E D3                SETB    C
001F 8001              SJMP    ?C0011
0021         ?C0010:
0021 C3                CLR     C
0022         ?C0011:
0022 4005              JC      ?C0009
0024 7F00              MOV     R7,#00H
0026 120000      R     LCALL   _?CyHalt
0029         ?C0009:
                                           ; SOURCE LINE # 192
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 52  

0029 900000      R     MOV     DPTR,#pDiv
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F C3                CLR     C
0030 9408              SUBB    A,#08H
0032 4062              JC      ?C0012
0034 900000      R     MOV     DPTR,#qDiv
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A D3                SETB    C
003B 9410              SUBB    A,#010H
003D 5057              JNC     ?C0012
003F 900000      R     MOV     DPTR,#qDiv
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 C3                CLR     C
0046 9401              SUBB    A,#01H
0048 404C              JC      ?C0012
004A 900000      R     MOV     DPTR,#current
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 C3                CLR     C
0051 9401              SUBB    A,#01H
0053 4041              JC      ?C0012
0055 900000      R     MOV     DPTR,#current
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B D3                SETB    C
005C 9407              SUBB    A,#07H
005E 5036              JNC     ?C0012
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 197
0060 900000      R     MOV     DPTR,#pDiv
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 904222            MOV     DPTR,#04222H
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
006A 900000      R     MOV     DPTR,#qDiv
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 14                DEC     A
0071 FF                MOV     R7,A
0072 904223            MOV     DPTR,#04223H
0075 EF                MOV     A,R7
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0077 900000      R     MOV     DPTR,#current
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C EF                MOV     A,R7
007D 14                DEC     A
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 C4                SWAP    A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 53  

0081 54F0              ANL     A,#0F0H
0083 FF                MOV     R7,A
0084 904221            MOV     DPTR,#04221H
0087 E0                MOVX    A,@DPTR
0088 FE                MOV     R6,A
0089 EE                MOV     A,R6
008A 548F              ANL     A,#08FH
008C FE                MOV     R6,A
008D EF                MOV     A,R7
008E 4E                ORL     A,R6
008F FF                MOV     R7,A
0090 904221            MOV     DPTR,#04221H
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0095 22                RET     
0096         ?C0012:
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 210
0096 7F00              MOV     R7,#00H
0098 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 213
009B         ?C0015:
009B 22                RET     
             ; FUNCTION _CyPLL_OUT_SetPQ (END)

             ; FUNCTION _CyPLL_OUT_SetSource (BEGIN)
                                           ; SOURCE LINE # 237
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 240
0005 904220            MOV     DPTR,#04220H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5401              ANL     A,#01H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 7003              JNZ     ?C0017
0014 D3                SETB    C
0015 8001              SJMP    ?C0018
0017         ?C0017:
0017 C3                CLR     C
0018         ?C0018:
0018 4005              JC      ?C0016
001A 7F00              MOV     R7,#00H
001C 120000      R     LCALL   _?CyHalt
001F         ?C0016:
                                           ; SOURCE LINE # 242
001F 900000      R     MOV     DPTR,#source
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 120000      E     LCALL   ?C?CCASE
0028 0000        R     DW      ?C0022
002A 00                DB      00H
002B 0000        R     DW      ?C0022
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 54  

002D 01                DB      01H
002E 0000        R     DW      ?C0022
0030 02                DB      02H
0031 0000              DW      00H
0033 0000        R     DW      ?C0023
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
0035         ?C0022:
                                           ; SOURCE LINE # 247
0035 904000            MOV     DPTR,#04000H
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 54FC              ANL     A,#0FCH
003D FF                MOV     R7,A
003E 900000      R     MOV     DPTR,#source
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 EF                MOV     A,R7
0044 4E                ORL     A,R6
0045 FF                MOV     R7,A
0046 904000            MOV     DPTR,#04000H
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
004B 22                RET     
                                           ; SOURCE LINE # 250
004C         ?C0023:
                                           ; SOURCE LINE # 251
004C 7F00              MOV     R7,#00H
004E 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
0051         ?C0025:
0051 22                RET     
             ; FUNCTION _CyPLL_OUT_SetSource (END)

             ; FUNCTION _CyIMO_Start (BEGIN)
                                           ; SOURCE LINE # 282
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 289
0005 9043A0            MOV     DPTR,#043A0H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 4410              ORL     A,#010H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
0010 9043B0            MOV     DPTR,#043B0H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 4410              ORL     A,#010H
0018 FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 55  

0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
001B 900000      R     MOV     DPTR,#wait
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 6051              JZ      ?C0030
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 295
0023 904300            MOV     DPTR,#04300H
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5404              ANL     A,#04H
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#ilo100KhzEnable
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0031 904380            MOV     DPTR,#04380H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#pmFtwCfg0Reg
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
003B 904382            MOV     DPTR,#04382H
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#pmFtwCfg2Reg
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
0045 7F00              MOV     R7,#00H
0047 120000      E     LCALL   _CyPmFtwSetInterval
004A         ?C0027:
                                           ; SOURCE LINE # 301
004A 7F01              MOV     R7,#01H
004C 120000      E     LCALL   _CyPmReadStatus
004F 7E00              MOV     R6,#00H
0051 EF                MOV     A,R7
0052 30E0F5            JNB     ACC.0,?C0027
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 304
0055         ?C0028:
                                           ; SOURCE LINE # 306
0055 900000      R     MOV     DPTR,#ilo100KhzEnable
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B 7003              JNZ     ?C0029
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
005D 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 309
0060         ?C0029:
                                           ; SOURCE LINE # 311
0060 900000      R     MOV     DPTR,#pmFtwCfg0Reg
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 904380            MOV     DPTR,#04380H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 56  

0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
006A 900000      R     MOV     DPTR,#pmFtwCfg2Reg
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F 904382            MOV     DPTR,#04382H
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0074         ?C0030:
0074 22                RET     
             ; FUNCTION _CyIMO_Start (END)

             ; FUNCTION CyIMO_Stop (BEGIN)
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
0000 9043A0            MOV     DPTR,#043A0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
000B 9043B0            MOV     DPTR,#043B0H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54EF              ANL     A,#0EFH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
0016 22                RET     
             ; FUNCTION CyIMO_Stop (END)

             ; FUNCTION CyUSB_PowerOnCheck (BEGIN)
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
0000 900000      R     MOV     DPTR,#poweredOn
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
0005 904393            MOV     DPTR,#04393H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 700F              JNZ     ?C0034
0014 9043A5            MOV     DPTR,#043A5H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 57  

001A 5401              ANL     A,#01H
001C FF                MOV     R7,A
001D 7E00              MOV     R6,#00H
001F EF                MOV     A,R7
0020 4E                ORL     A,R6
0021 7020              JNZ     ?C0033
0023         ?C0034:
0023 904393            MOV     DPTR,#04393H
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5407              ANL     A,#07H
002B FF                MOV     R7,A
002C 7E00              MOV     R6,#00H
002E EF                MOV     A,R7
002F 6401              XRL     A,#01H
0031 4E                ORL     A,R6
0032 7015              JNZ     ?C0032
0034 9043B5            MOV     DPTR,#043B5H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 5401              ANL     A,#01H
003C FF                MOV     R7,A
003D 7E00              MOV     R6,#00H
003F EF                MOV     A,R7
0040 4E                ORL     A,R6
0041 6006              JZ      ?C0032
0043         ?C0033:
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
0043 900000      R     MOV     DPTR,#poweredOn
0046 7401              MOV     A,#01H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
0049         ?C0032:
                                           ; SOURCE LINE # 354
0049 900000      R     MOV     DPTR,#poweredOn
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
                                           ; SOURCE LINE # 355
004E         ?C0035:
004E 22                RET     
             ; FUNCTION CyUSB_PowerOnCheck (END)

             ; FUNCTION _CyIMO_SetTrimValue (BEGIN)
                                           ; SOURCE LINE # 367
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0005 120000      R     LCALL   CyUSB_PowerOnCheck
0008 900000      R     MOV     DPTR,#usbPowerOn
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
000D 900000      R     MOV     DPTR,#usbPowerOn
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 B4010B            CJNE    A,#01H,?C0036
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 58  

                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 375
0016 906009            MOV     DPTR,#06009H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FD              ANL     A,#0FDH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
0021         ?C0036:
                                           ; SOURCE LINE # 377
0021 900000      R     MOV     DPTR,#freq
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 120000      E     LCALL   ?C?CCASE
002A 0000        R     DW      ?C0038
002C 00                DB      00H
002D 0000        R     DW      ?C0039
002F 01                DB      01H
0030 0000        R     DW      ?C0040
0032 02                DB      02H
0033 0000        R     DW      ?C0041
0035 03                DB      03H
0036 0000        R     DW      ?C0042
0038 04                DB      04H
0039 0000        R     DW      ?C0043
003B 05                DB      05H
003C 0000        R     DW      ?C0044
003E 08                DB      08H
003F 0000              DW      00H
0041 0000        R     DW      ?C0046
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
0043         ?C0038:
                                           ; SOURCE LINE # 380
0043 7B0C              MOV     R3,#0CH
0045 7A01              MOV     R2,#01H
0047 7908              MOV     R1,#08H
0049 120000      E     LCALL   _cyread8
004C 9046A1            MOV     DPTR,#046A1H
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
0051 22                RET     
                                           ; SOURCE LINE # 383
0052         ?C0039:
                                           ; SOURCE LINE # 384
0052 7B0C              MOV     R3,#0CH
0054 7A01              MOV     R2,#01H
0056 7909              MOV     R1,#09H
0058 120000      E     LCALL   _cyread8
005B 9046A1            MOV     DPTR,#046A1H
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
0060 22                RET     
                                           ; SOURCE LINE # 387
0061         ?C0040:
                                           ; SOURCE LINE # 388
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 59  

0061 7B0C              MOV     R3,#0CH
0063 7A01              MOV     R2,#01H
0065 790A              MOV     R1,#0AH
0067 120000      E     LCALL   _cyread8
006A 9046A1            MOV     DPTR,#046A1H
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
006F 22                RET     
                                           ; SOURCE LINE # 391
0070         ?C0041:
                                           ; SOURCE LINE # 392
0070 7B0C              MOV     R3,#0CH
0072 7A01              MOV     R2,#01H
0074 790B              MOV     R1,#0BH
0076 120000      E     LCALL   _cyread8
0079 9046A1            MOV     DPTR,#046A1H
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
007E 22                RET     
                                           ; SOURCE LINE # 395
007F         ?C0042:
                                           ; SOURCE LINE # 396
007F 7B0C              MOV     R3,#0CH
0081 7A01              MOV     R2,#01H
0083 7989              MOV     R1,#089H
0085 120000      E     LCALL   _cyread8
0088 9046A1            MOV     DPTR,#046A1H
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
008D 22                RET     
                                           ; SOURCE LINE # 399
008E         ?C0043:
                                           ; SOURCE LINE # 400
008E 7B0C              MOV     R3,#0CH
0090 7A01              MOV     R2,#01H
0092 790C              MOV     R1,#0CH
0094 120000      E     LCALL   _cyread8
0097 9046A1            MOV     DPTR,#046A1H
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
009C 22                RET     
                                           ; SOURCE LINE # 409
009D         ?C0044:
                                           ; SOURCE LINE # 410
009D 7B0C              MOV     R3,#0CH
009F 7A01              MOV     R2,#01H
00A1 790F              MOV     R1,#0FH
00A3 120000      E     LCALL   _cyread8
00A6 9046A1            MOV     DPTR,#046A1H
00A9 EF                MOV     A,R7
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
00AB 900000      R     MOV     DPTR,#usbPowerOn
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 EF                MOV     A,R7
00B1 B40111            CJNE    A,#01H,?C0048
                                           ; SOURCE LINE # 414
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 60  

                                           ; SOURCE LINE # 416
00B4 906009            MOV     DPTR,#06009H
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 EF                MOV     A,R7
00BA 4402              ORL     A,#02H
00BC FF                MOV     R7,A
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
00BF 22                RET     
                                           ; SOURCE LINE # 420
00C0         ?C0046:
                                           ; SOURCE LINE # 421
00C0 7F00              MOV     R7,#00H
00C2 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 425
00C5         ?C0048:
00C5 22                RET     
             ; FUNCTION _CyIMO_SetTrimValue (END)

             ; FUNCTION _CyIMO_SetFreq (BEGIN)
                                           ; SOURCE LINE # 457
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 469
0005 904200            MOV     DPTR,#04200H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#currentFreq
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
0013 900000      R     MOV     DPTR,#freq
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 B40804            CJNE    A,#08H,?C0049
001C 7F03              MOV     R7,#03H
001E 8005              SJMP    ?C0050
0020         ?C0049:
0020 900000      R     MOV     DPTR,#freq
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025         ?C0050:
0025 900000      R     MOV     DPTR,#nextFreq
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
002A 900000      R     MOV     DPTR,#currentFreq
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 120000      E     LCALL   ?C?CCASE
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 61  

0033 0000        R     DW      ?C0052
0035 00                DB      00H
0036 0000        R     DW      ?C0053
0038 01                DB      01H
0039 0000        R     DW      ?C0054
003B 02                DB      02H
003C 0000        R     DW      ?C0055
003E 03                DB      03H
003F 0000        R     DW      ?C0056
0041 04                DB      04H
0042 0000        R     DW      ?C0057
0044 05                DB      05H
0045 0000              DW      00H
0047 0000        R     DW      ?C0058
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
0049         ?C0052:
                                           ; SOURCE LINE # 477
0049 900000      R     MOV     DPTR,#currentFreq
004C 7402              MOV     A,#02H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
004F 802C              SJMP    ?C0051
                                           ; SOURCE LINE # 480
0051         ?C0053:
                                           ; SOURCE LINE # 481
0051 900000      R     MOV     DPTR,#currentFreq
0054 7401              MOV     A,#01H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
0057 8024              SJMP    ?C0051
                                           ; SOURCE LINE # 484
0059         ?C0054:
                                           ; SOURCE LINE # 485
0059 900000      R     MOV     DPTR,#currentFreq
005C 7403              MOV     A,#03H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 486
005F 801C              SJMP    ?C0051
                                           ; SOURCE LINE # 488
0061         ?C0055:
                                           ; SOURCE LINE # 489
0061 900000      R     MOV     DPTR,#currentFreq
0064 E4                CLR     A
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
0066 8015              SJMP    ?C0051
                                           ; SOURCE LINE # 492
0068         ?C0056:
                                           ; SOURCE LINE # 493
0068 900000      R     MOV     DPTR,#currentFreq
006B 7404              MOV     A,#04H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
006E 800D              SJMP    ?C0051
                                           ; SOURCE LINE # 496
0070         ?C0057:
                                           ; SOURCE LINE # 497
0070 900000      R     MOV     DPTR,#currentFreq
0073 7405              MOV     A,#05H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 62  

0076 8005              SJMP    ?C0051
                                           ; SOURCE LINE # 506
0078         ?C0058:
                                           ; SOURCE LINE # 507
0078 7F00              MOV     R7,#00H
007A 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
007D         ?C0051:
                                           ; SOURCE LINE # 511
007D 900000      R     MOV     DPTR,#currentFreq
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 900000      R     MOV     DPTR,#nextFreq
0085 E0                MOVX    A,@DPTR
0086 FE                MOV     R6,A
0087 EE                MOV     A,R6
0088 C3                CLR     C
0089 9F                SUBB    A,R7
008A 4008              JC      ?C0060
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 514
008C 900000      R     MOV     DPTR,#freq
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 515
0094         ?C0060:
                                           ; SOURCE LINE # 518
0094 900000      R     MOV     DPTR,#freq
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 120000      E     LCALL   ?C?CCASE
009D 0000        R     DW      ?C0062
009F 00                DB      00H
00A0 0000        R     DW      ?C0063
00A2 01                DB      01H
00A3 0000        R     DW      ?C0064
00A5 02                DB      02H
00A6 0000        R     DW      ?C0065
00A8 03                DB      03H
00A9 0000        R     DW      ?C0066
00AB 04                DB      04H
00AC 0000        R     DW      ?C0067
00AE 05                DB      05H
00AF 0000        R     DW      ?C0068
00B1 08                DB      08H
00B2 0000              DW      00H
00B4 0000        R     DW      ?C0069
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
00B6         ?C0062:
                                           ; SOURCE LINE # 522
00B6 904200            MOV     DPTR,#04200H
00B9 E0                MOVX    A,@DPTR
00BA FF                MOV     R7,A
00BB EF                MOV     A,R7
00BC 54F8              ANL     A,#0F8H
00BE FF                MOV     R7,A
00BF EF                MOV     A,R7
00C0 4403              ORL     A,#03H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 63  

00C2 FF                MOV     R7,A
00C3 EF                MOV     A,R7
00C4 54BF              ANL     A,#0BFH
00C6 FF                MOV     R7,A
00C7 904200            MOV     DPTR,#04200H
00CA EF                MOV     A,R7
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 523
00CC 020000      R     LJMP    ?C0061
                                           ; SOURCE LINE # 525
00CF         ?C0063:
                                           ; SOURCE LINE # 527
00CF 904200            MOV     DPTR,#04200H
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 EF                MOV     A,R7
00D5 54F8              ANL     A,#0F8H
00D7 FF                MOV     R7,A
00D8 EF                MOV     A,R7
00D9 4401              ORL     A,#01H
00DB FF                MOV     R7,A
00DC EF                MOV     A,R7
00DD 54BF              ANL     A,#0BFH
00DF FF                MOV     R7,A
00E0 904200            MOV     DPTR,#04200H
00E3 EF                MOV     A,R7
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
00E5 806E              SJMP    ?C0061
                                           ; SOURCE LINE # 530
00E7         ?C0064:
                                           ; SOURCE LINE # 532
00E7 904200            MOV     DPTR,#04200H
00EA E0                MOVX    A,@DPTR
00EB FF                MOV     R7,A
00EC EF                MOV     A,R7
00ED 54B8              ANL     A,#0B8H
00EF FF                MOV     R7,A
00F0 EF                MOV     A,R7
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
00F2 8061              SJMP    ?C0061
                                           ; SOURCE LINE # 535
00F4         ?C0065:
                                           ; SOURCE LINE # 537
00F4 904200            MOV     DPTR,#04200H
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 EF                MOV     A,R7
00FA 54F8              ANL     A,#0F8H
00FC FF                MOV     R7,A
00FD EF                MOV     A,R7
00FE 4402              ORL     A,#02H
0100 FF                MOV     R7,A
0101 EF                MOV     A,R7
0102 54BF              ANL     A,#0BFH
0104 FF                MOV     R7,A
0105 904200            MOV     DPTR,#04200H
0108 EF                MOV     A,R7
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 538
010A 8049              SJMP    ?C0061
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 64  

                                           ; SOURCE LINE # 540
010C         ?C0066:
                                           ; SOURCE LINE # 542
010C 904200            MOV     DPTR,#04200H
010F E0                MOVX    A,@DPTR
0110 FF                MOV     R7,A
0111 EF                MOV     A,R7
0112 54F8              ANL     A,#0F8H
0114 FF                MOV     R7,A
0115 EF                MOV     A,R7
0116 4404              ORL     A,#04H
0118 FF                MOV     R7,A
0119 EF                MOV     A,R7
011A 54BF              ANL     A,#0BFH
011C FF                MOV     R7,A
011D 904200            MOV     DPTR,#04200H
0120 EF                MOV     A,R7
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 543
0122 8031              SJMP    ?C0061
                                           ; SOURCE LINE # 545
0124         ?C0067:
                                           ; SOURCE LINE # 547
0124 904200            MOV     DPTR,#04200H
0127 E0                MOVX    A,@DPTR
0128 FF                MOV     R7,A
0129 EF                MOV     A,R7
012A 54F8              ANL     A,#0F8H
012C FF                MOV     R7,A
012D EF                MOV     A,R7
012E 4405              ORL     A,#05H
0130 FF                MOV     R7,A
0131 EF                MOV     A,R7
0132 54BF              ANL     A,#0BFH
0134 FF                MOV     R7,A
0135 904200            MOV     DPTR,#04200H
0138 EF                MOV     A,R7
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
013A 8019              SJMP    ?C0061
                                           ; SOURCE LINE # 557
013C         ?C0068:
                                           ; SOURCE LINE # 558
013C 904200            MOV     DPTR,#04200H
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
0141 EF                MOV     A,R7
0142 54F8              ANL     A,#0F8H
0144 FF                MOV     R7,A
0145 EF                MOV     A,R7
0146 4442              ORL     A,#042H
0148 FF                MOV     R7,A
0149 904200            MOV     DPTR,#04200H
014C EF                MOV     A,R7
014D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
014E 8005              SJMP    ?C0061
                                           ; SOURCE LINE # 562
0150         ?C0069:
                                           ; SOURCE LINE # 563
0150 7F00              MOV     R7,#00H
0152 120000      R     LCALL   _?CyHalt
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 65  

                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
0155         ?C0061:
                                           ; SOURCE LINE # 568
0155 900000      R     MOV     DPTR,#freq
0158 E0                MOVX    A,@DPTR
0159 FF                MOV     R7,A
015A EF                MOV     A,R7
015B B40805            CJNE    A,#08H,?C0071
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
015E 120000      R     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 571
0161 8003              SJMP    ?C0072
0163         ?C0071:
                                           ; SOURCE LINE # 573
                                           ; SOURCE LINE # 574
0163 120000      R     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 575
0166         ?C0072:
                                           ; SOURCE LINE # 577
0166 900000      R     MOV     DPTR,#currentFreq
0169 E0                MOVX    A,@DPTR
016A FF                MOV     R7,A
016B 900000      R     MOV     DPTR,#nextFreq
016E E0                MOVX    A,@DPTR
016F FE                MOV     R6,A
0170 EE                MOV     A,R6
0171 C3                CLR     C
0172 9F                SUBB    A,R7
0173 5008              JNC     ?C0074
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 580
0175 900000      R     MOV     DPTR,#freq
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
017D         ?C0074:
017D 22                RET     
             ; FUNCTION _CyIMO_SetFreq (END)

             ; FUNCTION _CyIMO_SetSource (BEGIN)
                                           ; SOURCE LINE # 607
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 120000      E     LCALL   ?C?CCASE
000E 0000        R     DW      ?C0078
0010 00                DB      00H
0011 0000        R     DW      ?C0077
0013 01                DB      01H
0014 0000        R     DW      ?C0076
0016 02                DB      02H
0017 0000              DW      00H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 66  

0019 0000        R     DW      ?C0079
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
001B         ?C0076:
                                           ; SOURCE LINE # 612
001B 904000            MOV     DPTR,#04000H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 54BF              ANL     A,#0BFH
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
0026 904200            MOV     DPTR,#04200H
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 4420              ORL     A,#020H
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 614
0031 22                RET     
                                           ; SOURCE LINE # 616
0032         ?C0077:
                                           ; SOURCE LINE # 617
0032 904000            MOV     DPTR,#04000H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4440              ORL     A,#040H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
003D 904200            MOV     DPTR,#04200H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 4420              ORL     A,#020H
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
0048 22                RET     
                                           ; SOURCE LINE # 621
0049         ?C0078:
                                           ; SOURCE LINE # 622
0049 904200            MOV     DPTR,#04200H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 54DF              ANL     A,#0DFH
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 623
0054 22                RET     
                                           ; SOURCE LINE # 625
0055         ?C0079:
                                           ; SOURCE LINE # 627
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 67  

0055 7F00              MOV     R7,#00H
0057 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
005A         ?C0081:
005A 22                RET     
             ; FUNCTION _CyIMO_SetSource (END)

             ; FUNCTION CyIMO_EnableDoubler (BEGIN)
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 644
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4410              ORL     A,#010H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 645
000B 22                RET     
             ; FUNCTION CyIMO_EnableDoubler (END)

             ; FUNCTION CyIMO_DisableDoubler (BEGIN)
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 657
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
000B 22                RET     
             ; FUNCTION CyIMO_DisableDoubler (END)

             ; FUNCTION _CyMasterClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 685
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 688
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
000E 904005            MOV     DPTR,#04005H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54FC              ANL     A,#0FCH
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 68  

0019 FF                MOV     R7,A
001A 904005            MOV     DPTR,#04005H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
001F 22                RET     
             ; FUNCTION _CyMasterClk_SetSource (END)

             ; FUNCTION _CyMasterClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 715
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904004            MOV     DPTR,#04004H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
000F 22                RET     
             ; FUNCTION _CyMasterClk_SetDivider (END)

             ; FUNCTION _CyBusClk_Internal_SetDivider (BEGIN)
                                           ; SOURCE LINE # 732
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 735
0008 904014            MOV     DPTR,#04014H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54F0              ANL     A,#0F0H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 736
0013 904010            MOV     DPTR,#04010H
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 739
0018 904008            MOV     DPTR,#04008H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 4480              ORL     A,#080H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 742
0023 900000      R     MOV     DPTR,#divider
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 69  

002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 54FF              ANL     A,#0FFH
002E FF                MOV     R7,A
002F 904002            MOV     DPTR,#04002H
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 743
0034 900000      R     MOV     DPTR,#divider
0037 E0                MOVX    A,@DPTR
0038 FE                MOV     R6,A
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EE                MOV     A,R6
003D FF                MOV     R7,A
003E 7E00              MOV     R6,#00H
0040 904003            MOV     DPTR,#04003H
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 752
0045 904001            MOV     DPTR,#04001H
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 4401              ORL     A,#01H
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 753
0050 22                RET     
             ; FUNCTION _CyBusClk_Internal_SetDivider (END)

             ; FUNCTION _CyBusClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 774
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 780
0008 120000      E     LCALL   CyEnterCriticalSection
000B 900000      R     MOV     DPTR,#interruptState
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 783
0010 904007            MOV     DPTR,#04007H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 7E00              MOV     R6,#00H
0017 EF                MOV     A,R7
0018 7F00              MOV     R7,#00H
001A FE                MOV     R6,A
001B 900000      R     MOV     DPTR,#busClkDiv
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 70  

0023 900000      R     MOV     DPTR,#busClkDiv
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 904006            MOV     DPTR,#04006H
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 7C00              MOV     R4,#00H
0032 EE                MOV     A,R6
0033 4C                ORL     A,R4
0034 FE                MOV     R6,A
0035 EF                MOV     A,R7
0036 4D                ORL     A,R5
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#busClkDiv
003B EE                MOV     A,R6
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 786
0040 900000      R     MOV     DPTR,#divider
0043 E0                MOVX    A,@DPTR
0044 FE                MOV     R6,A
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 4E                ORL     A,R6
004A 600C              JZ      ?C0088
004C 900000      R     MOV     DPTR,#busClkDiv
004F E0                MOVX    A,@DPTR
0050 FE                MOV     R6,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 4E                ORL     A,R6
0056 705E              JNZ     ?C0087
0058         ?C0088:
                                           ; SOURCE LINE # 787
                                           ; SOURCE LINE # 789
0058 904004            MOV     DPTR,#04004H
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 900000      R     MOV     DPTR,#masterClkDiv
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
0062 900000      R     MOV     DPTR,#masterClkDiv
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 C3                CLR     C
0069 9407              SUBB    A,#07H
006B 5005              JNC     ?C0089
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 794
006D 7F07              MOV     R7,#07H
006F 120000      R     LCALL   _CyMasterClk_SetDivider
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 71  

                                           ; SOURCE LINE # 795
0072         ?C0089:
                                           ; SOURCE LINE # 797
0072 900000      R     MOV     DPTR,#divider
0075 E0                MOVX    A,@DPTR
0076 FE                MOV     R6,A
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A EF                MOV     A,R7
007B 4E                ORL     A,R6
007C 7018              JNZ     ?C0090
                                           ; SOURCE LINE # 798
                                           ; SOURCE LINE # 800
007E 904008            MOV     DPTR,#04008H
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 EF                MOV     A,R7
0084 4440              ORL     A,#040H
0086 FF                MOV     R7,A
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 801
0089 900000      R     MOV     DPTR,#divider
008C E0                MOVX    A,@DPTR
008D FE                MOV     R6,A
008E A3                INC     DPTR
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 802
0094 8016              SJMP    ?C0091
0096         ?C0090:
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 805
0096 900000      R     MOV     DPTR,#divider
0099 E0                MOVX    A,@DPTR
009A FE                MOV     R6,A
009B A3                INC     DPTR
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
009E 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 806
00A1 904008            MOV     DPTR,#04008H
00A4 E0                MOVX    A,@DPTR
00A5 FF                MOV     R7,A
00A6 EF                MOV     A,R7
00A7 54BF              ANL     A,#0BFH
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 807
00AC         ?C0091:
                                           ; SOURCE LINE # 810
00AC 900000      R     MOV     DPTR,#masterClkDiv
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 811
00B4 800B              SJMP    ?C0092
00B6         ?C0087:
                                           ; SOURCE LINE # 813
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 72  

                                           ; SOURCE LINE # 814
00B6 900000      R     MOV     DPTR,#divider
00B9 E0                MOVX    A,@DPTR
00BA FE                MOV     R6,A
00BB A3                INC     DPTR
00BC E0                MOVX    A,@DPTR
00BD FF                MOV     R7,A
00BE 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 815
00C1         ?C0092:
                                           ; SOURCE LINE # 817
00C1 900000      R     MOV     DPTR,#interruptState
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 818
00C9 22                RET     
             ; FUNCTION _CyBusClk_SetDivider (END)

             ; FUNCTION _CyCpuClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 842
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 843
                                           ; SOURCE LINE # 845
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
000F 904005            MOV     DPTR,#04005H
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 EE                MOV     A,R6
0015 540F              ANL     A,#0FH
0017 FE                MOV     R6,A
0018 EF                MOV     A,R7
0019 4E                ORL     A,R6
001A FF                MOV     R7,A
001B 904005            MOV     DPTR,#04005H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 846
0020 22                RET     
             ; FUNCTION _CyCpuClk_SetDivider (END)

             ; FUNCTION _CyUsbClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 864
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 73  

000E 904009            MOV     DPTR,#04009H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54FC              ANL     A,#0FCH
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904009            MOV     DPTR,#04009H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 868
001F 22                RET     
             ; FUNCTION _CyUsbClk_SetSource (END)

             ; FUNCTION CyILO_Start1K (BEGIN)
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
                                           ; SOURCE LINE # 885
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4402              ORL     A,#02H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 886
000B 22                RET     
             ; FUNCTION CyILO_Start1K (END)

             ; FUNCTION CyILO_Stop1K (BEGIN)
                                           ; SOURCE LINE # 903
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 906
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 907
000B 22                RET     
             ; FUNCTION CyILO_Stop1K (END)

             ; FUNCTION CyILO_Start100K (BEGIN)
                                           ; SOURCE LINE # 917
                                           ; SOURCE LINE # 918
                                           ; SOURCE LINE # 919
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 920
000B 22                RET     
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 74  

             ; FUNCTION CyILO_Start100K (END)

             ; FUNCTION CyILO_Stop100K (BEGIN)
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 932
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 933
000B 22                RET     
             ; FUNCTION CyILO_Stop100K (END)

             ; FUNCTION CyILO_Enable33K (BEGIN)
                                           ; SOURCE LINE # 946
                                           ; SOURCE LINE # 947
                                           ; SOURCE LINE # 949
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4420              ORL     A,#020H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 950
000B 22                RET     
             ; FUNCTION CyILO_Enable33K (END)

             ; FUNCTION CyILO_Disable33K (BEGIN)
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 964
                                           ; SOURCE LINE # 965
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54DF              ANL     A,#0DFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 966
000B 22                RET     
             ; FUNCTION CyILO_Disable33K (END)

             ; FUNCTION _CyILO_SetSource (BEGIN)
                                           ; SOURCE LINE # 982
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 983
                                           ; SOURCE LINE # 985
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 25E0              ADD     A,ACC
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 75  

000D 25E0              ADD     A,ACC
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 540C              ANL     A,#0CH
0013 FF                MOV     R7,A
0014 904000            MOV     DPTR,#04000H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A 54F3              ANL     A,#0F3H
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 4F                ORL     A,R7
001F FF                MOV     R7,A
0020 904000            MOV     DPTR,#04000H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 986
0025 22                RET     
             ; FUNCTION _CyILO_SetSource (END)

             ; FUNCTION _CyILO_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1003
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1008
0005 904300            MOV     DPTR,#04300H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#state
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
000F 900000      R     MOV     DPTR,#mode
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0103
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
0017 900000      R     MOV     DPTR,#state
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4410              ORL     A,#010H
001F FF                MOV     R7,A
0020 904300            MOV     DPTR,#04300H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1014
0025 800E              SJMP    ?C0104
0027         ?C0103:
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1017
0027 900000      R     MOV     DPTR,#state
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54EF              ANL     A,#0EFH
002F FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 76  

0030 904300            MOV     DPTR,#04300H
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1018
0035         ?C0104:
                                           ; SOURCE LINE # 1021
0035 900000      R     MOV     DPTR,#state
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 5410              ANL     A,#010H
003D FF                MOV     R7,A
003E 7E00              MOV     R6,#00H
0040 EE                MOV     A,R6
0041 C4                SWAP    A
0042 F8                MOV     R0,A
0043 54F0              ANL     A,#0F0H
0045 C8                XCH     A,R0
0046 68                XRL     A,R0
0047 FE                MOV     R6,A
0048 EF                MOV     A,R7
0049 C4                SWAP    A
004A 540F              ANL     A,#0FH
004C 48                ORL     A,R0
004D FF                MOV     R7,A
                                           ; SOURCE LINE # 1022
004E         ?C0105:
004E 22                RET     
             ; FUNCTION _CyILO_SetPowerMode (END)

             ; FUNCTION CyXTAL_32KHZ_Start (BEGIN)
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
                                           ; SOURCE LINE # 1036
0000 90430A            MOV     DPTR,#0430AH
0003 74F3              MOV     A,#0F3H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1037
0006 904698            MOV     DPTR,#04698H
0009 7403              MOV     A,#03H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1038
000C 904309            MOV     DPTR,#04309H
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 54F3              ANL     A,#0F3H
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 4404              ORL     A,#04H
0018 FF                MOV     R7,A
0019 904309            MOV     DPTR,#04309H
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1042
001E 904308            MOV     DPTR,#04308H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 4404              ORL     A,#04H
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 77  

0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1046
0029 904308            MOV     DPTR,#04308H
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 4401              ORL     A,#01H
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1048
0034 900000      R     MOV     DPTR,#i
0037 7403              MOV     A,#03H
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B 74E8              MOV     A,#0E8H
003D F0                MOVX    @DPTR,A
003E         ?C0106:
003E 900000      R     MOV     DPTR,#i
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 D3                SETB    C
0047 EF                MOV     A,R7
0048 9400              SUBB    A,#00H
004A EE                MOV     A,R6
004B 9400              SUBB    A,#00H
004D 4023              JC      ?C0110
                                           ; SOURCE LINE # 1049
                                           ; SOURCE LINE # 1050
004F 120000      R     LCALL   CyXTAL_32KHZ_ReadStatus
0052 7E00              MOV     R6,#00H
0054 EF                MOV     A,R7
0055 30E506            JNB     ACC.5,?C0109
                                           ; SOURCE LINE # 1051
                                           ; SOURCE LINE # 1053
0058 7F00              MOV     R7,#00H
005A 120000      R     LCALL   _CyXTAL_32KHZ_SetPowerMode
                                           ; SOURCE LINE # 1055
005D 22                RET     
                                           ; SOURCE LINE # 1056
005E         ?C0109:
                                           ; SOURCE LINE # 1057
005E 7F01              MOV     R7,#01H
0060 7E00              MOV     R6,#00H
0062 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1058
0065 900000      R     MOV     DPTR,#i
0068 74FF              MOV     A,#0FFH
006A 75F0FF            MOV     B,#0FFH
006D 120000      E     LCALL   ?C?IILDX
0070 80CC              SJMP    ?C0106
                                           ; SOURCE LINE # 1059
0072         ?C0110:
0072 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Start (END)

             ; FUNCTION CyXTAL_32KHZ_Stop (BEGIN)
                                           ; SOURCE LINE # 1069
                                           ; SOURCE LINE # 1070
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 78  

                                           ; SOURCE LINE # 1071
0000 90430A            MOV     DPTR,#0430AH
0003 74F3              MOV     A,#0F3H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1072
0006 904698            MOV     DPTR,#04698H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1073
000B 904309            MOV     DPTR,#04309H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54F3              ANL     A,#0F3H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 4404              ORL     A,#04H
0017 FF                MOV     R7,A
0018 904309            MOV     DPTR,#04309H
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1075
001D 904308            MOV     DPTR,#04308H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 54FC              ANL     A,#0FCH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1078
0028 904308            MOV     DPTR,#04308H
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 54FB              ANL     A,#0FBH
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1080
0033 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Stop (END)

             ; FUNCTION CyXTAL_32KHZ_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1096
                                           ; SOURCE LINE # 1097
                                           ; SOURCE LINE # 1098
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5420              ANL     A,#020H
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 1099
0009         ?C0112:
0009 22                RET     
             ; FUNCTION CyXTAL_32KHZ_ReadStatus (END)

             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1118
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 79  

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1119
                                           ; SOURCE LINE # 1120
0005 904308            MOV     DPTR,#04308H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5402              ANL     A,#02H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 6004              JZ      ?C0113
0014 7F01              MOV     R7,#01H
0016 8002              SJMP    ?C0114
0018         ?C0113:
0018 7F00              MOV     R7,#00H
001A         ?C0114:
001A 900000      R     MOV     DPTR,#state
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
001F 90430A            MOV     DPTR,#0430AH
0022 74F3              MOV     A,#0F3H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1124
0025 900000      R     MOV     DPTR,#mode
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B 6401              XRL     A,#01H
002D 7033              JNZ     ?C0115
                                           ; SOURCE LINE # 1125
                                           ; SOURCE LINE # 1127
002F 904698            MOV     DPTR,#04698H
0032 7401              MOV     A,#01H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1128
0035 7F0A              MOV     R7,#0AH
0037 7E00              MOV     R6,#00H
0039 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1129
003C 904309            MOV     DPTR,#04309H
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 54F3              ANL     A,#0F3H
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 4408              ORL     A,#08H
0048 FF                MOV     R7,A
0049 904309            MOV     DPTR,#04309H
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1131
004E 7F14              MOV     R7,#014H
0050 7E00              MOV     R6,#00H
0052 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1132
0055 904308            MOV     DPTR,#04308H
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 80  

005A EF                MOV     A,R7
005B 4402              ORL     A,#02H
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1133
0060 802A              SJMP    ?C0116
0062         ?C0115:
                                           ; SOURCE LINE # 1135
                                           ; SOURCE LINE # 1137
0062 904698            MOV     DPTR,#04698H
0065 7406              MOV     A,#06H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1138
0068 7F0A              MOV     R7,#0AH
006A 7E00              MOV     R6,#00H
006C 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1139
006F 904309            MOV     DPTR,#04309H
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 54F3              ANL     A,#0F3H
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 4404              ORL     A,#04H
007B FF                MOV     R7,A
007C 904309            MOV     DPTR,#04309H
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1141
0081 904308            MOV     DPTR,#04308H
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 EF                MOV     A,R7
0087 54FD              ANL     A,#0FDH
0089 FF                MOV     R7,A
008A EF                MOV     A,R7
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1142
008C         ?C0116:
                                           ; SOURCE LINE # 1144
008C 900000      R     MOV     DPTR,#state
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
                                           ; SOURCE LINE # 1145
0091         ?C0117:
0091 22                RET     
             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (END)

             ; FUNCTION _CyXTAL_Start (BEGIN)
                                           ; SOURCE LINE # 1182
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1183
                                           ; SOURCE LINE # 1184
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1185
000A 900000      R     MOV     DPTR,#wait
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 81  

000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#timeout
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1193
0014 904210            MOV     DPTR,#04210H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 4401              ORL     A,#01H
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1196
001F 900000      R     MOV     DPTR,#wait
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 D3                SETB    C
0026 9400              SUBB    A,#00H
0028 5003              JNC     $ + 5H
002A 020000      R     LJMP    ?C0118
                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1199
002D 904300            MOV     DPTR,#04300H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#iloEnableState
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1200
0037 904380            MOV     DPTR,#04380H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#pmTwCfg0Tmp
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1201
0041 904382            MOV     DPTR,#04382H
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#pmTwCfg2Tmp
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1204
004B 7F18              MOV     R7,#018H
004D 120000      E     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 1205
0050 900000      R     MOV     DPTR,#status
0053 7410              MOV     A,#010H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1208
0056         ?C0119:
0056 900000      R     MOV     DPTR,#timeout
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C D3                SETB    C
005D 9400              SUBB    A,#00H
005F 4047              JC      ?C0120
                                           ; SOURCE LINE # 1209
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 82  

                                           ; SOURCE LINE # 1211
0061 904210            MOV     DPTR,#04210H
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
                                           ; SOURCE LINE # 1214
0066 900000      R     MOV     DPTR,#count
0069 7404              MOV     A,#04H
006B F0                MOVX    @DPTR,A
006C         ?C0122:
006C 900000      R     MOV     DPTR,#count
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 D3                SETB    C
0073 9400              SUBB    A,#00H
0075 4013              JC      ?C0123
                                           ; SOURCE LINE # 1215
0077         ?C0125:
                                           ; SOURCE LINE # 1216
0077 7F01              MOV     R7,#01H
0079 120000      E     LCALL   _CyPmReadStatus
007C 7E00              MOV     R6,#00H
007E EF                MOV     A,R7
007F 30E0F5            JNB     ACC.0,?C0125
                                           ; SOURCE LINE # 1217
                                           ; SOURCE LINE # 1219
0082         ?C0126:
                                           ; SOURCE LINE # 1220
0082         ?C0124:
0082 900000      R     MOV     DPTR,#count
0085 E0                MOVX    A,@DPTR
0086 14                DEC     A
0087 F0                MOVX    @DPTR,A
0088 80E2              SJMP    ?C0122
008A         ?C0123:
                                           ; SOURCE LINE # 1227
008A 904210            MOV     DPTR,#04210H
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 5480              ANL     A,#080H
0092 FF                MOV     R7,A
0093 7E00              MOV     R6,#00H
0095 EF                MOV     A,R7
0096 4E                ORL     A,R6
0097 7007              JNZ     ?C0121
                                           ; SOURCE LINE # 1228
                                           ; SOURCE LINE # 1229
0099 900000      R     MOV     DPTR,#status
009C E4                CLR     A
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1230
009E 8008              SJMP    ?C0120
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1232
00A0         ?C0121:
00A0 900000      R     MOV     DPTR,#timeout
00A3 E0                MOVX    A,@DPTR
00A4 14                DEC     A
00A5 F0                MOVX    @DPTR,A
00A6 80AE              SJMP    ?C0119
00A8         ?C0120:
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 83  

                                           ; SOURCE LINE # 1236
00A8 900000      R     MOV     DPTR,#iloEnableState
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD EF                MOV     A,R7
00AE 5404              ANL     A,#04H
00B0 FF                MOV     R7,A
00B1 7E00              MOV     R6,#00H
00B3 EF                MOV     A,R7
00B4 4E                ORL     A,R6
00B5 7003              JNZ     ?C0128
                                           ; SOURCE LINE # 1237
                                           ; SOURCE LINE # 1238
00B7 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 1239
00BA         ?C0128:
                                           ; SOURCE LINE # 1240
00BA 900000      R     MOV     DPTR,#pmTwCfg0Tmp
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
00BF 904380            MOV     DPTR,#04380H
00C2 EF                MOV     A,R7
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1241
00C4 900000      R     MOV     DPTR,#pmTwCfg2Tmp
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 904382            MOV     DPTR,#04382H
00CC EF                MOV     A,R7
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1242
00CE         ?C0118:
                                           ; SOURCE LINE # 1244
00CE 900000      R     MOV     DPTR,#status
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
                                           ; SOURCE LINE # 1245
00D3         ?C0129:
00D3 22                RET     
             ; FUNCTION _CyXTAL_Start (END)

             ; FUNCTION CyXTAL_Stop (BEGIN)
                                           ; SOURCE LINE # 1255
                                           ; SOURCE LINE # 1256
                                           ; SOURCE LINE # 1258
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1259
000B 22                RET     
             ; FUNCTION CyXTAL_Stop (END)

             ; FUNCTION CyXTAL_EnableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1271
                                           ; SOURCE LINE # 1273
0000 904210            MOV     DPTR,#04210H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 84  

0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1274
000B 22                RET     
             ; FUNCTION CyXTAL_EnableErrStatus (END)

             ; FUNCTION CyXTAL_DisableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
                                           ; SOURCE LINE # 1288
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1289
000B 22                RET     
             ; FUNCTION CyXTAL_DisableErrStatus (END)

             ; FUNCTION CyXTAL_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1306
                                           ; SOURCE LINE # 1311
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5480              ANL     A,#080H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 6004              JZ      ?C0133
000F 7F01              MOV     R7,#01H
0011 8002              SJMP    ?C0134
0013         ?C0133:
0013 7F00              MOV     R7,#00H
0015         ?C0134:
                                           ; SOURCE LINE # 1312
0015         ?C0135:
0015 22                RET     
             ; FUNCTION CyXTAL_ReadStatus (END)

             ; FUNCTION CyXTAL_EnableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1327
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4440              ORL     A,#040H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 85  

000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1328
000B 22                RET     
             ; FUNCTION CyXTAL_EnableFaultRecovery (END)

             ; FUNCTION CyXTAL_DisableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1340
                                           ; SOURCE LINE # 1341
                                           ; SOURCE LINE # 1342
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54BF              ANL     A,#0BFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1343
000B 22                RET     
             ; FUNCTION CyXTAL_DisableFaultRecovery (END)

             ; FUNCTION _CyXTAL_SetStartup (BEGIN)
                                           ; SOURCE LINE # 1361
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1362
                                           ; SOURCE LINE # 1363
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 541F              ANL     A,#01FH
000D FF                MOV     R7,A
000E 904212            MOV     DPTR,#04212H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54E0              ANL     A,#0E0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904212            MOV     DPTR,#04212H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1365
001F 22                RET     
             ; FUNCTION _CyXTAL_SetStartup (END)

             ; FUNCTION _CyXTAL_SetFbVoltage (BEGIN)
                                           ; SOURCE LINE # 1380
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1381
                                           ; SOURCE LINE # 1382
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 540F              ANL     A,#0FH
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 86  

000D FF                MOV     R7,A
000E 904213            MOV     DPTR,#04213H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54F0              ANL     A,#0F0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904213            MOV     DPTR,#04213H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1384
001F 22                RET     
             ; FUNCTION _CyXTAL_SetFbVoltage (END)

             ; FUNCTION _CyXTAL_SetWdVoltage (BEGIN)
                                           ; SOURCE LINE # 1398
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1399
                                           ; SOURCE LINE # 1401
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 5470              ANL     A,#070H
0012 FF                MOV     R7,A
0013 904213            MOV     DPTR,#04213H
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 548F              ANL     A,#08FH
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904213            MOV     DPTR,#04213H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1402
0024 22                RET     
             ; FUNCTION _CyXTAL_SetWdVoltage (END)

             ; FUNCTION _?CyHalt (BEGIN)
                                           ; SOURCE LINE # 1414
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1416
                                           ; SOURCE LINE # 1417
                                           ; SOURCE LINE # 1419
0008         ?C0141:
                                           ; SOURCE LINE # 1426
0008 9046EA            MOV     DPTR,#046EAH
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 87  

000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1428
000E 900001            MOV     DPTR,#01H
0011 120000      E     LCALL   ?C?ADDXBP
0014 22                RET     
             ; FUNCTION _?CyHalt (END)

             ; FUNCTION CySoftwareReset (BEGIN)
                                           ; SOURCE LINE # 1438
                                           ; SOURCE LINE # 1439
                                           ; SOURCE LINE # 1440
0000 9046F6            MOV     DPTR,#046F6H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1441
000B 22                RET     
             ; FUNCTION CySoftwareReset (END)

             ; FUNCTION _?CyDelay (BEGIN)
                                           ; SOURCE LINE # 1459
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
0009         ?C0144:
                                           ; SOURCE LINE # 1461
0009 850083      E     MOV     DPH,?C_XBP
000C 850082      E     MOV     DPL,?C_XBP+01H
000F 120000      E     LCALL   ?C?LLDXDATA
0012 D3                SETB    C
0013 EF                MOV     A,R7
0014 9400              SUBB    A,#00H
0016 EE                MOV     A,R6
0017 9480              SUBB    A,#080H
0019 402F              JC      ?C0145
                                           ; SOURCE LINE # 1462
                                           ; SOURCE LINE # 1467
001B 900000      R     MOV     DPTR,#cydelay_32k_ms
001E 120000      E     LCALL   ?C?LLDXDATA
0021 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1468
0024 850083      E     MOV     DPH,?C_XBP
0027 850082      E     MOV     DPL,?C_XBP+01H
002A C083              PUSH    DPH
002C C082              PUSH    DPL
002E 120000      E     LCALL   ?C?LLDXDATA
0031 EF                MOV     A,R7
0032 2400              ADD     A,#00H
0034 FF                MOV     R7,A
0035 EE                MOV     A,R6
0036 3480              ADDC    A,#080H
0038 FE                MOV     R6,A
0039 ED                MOV     A,R5
003A 34FF              ADDC    A,#0FFH
003C FD                MOV     R5,A
003D EC                MOV     A,R4
003E 34FF              ADDC    A,#0FFH
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 88  

0040 FC                MOV     R4,A
0041 D082              POP     DPL
0043 D083              POP     DPH
0045 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1469
0048 80BF              SJMP    ?C0144
004A         ?C0145:
                                           ; SOURCE LINE # 1471
004A 900000      R     MOV     DPTR,#cydelay_freq_khz
004D 120000      E     LCALL   ?C?LLDXDATA
0050 850083      E     MOV     DPH,?C_XBP
0053 850082      E     MOV     DPL,?C_XBP+01H
0056 120000      E     LCALL   ?C?LLDXDATA0
0059 120000      E     LCALL   ?C?LMUL
005C 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1472
005F 900004            MOV     DPTR,#04H
0062 120000      E     LCALL   ?C?ADDXBP
0065 22                RET     
             ; FUNCTION _?CyDelay (END)

             ; FUNCTION _?CyDelayFreq (BEGIN)
                                           ; SOURCE LINE # 1520
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1522
0009 850083      E     MOV     DPH,?C_XBP
000C 850082      E     MOV     DPL,?C_XBP+01H
000F 120000      E     LCALL   ?C?LLDXDATA
0012 EF                MOV     A,R7
0013 4E                ORL     A,R6
0014 6011              JZ      ?C0147
                                           ; SOURCE LINE # 1523
                                           ; SOURCE LINE # 1524
0016 850083      E     MOV     DPH,?C_XBP
0019 850082      E     MOV     DPL,?C_XBP+01H
001C 120000      E     LCALL   ?C?LLDXDATA
001F 900000      R     MOV     DPTR,#cydelay_freq_hz
0022 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1525
0025 800E              SJMP    ?C0148
0027         ?C0147:
                                           ; SOURCE LINE # 1527
                                           ; SOURCE LINE # 1528
0027 7F00              MOV     R7,#00H
0029 7E36              MOV     R6,#036H
002B 7D6E              MOV     R5,#06EH
002D 7C01              MOV     R4,#01H
002F 900000      R     MOV     DPTR,#cydelay_freq_hz
0032 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1529
0035         ?C0148:
                                           ; SOURCE LINE # 1531
0035 900000      R     MOV     DPTR,#cydelay_freq_hz
0038 120000      E     LCALL   ?C?LLDXDATA
003B EF                MOV     A,R7
003C 243F              ADD     A,#03FH
003E FF                MOV     R7,A
003F EE                MOV     A,R6
0040 3442              ADDC    A,#042H
0042 FE                MOV     R6,A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 89  

0043 ED                MOV     A,R5
0044 340F              ADDC    A,#0FH
0046 FD                MOV     R5,A
0047 EC                MOV     A,R4
0048 3400              ADDC    A,#00H
004A FC                MOV     R4,A
004B 7B40              MOV     R3,#040H
004D 7A42              MOV     R2,#042H
004F 790F              MOV     R1,#0FH
0051 7800              MOV     R0,#00H
0053 120000      E     LCALL   ?C?ULDIV
0056 900000      R     MOV     DPTR,#cydelay_freq_mhz
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1532
005B 900000      R     MOV     DPTR,#cydelay_freq_hz
005E 120000      E     LCALL   ?C?LLDXDATA
0061 EF                MOV     A,R7
0062 24E7              ADD     A,#0E7H
0064 FF                MOV     R7,A
0065 EE                MOV     A,R6
0066 3403              ADDC    A,#03H
0068 FE                MOV     R6,A
0069 ED                MOV     A,R5
006A 3400              ADDC    A,#00H
006C FD                MOV     R5,A
006D EC                MOV     A,R4
006E 3400              ADDC    A,#00H
0070 FC                MOV     R4,A
0071 7BE8              MOV     R3,#0E8H
0073 7A03              MOV     R2,#03H
0075 7900              MOV     R1,#00H
0077 7800              MOV     R0,#00H
0079 120000      E     LCALL   ?C?ULDIV
007C 900000      R     MOV     DPTR,#cydelay_freq_khz
007F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1533
0082 7F00              MOV     R7,#00H
0084 7E80              MOV     R6,#080H
0086 7D00              MOV     R5,#00H
0088 7C00              MOV     R4,#00H
008A 900000      R     MOV     DPTR,#cydelay_freq_khz
008D 120000      E     LCALL   ?C?LLDXDATA0
0090 120000      E     LCALL   ?C?LMUL
0093 900000      R     MOV     DPTR,#cydelay_32k_ms
0096 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1534
0099 900004            MOV     DPTR,#04H
009C 120000      E     LCALL   ?C?ADDXBP
009F 22                RET     
             ; FUNCTION _?CyDelayFreq (END)

             ; FUNCTION _CyWdtStart (BEGIN)
                                           ; SOURCE LINE # 1578
0000 900000      R     MOV     DPTR,#ticks
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#lpMode
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1579
                                           ; SOURCE LINE # 1581
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 90  

000A 900000      R     MOV     DPTR,#ticks
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 5403              ANL     A,#03H
0012 FF                MOV     R7,A
0013 904383            MOV     DPTR,#04383H
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 54FC              ANL     A,#0FCH
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904383            MOV     DPTR,#04383H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1584
0024 904383            MOV     DPTR,#04383H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4480              ORL     A,#080H
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1585
002F 904383            MOV     DPTR,#04383H
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 547F              ANL     A,#07FH
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1589
003A 900000      R     MOV     DPTR,#lpMode
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 C4                SWAP    A
0041 33                RLC     A
0042 54E0              ANL     A,#0E0H
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 5460              ANL     A,#060H
0048 FF                MOV     R7,A
0049 904383            MOV     DPTR,#04383H
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E EE                MOV     A,R6
004F 549F              ANL     A,#09FH
0051 FE                MOV     R6,A
0052 EF                MOV     A,R7
0053 4E                ORL     A,R6
0054 FF                MOV     R7,A
0055 904383            MOV     DPTR,#04383H
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1592
005A 904383            MOV     DPTR,#04383H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 91  

005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 4410              ORL     A,#010H
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1593
0065 22                RET     
             ; FUNCTION _CyWdtStart (END)

             ; FUNCTION CyWdtClear (BEGIN)
                                           ; SOURCE LINE # 1603
                                           ; SOURCE LINE # 1604
                                           ; SOURCE LINE # 1605
0000 904384            MOV     DPTR,#04384H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1606
0006 22                RET     
             ; FUNCTION CyWdtClear (END)

             ; FUNCTION _CyVdLvDigitEnable (BEGIN)
                                           ; SOURCE LINE # 1647
0000 900000      R     MOV     DPTR,#reset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#threshold
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1648
                                           ; SOURCE LINE # 1652
000A 120000      E     LCALL   CyEnterCriticalSection
000D 900000      R     MOV     DPTR,#interruptState
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1655
0012 9044C0            MOV     DPTR,#044C0H
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 5401              ANL     A,#01H
001A FF                MOV     R7,A
001B E4                CLR     A
001C FC                MOV     R4,A
001D FD                MOV     R5,A
001E FE                MOV     R6,A
001F 900000      R     MOV     DPTR,#intRegTmp
0022 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1658
0025 9044C8            MOV     DPTR,#044C8H
0028 7401              MOV     A,#01H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1660
002B 9046F7            MOV     DPTR,#046F7H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 54BF              ANL     A,#0BFH
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 92  

                                           ; SOURCE LINE # 1663
0036 9046F4            MOV     DPTR,#046F4H
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 54F0              ANL     A,#0F0H
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#threshold
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 EE                MOV     A,R6
0045 540F              ANL     A,#0FH
0047 FE                MOV     R6,A
0048 EE                MOV     A,R6
0049 4F                ORL     A,R7
004A FF                MOV     R7,A
004B 9046F4            MOV     DPTR,#046F4H
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1664
0050 9046F5            MOV     DPTR,#046F5H
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 4401              ORL     A,#01H
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1667
005B 7F01              MOV     R7,#01H
005D 7E00              MOV     R6,#00H
005F 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1669
0062 7F01              MOV     R7,#01H
0064 120000      R     LCALL   _CyVdStickyStatus
                                           ; SOURCE LINE # 1671
0067 900000      R     MOV     DPTR,#reset
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D 600D              JZ      ?C0152
                                           ; SOURCE LINE # 1672
                                           ; SOURCE LINE # 1673
006F 9046F7            MOV     DPTR,#046F7H
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 4440              ORL     A,#040H
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1674
007A 800B              SJMP    ?C0153
007C         ?C0152:
                                           ; SOURCE LINE # 1676
                                           ; SOURCE LINE # 1677
007C 9046F7            MOV     DPTR,#046F7H
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 54BF              ANL     A,#0BFH
0084 FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 93  

0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1678
0087         ?C0153:
                                           ; SOURCE LINE # 1681
0087 9044D8            MOV     DPTR,#044D8H
008A 7401              MOV     A,#01H
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1684
008D 900000      R     MOV     DPTR,#intRegTmp
0090 120000      E     LCALL   ?C?LLDXDATA
0093 9044C0            MOV     DPTR,#044C0H
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1686
0098 900000      R     MOV     DPTR,#interruptState
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1687
00A0 22                RET     
             ; FUNCTION _CyVdLvDigitEnable (END)

             ; FUNCTION _CyVdLvAnalogEnable (BEGIN)
                                           ; SOURCE LINE # 1727
0000 900000      R     MOV     DPTR,#reset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#threshold
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1728
                                           ; SOURCE LINE # 1732
000A 120000      E     LCALL   CyEnterCriticalSection
000D 900000      R     MOV     DPTR,#interruptState
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1735
0012 9044C0            MOV     DPTR,#044C0H
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 5401              ANL     A,#01H
001A FF                MOV     R7,A
001B E4                CLR     A
001C FC                MOV     R4,A
001D FD                MOV     R5,A
001E FE                MOV     R6,A
001F 900000      R     MOV     DPTR,#intRegTmp
0022 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1738
0025 9044C8            MOV     DPTR,#044C8H
0028 7401              MOV     A,#01H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1740
002B 9046F7            MOV     DPTR,#046F7H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 547F              ANL     A,#07FH
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 94  

0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1742
0036 900000      R     MOV     DPTR,#threshold
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C C4                SWAP    A
003D 54F0              ANL     A,#0F0H
003F FF                MOV     R7,A
0040 9046F4            MOV     DPTR,#046F4H
0043 E0                MOVX    A,@DPTR
0044 FE                MOV     R6,A
0045 EE                MOV     A,R6
0046 540F              ANL     A,#0FH
0048 FE                MOV     R6,A
0049 EF                MOV     A,R7
004A 4E                ORL     A,R6
004B FF                MOV     R7,A
004C 9046F4            MOV     DPTR,#046F4H
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1743
0051 9046F5            MOV     DPTR,#046F5H
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 4402              ORL     A,#02H
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1746
005C 7F01              MOV     R7,#01H
005E 7E00              MOV     R6,#00H
0060 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1748
0063 7F02              MOV     R7,#02H
0065 120000      R     LCALL   _CyVdStickyStatus
                                           ; SOURCE LINE # 1750
0068 900000      R     MOV     DPTR,#reset
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D EF                MOV     A,R7
006E 600D              JZ      ?C0155
                                           ; SOURCE LINE # 1751
                                           ; SOURCE LINE # 1752
0070 9046F7            MOV     DPTR,#046F7H
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 EF                MOV     A,R7
0076 4480              ORL     A,#080H
0078 FF                MOV     R7,A
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1753
007B 800B              SJMP    ?C0156
007D         ?C0155:
                                           ; SOURCE LINE # 1755
                                           ; SOURCE LINE # 1756
007D 9046F7            MOV     DPTR,#046F7H
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 95  

0083 547F              ANL     A,#07FH
0085 FF                MOV     R7,A
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1757
0088         ?C0156:
                                           ; SOURCE LINE # 1760
0088 9044D8            MOV     DPTR,#044D8H
008B 7401              MOV     A,#01H
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1763
008E 900000      R     MOV     DPTR,#intRegTmp
0091 120000      E     LCALL   ?C?LLDXDATA
0094 9044C0            MOV     DPTR,#044C0H
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1765
0099 900000      R     MOV     DPTR,#interruptState
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
009E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1766
00A1 22                RET     
             ; FUNCTION _CyVdLvAnalogEnable (END)

             ; FUNCTION CyVdLvDigitDisable (BEGIN)
                                           ; SOURCE LINE # 1781
                                           ; SOURCE LINE # 1782
                                           ; SOURCE LINE # 1783
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1784
000B 9046F7            MOV     DPTR,#046F7H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54BF              ANL     A,#0BFH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1785
0016 7F01              MOV     R7,#01H
0018 120000      R     LCALL   _CyVdStickyStatus
001B         ?C0158:
                                           ; SOURCE LINE # 1787
001B 7F01              MOV     R7,#01H
001D 120000      R     LCALL   _CyVdStickyStatus
0020 7E00              MOV     R6,#00H
0022 EF                MOV     A,R7
0023 20E0F5            JB      ACC.0,?C0158
                                           ; SOURCE LINE # 1788
                                           ; SOURCE LINE # 1790
0026         ?C0159:
                                           ; SOURCE LINE # 1791
0026         ?C0160:
0026 22                RET     
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 96  

             ; FUNCTION CyVdLvDigitDisable (END)

             ; FUNCTION CyVdLvAnalogDisable (BEGIN)
                                           ; SOURCE LINE # 1806
                                           ; SOURCE LINE # 1807
                                           ; SOURCE LINE # 1808
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1809
000B 9046F7            MOV     DPTR,#046F7H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 547F              ANL     A,#07FH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
0016         ?C0161:
                                           ; SOURCE LINE # 1810
0016 7F02              MOV     R7,#02H
0018 120000      R     LCALL   _CyVdStickyStatus
001B 7E00              MOV     R6,#00H
001D EF                MOV     A,R7
001E 20E1F5            JB      ACC.1,?C0161
                                           ; SOURCE LINE # 1811
                                           ; SOURCE LINE # 1813
0021         ?C0162:
                                           ; SOURCE LINE # 1814
0021         ?C0163:
0021 22                RET     
             ; FUNCTION CyVdLvAnalogDisable (END)

             ; FUNCTION CyVdHvAnalogEnable (BEGIN)
                                           ; SOURCE LINE # 1829
                                           ; SOURCE LINE # 1830
                                           ; SOURCE LINE # 1834
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1837
0008 9044C0            MOV     DPTR,#044C0H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 5401              ANL     A,#01H
0010 FF                MOV     R7,A
0011 E4                CLR     A
0012 FC                MOV     R4,A
0013 FD                MOV     R5,A
0014 FE                MOV     R6,A
0015 900000      R     MOV     DPTR,#intRegTmp
0018 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1840
001B 9044C8            MOV     DPTR,#044C8H
001E 7401              MOV     A,#01H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 97  

0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1842
0021 9046F7            MOV     DPTR,#046F7H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 547F              ANL     A,#07FH
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1844
002C 9046F5            MOV     DPTR,#046F5H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 4404              ORL     A,#04H
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1847
0037 7F01              MOV     R7,#01H
0039 7E00              MOV     R6,#00H
003B 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1849
003E 7F04              MOV     R7,#04H
0040 120000      R     LCALL   _CyVdStickyStatus
                                           ; SOURCE LINE # 1852
0043 9044D8            MOV     DPTR,#044D8H
0046 7401              MOV     A,#01H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1855
0049 900000      R     MOV     DPTR,#intRegTmp
004C 120000      E     LCALL   ?C?LLDXDATA
004F 9044C0            MOV     DPTR,#044C0H
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1857
0054 900000      R     MOV     DPTR,#interruptState
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1858
005C 22                RET     
             ; FUNCTION CyVdHvAnalogEnable (END)

             ; FUNCTION CyVdHvAnalogDisable (BEGIN)
                                           ; SOURCE LINE # 1873
                                           ; SOURCE LINE # 1874
                                           ; SOURCE LINE # 1875
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
000B         ?C0165:
                                           ; SOURCE LINE # 1876
000B 7F04              MOV     R7,#04H
000D 120000      R     LCALL   _CyVdStickyStatus
0010 7E00              MOV     R6,#00H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 98  

0012 EF                MOV     A,R7
0013 20E2F5            JB      ACC.2,?C0165
                                           ; SOURCE LINE # 1877
                                           ; SOURCE LINE # 1879
0016         ?C0166:
                                           ; SOURCE LINE # 1880
0016         ?C0167:
0016 22                RET     
             ; FUNCTION CyVdHvAnalogDisable (END)

             ; FUNCTION _CyVdStickyStatus (BEGIN)
                                           ; SOURCE LINE # 1909
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1910
                                           ; SOURCE LINE # 1915
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#interruptState
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1917
000D 900000      R     MOV     DPTR,#interruptStatus
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 9046FA            MOV     DPTR,#046FAH
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 EF                MOV     A,R7
0018 4E                ORL     A,R6
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#interruptStatus
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1918
001F 900000      R     MOV     DPTR,#interruptStatus
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 5407              ANL     A,#07H
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#tmpStatus
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1919
002D 900000      R     MOV     DPTR,#interruptStatus
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#mask
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 F4                CPL     A
0039 FE                MOV     R6,A
003A EF                MOV     A,R7
003B 5E                ANL     A,R6
003C FF                MOV     R7,A
003D 900000      R     MOV     DPTR,#interruptStatus
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1921
0042 900000      R     MOV     DPTR,#interruptState
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 99  

0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1923
004A 900000      R     MOV     DPTR,#tmpStatus
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
                                           ; SOURCE LINE # 1924
004F         ?C0168:
004F 22                RET     
             ; FUNCTION _CyVdStickyStatus (END)

             ; FUNCTION CyVdRealTimeStatus (BEGIN)
                                           ; SOURCE LINE # 1949
                                           ; SOURCE LINE # 1950
                                           ; SOURCE LINE # 1954
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1955
0008 9046FC            MOV     DPTR,#046FCH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 5407              ANL     A,#07H
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#vdFlagsState
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1956
0016 900000      R     MOV     DPTR,#interruptState
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1958
001E 900000      R     MOV     DPTR,#vdFlagsState
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
                                           ; SOURCE LINE # 1959
0023         ?C0169:
0023 22                RET     
             ; FUNCTION CyVdRealTimeStatus (END)

             ; FUNCTION CyDisableInts (BEGIN)
                                           ; SOURCE LINE # 1972
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1977
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1982
0008 9044C8            MOV     DPTR,#044C8H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D E4                CLR     A
000E FC                MOV     R4,A
000F FD                MOV     R5,A
0010 FE                MOV     R6,A
0011 900000      R     MOV     DPTR,#intState
0014 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 100 

                                           ; SOURCE LINE # 1983
0017 900000      R     MOV     DPTR,#intState
001A 120000      E     LCALL   ?C?LLDXDATA
001D C004              PUSH    AR4
001F C005              PUSH    AR5
0021 C006              PUSH    AR6
0023 C007              PUSH    AR7
0025 9044C9            MOV     DPTR,#044C9H
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A E4                CLR     A
002B FC                MOV     R4,A
002C FD                MOV     R5,A
002D FE                MOV     R6,A
002E 7808              MOV     R0,#08H
0030 120000      E     LCALL   ?C?LSHL
0033 A804              MOV     R0,AR4
0035 A905              MOV     R1,AR5
0037 AA06              MOV     R2,AR6
0039 AB07              MOV     R3,AR7
003B D007              POP     AR7
003D D006              POP     AR6
003F D005              POP     AR5
0041 D004              POP     AR4
0043 120000      E     LCALL   ?C?LOR
0046 900000      R     MOV     DPTR,#intState
0049 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1984
004C 900000      R     MOV     DPTR,#intState
004F 120000      E     LCALL   ?C?LLDXDATA
0052 C004              PUSH    AR4
0054 C005              PUSH    AR5
0056 C006              PUSH    AR6
0058 C007              PUSH    AR7
005A 9044CA            MOV     DPTR,#044CAH
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F E4                CLR     A
0060 FC                MOV     R4,A
0061 FD                MOV     R5,A
0062 FE                MOV     R6,A
0063 7810              MOV     R0,#010H
0065 120000      E     LCALL   ?C?LSHL
0068 A804              MOV     R0,AR4
006A A905              MOV     R1,AR5
006C AA06              MOV     R2,AR6
006E AB07              MOV     R3,AR7
0070 D007              POP     AR7
0072 D006              POP     AR6
0074 D005              POP     AR5
0076 D004              POP     AR4
0078 120000      E     LCALL   ?C?LOR
007B 900000      R     MOV     DPTR,#intState
007E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1985
0081 900000      R     MOV     DPTR,#intState
0084 120000      E     LCALL   ?C?LLDXDATA
0087 C004              PUSH    AR4
0089 C005              PUSH    AR5
008B C006              PUSH    AR6
008D C007              PUSH    AR7
008F 9044CB            MOV     DPTR,#044CBH
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 101 

0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 E4                CLR     A
0095 FC                MOV     R4,A
0096 FD                MOV     R5,A
0097 FE                MOV     R6,A
0098 7818              MOV     R0,#018H
009A 120000      E     LCALL   ?C?LSHL
009D A804              MOV     R0,AR4
009F A905              MOV     R1,AR5
00A1 AA06              MOV     R2,AR6
00A3 AB07              MOV     R3,AR7
00A5 D007              POP     AR7
00A7 D006              POP     AR6
00A9 D005              POP     AR5
00AB D004              POP     AR4
00AD 120000      E     LCALL   ?C?LOR
00B0 900000      R     MOV     DPTR,#intState
00B3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1989
00B6 9044C8            MOV     DPTR,#044C8H
00B9 74FF              MOV     A,#0FFH
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1990
00BC 9044C9            MOV     DPTR,#044C9H
00BF 74FF              MOV     A,#0FFH
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1991
00C2 9044CA            MOV     DPTR,#044CAH
00C5 74FF              MOV     A,#0FFH
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1992
00C8 9044CB            MOV     DPTR,#044CBH
00CB 74FF              MOV     A,#0FFH
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2004
00CE 900000      R     MOV     DPTR,#interruptState
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 2006
00D6 900000      R     MOV     DPTR,#intState
00D9 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 2007
00DC         ?C0170:
00DC 22                RET     
             ; FUNCTION CyDisableInts (END)

             ; FUNCTION _CyEnableInts (BEGIN)
                                           ; SOURCE LINE # 2019
0000 900000      R     MOV     DPTR,#mask
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2020
                                           ; SOURCE LINE # 2024
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2029
000E 900000      R     MOV     DPTR,#mask
0011 120000      E     LCALL   ?C?LLDXDATA
0014 7818              MOV     R0,#018H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 102 

0016 120000      E     LCALL   ?C?ULSHR
0019 9044C3            MOV     DPTR,#044C3H
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2030
001E 900000      R     MOV     DPTR,#mask
0021 120000      E     LCALL   ?C?LLDXDATA
0024 7810              MOV     R0,#010H
0026 120000      E     LCALL   ?C?ULSHR
0029 9044C2            MOV     DPTR,#044C2H
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2031
002E 900000      R     MOV     DPTR,#mask
0031 120000      E     LCALL   ?C?LLDXDATA
0034 7808              MOV     R0,#08H
0036 120000      E     LCALL   ?C?ULSHR
0039 9044C1            MOV     DPTR,#044C1H
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2032
003E 900000      R     MOV     DPTR,#mask
0041 120000      E     LCALL   ?C?LLDXDATA
0044 9044C0            MOV     DPTR,#044C0H
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2040
0049 900000      R     MOV     DPTR,#interruptState
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 2042
0051 22                RET     
             ; FUNCTION _CyEnableInts (END)

             ; FUNCTION IntDefaultHandler (BEGIN)
                                           ; SOURCE LINE # 2304
0000         ?C0172:
                                           ; SOURCE LINE # 2310
                                           ; SOURCE LINE # 2311
                                           ; SOURCE LINE # 2316
0000 80FE              SJMP    ?C0172
0002 32                RETI    
             ; FUNCTION IntDefaultHandler (END)

             ; FUNCTION CyIntInitVectors (BEGIN)
                                           ; SOURCE LINE # 2328
                                           ; SOURCE LINE # 2329
                                           ; SOURCE LINE # 2332
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0175:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 503D              JNC     ?C0178
                                           ; SOURCE LINE # 2333
                                           ; SOURCE LINE # 2334
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 103 

0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 7E02              MOV     R6,#02H
0017 EF                MOV     A,R7
0018 8EF0              MOV     B,R6
001A A4                MUL     AB
001B FF                MOV     R7,A
001C AEF0              MOV     R6,B
001E EF                MOV     A,R7
001F 2400              ADD     A,#00H
0021 FF                MOV     R7,A
0022 EE                MOV     A,R6
0023 3444              ADDC    A,#044H
0025 FE                MOV     R6,A
0026 AA06              MOV     R2,AR6
0028 A907              MOV     R1,AR7
002A 7B01              MOV     R3,#01H
002C C003              PUSH    AR3
002E C002              PUSH    AR2
0030 C001              PUSH    AR1
0032 7BFF              MOV     R3,#0FFH
0034 7A00        R     MOV     R2,#HIGH IntDefaultHandler
0036 7900        R     MOV     R1,#LOW IntDefaultHandler
0038 AC02              MOV     R4,AR2
003A AD01              MOV     R5,AR1
003C D001              POP     AR1
003E D002              POP     AR2
0040 D003              POP     AR3
0042 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 2335
0045 900000      R     MOV     DPTR,#i
0048 E0                MOVX    A,@DPTR
0049 04                INC     A
004A F0                MOVX    @DPTR,A
004B 80B8              SJMP    ?C0175
                                           ; SOURCE LINE # 2336
004D         ?C0178:
004D 22                RET     
             ; FUNCTION CyIntInitVectors (END)

             ; FUNCTION _CyIntSetVector (BEGIN)
                                           ; SOURCE LINE # 2352
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2353
                                           ; SOURCE LINE # 2354
                                           ; SOURCE LINE # 2356
000D 900000      R     MOV     DPTR,#number
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 D3                SETB    C
0014 941F              SUBB    A,#01FH
0016 5003              JNC     ?C0180
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 104 

0018 D3                SETB    C
0019 8001              SJMP    ?C0181
001B         ?C0180:
001B C3                CLR     C
001C         ?C0181:
001C 4005              JC      ?C0179
001E 7F00              MOV     R7,#00H
0020 120000      R     LCALL   _?CyHalt
0023         ?C0179:
                                           ; SOURCE LINE # 2359
0023 900000      R     MOV     DPTR,#number
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 541F              ANL     A,#01FH
002B FF                MOV     R7,A
002C 7E00              MOV     R6,#00H
002E EF                MOV     A,R7
002F 25E0              ADD     A,ACC
0031 FF                MOV     R7,A
0032 EE                MOV     A,R6
0033 33                RLC     A
0034 FE                MOV     R6,A
0035 EF                MOV     A,R7
0036 2400              ADD     A,#00H
0038 FF                MOV     R7,A
0039 EE                MOV     A,R6
003A 3444              ADDC    A,#044H
003C FE                MOV     R6,A
003D AA06              MOV     R2,AR6
003F A907              MOV     R1,AR7
0041 7B01              MOV     R3,#01H
0043 120000      E     LCALL   _cyread16_nodpx
0046 900000      R     MOV     DPTR,#oldIsr
0049 EE                MOV     A,R6
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2363
004E 900000      R     MOV     DPTR,#number
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 7E02              MOV     R6,#02H
0055 EF                MOV     A,R7
0056 8EF0              MOV     B,R6
0058 A4                MUL     AB
0059 FF                MOV     R7,A
005A AEF0              MOV     R6,B
005C EF                MOV     A,R7
005D 2400              ADD     A,#00H
005F FF                MOV     R7,A
0060 EE                MOV     A,R6
0061 3444              ADDC    A,#044H
0063 FE                MOV     R6,A
0064 AA06              MOV     R2,AR6
0066 A907              MOV     R1,AR7
0068 7B01              MOV     R3,#01H
006A 900000      R     MOV     DPTR,#address
006D E0                MOVX    A,@DPTR
006E FE                MOV     R6,A
006F A3                INC     DPTR
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 105 

0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 AD07              MOV     R5,AR7
0074 AC06              MOV     R4,AR6
0076 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 2365
0079 900000      R     MOV     DPTR,#oldIsr
007C E0                MOVX    A,@DPTR
007D FE                MOV     R6,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
                                           ; SOURCE LINE # 2366
0081         ?C0182:
0081 22                RET     
             ; FUNCTION _CyIntSetVector (END)

             ; FUNCTION _CyIntGetVector (BEGIN)
                                           ; SOURCE LINE # 2381
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2382
                                           ; SOURCE LINE # 2383
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0184
0010 D3                SETB    C
0011 8001              SJMP    ?C0185
0013         ?C0184:
0013 C3                CLR     C
0014         ?C0185:
0014 4005              JC      ?C0183
0016 7F00              MOV     R7,#00H
0018 120000      R     LCALL   _?CyHalt
001B         ?C0183:
                                           ; SOURCE LINE # 2385
001B 900000      R     MOV     DPTR,#number
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 541F              ANL     A,#01FH
0023 FF                MOV     R7,A
0024 7E00              MOV     R6,#00H
0026 EF                MOV     A,R7
0027 25E0              ADD     A,ACC
0029 FF                MOV     R7,A
002A EE                MOV     A,R6
002B 33                RLC     A
002C FE                MOV     R6,A
002D EF                MOV     A,R7
002E 2400              ADD     A,#00H
0030 FF                MOV     R7,A
0031 EE                MOV     A,R6
0032 3444              ADDC    A,#044H
0034 FE                MOV     R6,A
0035 AA06              MOV     R2,AR6
0037 A907              MOV     R1,AR7
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 106 

0039 7B01              MOV     R3,#01H
003B 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 2387
003E         ?C0186:
003E 22                RET     
             ; FUNCTION _CyIntGetVector (END)

             ; FUNCTION _CyIntSetPriority (BEGIN)
                                           ; SOURCE LINE # 2400
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#priority
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2401
                                           ; SOURCE LINE # 2402
000A 900000      R     MOV     DPTR,#priority
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9407              SUBB    A,#07H
0013 5003              JNC     ?C0188
0015 D3                SETB    C
0016 8001              SJMP    ?C0189
0018         ?C0188:
0018 C3                CLR     C
0019         ?C0189:
0019 4005              JC      ?C0187
001B 7F00              MOV     R7,#00H
001D 120000      R     LCALL   _?CyHalt
0020         ?C0187:
                                           ; SOURCE LINE # 2404
0020 900000      R     MOV     DPTR,#number
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 D3                SETB    C
0027 941F              SUBB    A,#01FH
0029 5003              JNC     ?C0191
002B D3                SETB    C
002C 8001              SJMP    ?C0192
002E         ?C0191:
002E C3                CLR     C
002F         ?C0192:
002F 4005              JC      ?C0190
0031 7F00              MOV     R7,#00H
0033 120000      R     LCALL   _?CyHalt
0036         ?C0190:
                                           ; SOURCE LINE # 2406
0036 900000      R     MOV     DPTR,#priority
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 5407              ANL     A,#07H
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 75F020            MOV     B,#020H
0045 A4                MUL     AB
0046 FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 107 

0047 AEF0              MOV     R6,B
0049 900000      R     MOV     DPTR,#number
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E EE                MOV     A,R6
004F 541F              ANL     A,#01FH
0051 FE                MOV     R6,A
0052 7480              MOV     A,#080H
0054 2E                ADD     A,R6
0055 F582              MOV     DPL,A
0057 E4                CLR     A
0058 3444              ADDC    A,#044H
005A F583              MOV     DPH,A
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2408
005E 22                RET     
             ; FUNCTION _CyIntSetPriority (END)

             ; FUNCTION _CyIntGetPriority (BEGIN)
                                           ; SOURCE LINE # 2423
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2424
                                           ; SOURCE LINE # 2425
                                           ; SOURCE LINE # 2427
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0195
0010 D3                SETB    C
0011 8001              SJMP    ?C0196
0013         ?C0195:
0013 C3                CLR     C
0014         ?C0196:
0014 4005              JC      ?C0194
0016 7F00              MOV     R7,#00H
0018 120000      R     LCALL   _?CyHalt
001B         ?C0194:
                                           ; SOURCE LINE # 2429
001B 900000      R     MOV     DPTR,#number
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 541F              ANL     A,#01FH
0023 FF                MOV     R7,A
0024 7480              MOV     A,#080H
0026 2F                ADD     A,R7
0027 F582              MOV     DPL,A
0029 E4                CLR     A
002A 3444              ADDC    A,#044H
002C F583              MOV     DPH,A
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 C4                SWAP    A
0032 13                RRC     A
0033 5407              ANL     A,#07H
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 108 

0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#priority
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2431
003B 900000      R     MOV     DPTR,#priority
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
                                           ; SOURCE LINE # 2432
0040         ?C0197:
0040 22                RET     
             ; FUNCTION _CyIntGetPriority (END)

             ; FUNCTION _CyIntGetState (BEGIN)
                                           ; SOURCE LINE # 2447
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2448
                                           ; SOURCE LINE # 2449
                                           ; SOURCE LINE # 2451
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0199
0010 D3                SETB    C
0011 8001              SJMP    ?C0200
0013         ?C0199:
0013 C3                CLR     C
0014         ?C0200:
0014 4005              JC      ?C0198
0016 7F00              MOV     R7,#00H
0018 120000      R     LCALL   _?CyHalt
001B         ?C0198:
                                           ; SOURCE LINE # 2454
001B 900000      R     MOV     DPTR,#number
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 541F              ANL     A,#01FH
0023 FF                MOV     R7,A
0024 7E00              MOV     R6,#00H
0026 EF                MOV     A,R7
0027 7803              MOV     R0,#03H
0029         ?C0205:
0029 CE                XCH     A,R6
002A C3                CLR     C
002B 13                RRC     A
002C CE                XCH     A,R6
002D 13                RRC     A
002E D8F9              DJNZ    R0,?C0205
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 24C0              ADD     A,#0C0H
0034 FF                MOV     R7,A
0035 EE                MOV     A,R6
0036 3444              ADDC    A,#044H
0038 FE                MOV     R6,A
0039 900000      R     MOV     DPTR,#stateReg
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 109 

003C EE                MOV     A,R6
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2457
0041 900000      R     MOV     DPTR,#number
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 5407              ANL     A,#07H
0049 FF                MOV     R7,A
004A 7401              MOV     A,#01H
004C A807              MOV     R0,AR7
004E 08                INC     R0
004F 8002              SJMP    ?C0207
0051         ?C0206:
0051 C3                CLR     C
0052 33                RLC     A
0053         ?C0207:
0053 D8FC              DJNZ    R0,?C0206
0055 FF                MOV     R7,A
0056 900000      R     MOV     DPTR,#stateReg
0059 E0                MOVX    A,@DPTR
005A FC                MOV     R4,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D FD                MOV     R5,A
005E 8D82              MOV     DPL,R5
0060 8C83              MOV     DPH,R4
0062 E0                MOVX    A,@DPTR
0063 FE                MOV     R6,A
0064 EF                MOV     A,R7
0065 5E                ANL     A,R6
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 6004              JZ      ?C0201
006A 7F01              MOV     R7,#01H
006C 8002              SJMP    ?C0202
006E         ?C0201:
006E 7F00              MOV     R7,#00H
0070         ?C0202:
                                           ; SOURCE LINE # 2458
0070         ?C0203:
0070 22                RET     
             ; FUNCTION _CyIntGetState (END)

             ; FUNCTION _CyGetUniqueId (BEGIN)
                                           ; SOURCE LINE # 2885
0000 900000      R     MOV     DPTR,#uniqueId
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 2886
                                           ; SOURCE LINE # 2898
0006 7B0C              MOV     R3,#0CH
0008 7A01              MOV     R2,#01H
000A 7903              MOV     R1,#03H
000C 120000      E     LCALL   _cyread8
000F E4                CLR     A
0010 FC                MOV     R4,A
0011 FD                MOV     R5,A
0012 FE                MOV     R6,A
0013 900000      R     MOV     DPTR,#uniqueId
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 110 

0016 120000      E     LCALL   ?C?PLDXDATA
0019 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 2899
001C 900000      R     MOV     DPTR,#uniqueId
001F 120000      E     LCALL   ?C?PLDXDATA
0022 C003              PUSH    AR3
0024 C002              PUSH    AR2
0026 C001              PUSH    AR1
0028 120000      E     LCALL   ?C?LLDPTR
002B C004              PUSH    AR4
002D C005              PUSH    AR5
002F C006              PUSH    AR6
0031 C007              PUSH    AR7
0033 7B0C              MOV     R3,#0CH
0035 7A01              MOV     R2,#01H
0037 7904              MOV     R1,#04H
0039 120000      E     LCALL   _cyread8
003C E4                CLR     A
003D FC                MOV     R4,A
003E FD                MOV     R5,A
003F FE                MOV     R6,A
0040 7808              MOV     R0,#08H
0042 120000      E     LCALL   ?C?LSHL
0045 A804              MOV     R0,AR4
0047 A905              MOV     R1,AR5
0049 AA06              MOV     R2,AR6
004B AB07              MOV     R3,AR7
004D D007              POP     AR7
004F D006              POP     AR6
0051 D005              POP     AR5
0053 D004              POP     AR4
0055 120000      E     LCALL   ?C?LOR
0058 D001              POP     AR1
005A D002              POP     AR2
005C D003              POP     AR3
005E 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 2900
0061 900000      R     MOV     DPTR,#uniqueId
0064 120000      E     LCALL   ?C?PLDXDATA
0067 C003              PUSH    AR3
0069 C002              PUSH    AR2
006B C001              PUSH    AR1
006D 120000      E     LCALL   ?C?LLDPTR
0070 C004              PUSH    AR4
0072 C005              PUSH    AR5
0074 C006              PUSH    AR6
0076 C007              PUSH    AR7
0078 7B00              MOV     R3,#00H
007A 7A46              MOV     R2,#046H
007C 79EC              MOV     R1,#0ECH
007E 120000      E     LCALL   _cyread8
0081 E4                CLR     A
0082 FC                MOV     R4,A
0083 FD                MOV     R5,A
0084 FE                MOV     R6,A
0085 7810              MOV     R0,#010H
0087 120000      E     LCALL   ?C?LSHL
008A A804              MOV     R0,AR4
008C A905              MOV     R1,AR5
008E AA06              MOV     R2,AR6
0090 AB07              MOV     R3,AR7
0092 D007              POP     AR7
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 111 

0094 D006              POP     AR6
0096 D005              POP     AR5
0098 D004              POP     AR4
009A 120000      E     LCALL   ?C?LOR
009D D001              POP     AR1
009F D002              POP     AR2
00A1 D003              POP     AR3
00A3 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 2901
00A6 900000      R     MOV     DPTR,#uniqueId
00A9 120000      E     LCALL   ?C?PLDXDATA
00AC C003              PUSH    AR3
00AE C002              PUSH    AR2
00B0 C001              PUSH    AR1
00B2 120000      E     LCALL   ?C?LLDPTR
00B5 C004              PUSH    AR4
00B7 C005              PUSH    AR5
00B9 C006              PUSH    AR6
00BB C007              PUSH    AR7
00BD 7B0C              MOV     R3,#0CH
00BF 7A01              MOV     R2,#01H
00C1 7902              MOV     R1,#02H
00C3 120000      E     LCALL   _cyread8
00C6 E4                CLR     A
00C7 FC                MOV     R4,A
00C8 FD                MOV     R5,A
00C9 FE                MOV     R6,A
00CA 7818              MOV     R0,#018H
00CC 120000      E     LCALL   ?C?LSHL
00CF A804              MOV     R0,AR4
00D1 A905              MOV     R1,AR5
00D3 AA06              MOV     R2,AR6
00D5 AB07              MOV     R3,AR7
00D7 D007              POP     AR7
00D9 D006              POP     AR6
00DB D005              POP     AR5
00DD D004              POP     AR4
00DF 120000      E     LCALL   ?C?LOR
00E2 D001              POP     AR1
00E4 D002              POP     AR2
00E6 D003              POP     AR3
00E8 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 2903
00EB 7B0C              MOV     R3,#0CH
00ED 7A01              MOV     R2,#01H
00EF 7901              MOV     R1,#01H
00F1 120000      E     LCALL   _cyread8
00F4 E4                CLR     A
00F5 FC                MOV     R4,A
00F6 FD                MOV     R5,A
00F7 FE                MOV     R6,A
00F8 900000      R     MOV     DPTR,#uniqueId
00FB 120000      E     LCALL   ?C?PLDXDATA
00FE E9                MOV     A,R1
00FF 2404              ADD     A,#04H
0101 F9                MOV     R1,A
0102 EA                MOV     A,R2
0103 3400              ADDC    A,#00H
0105 FA                MOV     R2,A
0106 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 2904
0109 900000      R     MOV     DPTR,#uniqueId
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 112 

010C 120000      E     LCALL   ?C?PLDXDATA
010F E9                MOV     A,R1
0110 2404              ADD     A,#04H
0112 F9                MOV     R1,A
0113 EA                MOV     A,R2
0114 3400              ADDC    A,#00H
0116 FA                MOV     R2,A
0117 C003              PUSH    AR3
0119 C002              PUSH    AR2
011B C001              PUSH    AR1
011D 120000      E     LCALL   ?C?LLDPTR
0120 C004              PUSH    AR4
0122 C005              PUSH    AR5
0124 C006              PUSH    AR6
0126 C007              PUSH    AR7
0128 7B0C              MOV     R3,#0CH
012A 7A01              MOV     R2,#01H
012C 7900              MOV     R1,#00H
012E 120000      E     LCALL   _cyread8
0131 E4                CLR     A
0132 FC                MOV     R4,A
0133 FD                MOV     R5,A
0134 FE                MOV     R6,A
0135 7808              MOV     R0,#08H
0137 120000      E     LCALL   ?C?LSHL
013A A804              MOV     R0,AR4
013C A905              MOV     R1,AR5
013E AA06              MOV     R2,AR6
0140 AB07              MOV     R3,AR7
0142 D007              POP     AR7
0144 D006              POP     AR6
0146 D005              POP     AR5
0148 D004              POP     AR4
014A 120000      E     LCALL   ?C?LOR
014D D001              POP     AR1
014F D002              POP     AR2
0151 D003              POP     AR3
0153 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 2905
0156 900000      R     MOV     DPTR,#uniqueId
0159 120000      E     LCALL   ?C?PLDXDATA
015C E9                MOV     A,R1
015D 2404              ADD     A,#04H
015F F9                MOV     R1,A
0160 EA                MOV     A,R2
0161 3400              ADDC    A,#00H
0163 FA                MOV     R2,A
0164 C003              PUSH    AR3
0166 C002              PUSH    AR2
0168 C001              PUSH    AR1
016A 120000      E     LCALL   ?C?LLDPTR
016D C004              PUSH    AR4
016F C005              PUSH    AR5
0171 C006              PUSH    AR6
0173 C007              PUSH    AR7
0175 7B0C              MOV     R3,#0CH
0177 7A01              MOV     R2,#01H
0179 7905              MOV     R1,#05H
017B 120000      E     LCALL   _cyread8
017E E4                CLR     A
017F FC                MOV     R4,A
0180 FD                MOV     R5,A
C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 113 

0181 FE                MOV     R6,A
0182 7810              MOV     R0,#010H
0184 120000      E     LCALL   ?C?LSHL
0187 A804              MOV     R0,AR4
0189 A905              MOV     R1,AR5
018B AA06              MOV     R2,AR6
018D AB07              MOV     R3,AR7
018F D007              POP     AR7
0191 D006              POP     AR6
0193 D005              POP     AR5
0195 D004              POP     AR4
0197 120000      E     LCALL   ?C?LOR
019A D001              POP     AR1
019C D002              POP     AR2
019E D003              POP     AR3
01A0 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 2906
01A3 900000      R     MOV     DPTR,#uniqueId
01A6 120000      E     LCALL   ?C?PLDXDATA
01A9 E9                MOV     A,R1
01AA 2404              ADD     A,#04H
01AC F9                MOV     R1,A
01AD EA                MOV     A,R2
01AE 3400              ADDC    A,#00H
01B0 FA                MOV     R2,A
01B1 C003              PUSH    AR3
01B3 C002              PUSH    AR2
01B5 C001              PUSH    AR1
01B7 120000      E     LCALL   ?C?LLDPTR
01BA C004              PUSH    AR4
01BC C005              PUSH    AR5
01BE C006              PUSH    AR6
01C0 C007              PUSH    AR7
01C2 7B0C              MOV     R3,#0CH
01C4 7A01              MOV     R2,#01H
01C6 7906              MOV     R1,#06H
01C8 120000      E     LCALL   _cyread8
01CB E4                CLR     A
01CC FC                MOV     R4,A
01CD FD                MOV     R5,A
01CE FE                MOV     R6,A
01CF 7818              MOV     R0,#018H
01D1 120000      E     LCALL   ?C?LSHL
01D4 A804              MOV     R0,AR4
01D6 A905              MOV     R1,AR5
01D8 AA06              MOV     R2,AR6
01DA AB07              MOV     R3,AR7
01DC D007              POP     AR7
01DE D006              POP     AR6
01E0 D005              POP     AR5
01E2 D004              POP     AR4
01E4 120000      E     LCALL   ?C?LOR
01E7 D001              POP     AR1
01E9 D002              POP     AR2
01EB D003              POP     AR3
01ED 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 2908
01F0 22                RET     
             ; FUNCTION _CyGetUniqueId (END)



C51 COMPILER V9.51   CYLIB                                                                 04/13/2019 18:13:48 PAGE 114 

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5003    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     15     102
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
